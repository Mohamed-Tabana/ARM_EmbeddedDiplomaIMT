
13-Flash_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000298  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  0800042c  0800042c  0001042c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000434  08000434  0001043c  2**0
                  CONTENTS
  4 .ARM          00000000  08000434  08000434  0001043c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000434  0800043c  0001043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000434  08000434  00010434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000438  08000438  00010438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000000  0800043c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  0800043c  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001043c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000013a3  00000000  00000000  0001046c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004f5  00000000  00000000  0001180f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d0  00000000  00000000  00011d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000178  00000000  00000000  00011ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000d8d  00000000  00000000  00012050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000241d  00000000  00000000  00012ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008d73  00000000  00000000  000151fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001df6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000610  00000000  00000000  0001dfc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000414 	.word	0x08000414

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000414 	.word	0x08000414

080001d4 <EXTI0_IRQHandler>:
#include "RCC_Interface.h"

EXTI_Callback_t Global_EXTICallBack[16];

void EXTI0_IRQHandler(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	//if (Global_EXTICallBack[0] != NULL)
	Global_EXTICallBack[0]();
 80001d8:	4b05      	ldr	r3, [pc, #20]	; (80001f0 <EXTI0_IRQHandler+0x1c>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4798      	blx	r3
	SET_BIT(MEXTI->EXTI_PR,EXTI_LINE_0);
 80001de:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <EXTI0_IRQHandler+0x20>)
 80001e0:	695b      	ldr	r3, [r3, #20]
 80001e2:	4a04      	ldr	r2, [pc, #16]	; (80001f4 <EXTI0_IRQHandler+0x20>)
 80001e4:	f043 0301 	orr.w	r3, r3, #1
 80001e8:	6153      	str	r3, [r2, #20]
}
 80001ea:	bf00      	nop
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	2000001c 	.word	0x2000001c
 80001f4:	40013c00 	.word	0x40013c00

080001f8 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
//	if (Global_EXTICallBack[1] != NULL)
	Global_EXTICallBack[1]();
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <EXTI1_IRQHandler+0x1c>)
 80001fe:	685b      	ldr	r3, [r3, #4]
 8000200:	4798      	blx	r3
	SET_BIT(MEXTI->EXTI_PR,EXTI_LINE_1);
 8000202:	4b05      	ldr	r3, [pc, #20]	; (8000218 <EXTI1_IRQHandler+0x20>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	4a04      	ldr	r2, [pc, #16]	; (8000218 <EXTI1_IRQHandler+0x20>)
 8000208:	f043 0302 	orr.w	r3, r3, #2
 800020c:	6153      	str	r3, [r2, #20]

}
 800020e:	bf00      	nop
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	2000001c 	.word	0x2000001c
 8000218:	40013c00 	.word	0x40013c00

0800021c <FMI_vFlashWrite>:

	/* 6- DeSelect Erase Operation (reverse of step 2) */
	CLEAR_BIT(FMI->FLASH_CR, CR_SER);
}
void FMI_vFlashWrite(uint32_t copy_u32Address, uint16_t* copy_pu16Data, uint32_t copy_u32Size)
{
 800021c:	b480      	push	{r7}
 800021e:	b087      	sub	sp, #28
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
	/* 0. unlock control register in FLASH_KEYR */
	if(READ_BIT(FMI->FLASH_CR, CR_LOCK) )
 8000228:	4b2a      	ldr	r3, [pc, #168]	; (80002d4 <FMI_vFlashWrite+0xb8>)
 800022a:	691b      	ldr	r3, [r3, #16]
 800022c:	0fdb      	lsrs	r3, r3, #31
 800022e:	f003 0301 	and.w	r3, r3, #1
 8000232:	2b00      	cmp	r3, #0
 8000234:	d005      	beq.n	8000242 <FMI_vFlashWrite+0x26>
	{
		FMI->FLASH_KEYR = FMI_KEY1;
 8000236:	4b27      	ldr	r3, [pc, #156]	; (80002d4 <FMI_vFlashWrite+0xb8>)
 8000238:	4a27      	ldr	r2, [pc, #156]	; (80002d8 <FMI_vFlashWrite+0xbc>)
 800023a:	605a      	str	r2, [r3, #4]
		FMI->FLASH_KEYR = FMI_KEY2;
 800023c:	4b25      	ldr	r3, [pc, #148]	; (80002d4 <FMI_vFlashWrite+0xb8>)
 800023e:	4a27      	ldr	r2, [pc, #156]	; (80002dc <FMI_vFlashWrite+0xc0>)
 8000240:	605a      	str	r2, [r3, #4]
	}
	/* 1. check busy bit */
	while(READ_BIT(FMI->FLASH_SR,SR_BSY));
 8000242:	bf00      	nop
 8000244:	4b23      	ldr	r3, [pc, #140]	; (80002d4 <FMI_vFlashWrite+0xb8>)
 8000246:	68db      	ldr	r3, [r3, #12]
 8000248:	0c1b      	lsrs	r3, r3, #16
 800024a:	f003 0301 	and.w	r3, r3, #1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d1f8      	bne.n	8000244 <FMI_vFlashWrite+0x28>
	/* 2. Set the PG bit */
	SET_BIT(FMI->FLASH_CR,CR_PG);
 8000252:	4b20      	ldr	r3, [pc, #128]	; (80002d4 <FMI_vFlashWrite+0xb8>)
 8000254:	691b      	ldr	r3, [r3, #16]
 8000256:	4a1f      	ldr	r2, [pc, #124]	; (80002d4 <FMI_vFlashWrite+0xb8>)
 8000258:	f043 0301 	orr.w	r3, r3, #1
 800025c:	6113      	str	r3, [r2, #16]
	/* 3. Select PSIZEt */
	FMI->FLASH_CR &= ~ (0b11 << CR_PSIZE0);
 800025e:	4b1d      	ldr	r3, [pc, #116]	; (80002d4 <FMI_vFlashWrite+0xb8>)
 8000260:	691b      	ldr	r3, [r3, #16]
 8000262:	4a1c      	ldr	r2, [pc, #112]	; (80002d4 <FMI_vFlashWrite+0xb8>)
 8000264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000268:	6113      	str	r3, [r2, #16]
	FMI->FLASH_CR |= 0b01 << CR_PSIZE0;
 800026a:	4b1a      	ldr	r3, [pc, #104]	; (80002d4 <FMI_vFlashWrite+0xb8>)
 800026c:	691b      	ldr	r3, [r3, #16]
 800026e:	4a19      	ldr	r2, [pc, #100]	; (80002d4 <FMI_vFlashWrite+0xb8>)
 8000270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000274:	6113      	str	r3, [r2, #16]

	/* 4. Assign data*/
	for(uint32_t Local_u32counter=0;Local_u32counter<copy_u32Size;Local_u32counter++)
 8000276:	2300      	movs	r3, #0
 8000278:	617b      	str	r3, [r7, #20]
 800027a:	e01a      	b.n	80002b2 <FMI_vFlashWrite+0x96>
	{
		*((volatile uint16_t*)copy_u32Address) = copy_pu16Data[Local_u32counter];
 800027c:	697b      	ldr	r3, [r7, #20]
 800027e:	005b      	lsls	r3, r3, #1
 8000280:	68ba      	ldr	r2, [r7, #8]
 8000282:	441a      	add	r2, r3
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	8812      	ldrh	r2, [r2, #0]
 8000288:	801a      	strh	r2, [r3, #0]
		/* 5. Wait for the BSY bit to be cleared */
		while(READ_BIT(FMI->FLASH_SR,SR_BSY));
 800028a:	bf00      	nop
 800028c:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <FMI_vFlashWrite+0xb8>)
 800028e:	68db      	ldr	r3, [r3, #12]
 8000290:	0c1b      	lsrs	r3, r3, #16
 8000292:	f003 0301 	and.w	r3, r3, #1
 8000296:	2b00      	cmp	r3, #0
 8000298:	d1f8      	bne.n	800028c <FMI_vFlashWrite+0x70>
		/* 6- Clear EOP flag   */
		SET_BIT(FMI->FLASH_SR, SR_EOP);
 800029a:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <FMI_vFlashWrite+0xb8>)
 800029c:	68db      	ldr	r3, [r3, #12]
 800029e:	4a0d      	ldr	r2, [pc, #52]	; (80002d4 <FMI_vFlashWrite+0xb8>)
 80002a0:	f043 0301 	orr.w	r3, r3, #1
 80002a4:	60d3      	str	r3, [r2, #12]
		copy_u32Address += 2;
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	3302      	adds	r3, #2
 80002aa:	60fb      	str	r3, [r7, #12]
	for(uint32_t Local_u32counter=0;Local_u32counter<copy_u32Size;Local_u32counter++)
 80002ac:	697b      	ldr	r3, [r7, #20]
 80002ae:	3301      	adds	r3, #1
 80002b0:	617b      	str	r3, [r7, #20]
 80002b2:	697a      	ldr	r2, [r7, #20]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d3e0      	bcc.n	800027c <FMI_vFlashWrite+0x60>
	}
	/* 7 - deactivate programming mode */
	CLEAR_BIT(FMI->FLASH_CR,CR_PG);
 80002ba:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <FMI_vFlashWrite+0xb8>)
 80002bc:	691b      	ldr	r3, [r3, #16]
 80002be:	4a05      	ldr	r2, [pc, #20]	; (80002d4 <FMI_vFlashWrite+0xb8>)
 80002c0:	f023 0301 	bic.w	r3, r3, #1
 80002c4:	6113      	str	r3, [r2, #16]



}
 80002c6:	bf00      	nop
 80002c8:	371c      	adds	r7, #28
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	40023c00 	.word	0x40023c00
 80002d8:	45670123 	.word	0x45670123
 80002dc:	cdef89ab 	.word	0xcdef89ab

080002e0 <RCC_AHB1LPEnableCLK>:

}


void RCC_AHB1LPEnableCLK(PeripheralAHBLP1_t peripheral)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	4603      	mov	r3, r0
 80002e8:	71fb      	strb	r3, [r7, #7]
	SET_BIT(RCC->RCC_AHB1LPENR,peripheral);
 80002ea:	4b08      	ldr	r3, [pc, #32]	; (800030c <RCC_AHB1LPEnableCLK+0x2c>)
 80002ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80002ee:	79fa      	ldrb	r2, [r7, #7]
 80002f0:	2101      	movs	r1, #1
 80002f2:	fa01 f202 	lsl.w	r2, r1, r2
 80002f6:	4611      	mov	r1, r2
 80002f8:	4a04      	ldr	r2, [pc, #16]	; (800030c <RCC_AHB1LPEnableCLK+0x2c>)
 80002fa:	430b      	orrs	r3, r1
 80002fc:	6513      	str	r3, [r2, #80]	; 0x50
}
 80002fe:	bf00      	nop
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40023800 	.word	0x40023800

08000310 <SysTick_Handler>:
#include "SysTick_Interface.h"
STK_Callback_t Global_SysTickCallback;
Interval_t Global_Interval;

void SysTick_Handler(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	if (Global_Interval == Interval_Single)
 8000314:	4b09      	ldr	r3, [pc, #36]	; (800033c <SysTick_Handler+0x2c>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d105      	bne.n	8000328 <SysTick_Handler+0x18>
	{
		//disable counter
		CLEAR_BIT(MSTK->STK_CTRL,ENABLE);
 800031c:	4b08      	ldr	r3, [pc, #32]	; (8000340 <SysTick_Handler+0x30>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a07      	ldr	r2, [pc, #28]	; (8000340 <SysTick_Handler+0x30>)
 8000322:	f023 0301 	bic.w	r3, r3, #1
 8000326:	6013      	str	r3, [r2, #0]
	}
	if (Global_SysTickCallback != 0)
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <SysTick_Handler+0x34>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d002      	beq.n	8000336 <SysTick_Handler+0x26>
	{
		Global_SysTickCallback();
 8000330:	4b04      	ldr	r3, [pc, #16]	; (8000344 <SysTick_Handler+0x34>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4798      	blx	r3
	}
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000060 	.word	0x20000060
 8000340:	e000e010 	.word	0xe000e010
 8000344:	2000005c 	.word	0x2000005c

08000348 <main>:

#include "RCC_Interface.h"
#include "FMI_Interface.h"

int main(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
	//RCC_SetCLKSTS(HSI_clock, CLK_ON);
	RCC_AHB1LPEnableCLK(FLITFLPEN);
 800034e:	200f      	movs	r0, #15
 8000350:	f7ff ffc6 	bl	80002e0 <RCC_AHB1LPEnableCLK>

	uint16_t arr[3]={0x11FF,0xFF11,0xFFFF};
 8000354:	4a06      	ldr	r2, [pc, #24]	; (8000370 <main+0x28>)
 8000356:	463b      	mov	r3, r7
 8000358:	e892 0003 	ldmia.w	r2, {r0, r1}
 800035c:	6018      	str	r0, [r3, #0]
 800035e:	3304      	adds	r3, #4
 8000360:	8019      	strh	r1, [r3, #0]
	FMI_vFlashWrite(0x08020000, arr, 3);
 8000362:	463b      	mov	r3, r7
 8000364:	2203      	movs	r2, #3
 8000366:	4619      	mov	r1, r3
 8000368:	4802      	ldr	r0, [pc, #8]	; (8000374 <main+0x2c>)
 800036a:	f7ff ff57 	bl	800021c <FMI_vFlashWrite>
//	FMI_vFlashEraseSector(Sector2);



	for(;;);
 800036e:	e7fe      	b.n	800036e <main+0x26>
 8000370:	0800042c 	.word	0x0800042c
 8000374:	08020000 	.word	0x08020000

08000378 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000378:	480d      	ldr	r0, [pc, #52]	; (80003b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800037a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800037c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000380:	480c      	ldr	r0, [pc, #48]	; (80003b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000382:	490d      	ldr	r1, [pc, #52]	; (80003b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000384:	4a0d      	ldr	r2, [pc, #52]	; (80003bc <LoopForever+0xe>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000388:	e002      	b.n	8000390 <LoopCopyDataInit>

0800038a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800038c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038e:	3304      	adds	r3, #4

08000390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000394:	d3f9      	bcc.n	800038a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000396:	4a0a      	ldr	r2, [pc, #40]	; (80003c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000398:	4c0a      	ldr	r4, [pc, #40]	; (80003c4 <LoopForever+0x16>)
  movs r3, #0
 800039a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800039c:	e001      	b.n	80003a2 <LoopFillZerobss>

0800039e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a0:	3204      	adds	r2, #4

080003a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a4:	d3fb      	bcc.n	800039e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003a6:	f000 f811 	bl	80003cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003aa:	f7ff ffcd 	bl	8000348 <main>

080003ae <LoopForever>:

LoopForever:
  b LoopForever
 80003ae:	e7fe      	b.n	80003ae <LoopForever>
  ldr   r0, =_estack
 80003b0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80003b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003bc:	0800043c 	.word	0x0800043c
  ldr r2, =_sbss
 80003c0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003c4:	20000064 	.word	0x20000064

080003c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c8:	e7fe      	b.n	80003c8 <ADC_IRQHandler>
	...

080003cc <__libc_init_array>:
 80003cc:	b570      	push	{r4, r5, r6, lr}
 80003ce:	4d0d      	ldr	r5, [pc, #52]	; (8000404 <__libc_init_array+0x38>)
 80003d0:	4c0d      	ldr	r4, [pc, #52]	; (8000408 <__libc_init_array+0x3c>)
 80003d2:	1b64      	subs	r4, r4, r5
 80003d4:	10a4      	asrs	r4, r4, #2
 80003d6:	2600      	movs	r6, #0
 80003d8:	42a6      	cmp	r6, r4
 80003da:	d109      	bne.n	80003f0 <__libc_init_array+0x24>
 80003dc:	4d0b      	ldr	r5, [pc, #44]	; (800040c <__libc_init_array+0x40>)
 80003de:	4c0c      	ldr	r4, [pc, #48]	; (8000410 <__libc_init_array+0x44>)
 80003e0:	f000 f818 	bl	8000414 <_init>
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	10a4      	asrs	r4, r4, #2
 80003e8:	2600      	movs	r6, #0
 80003ea:	42a6      	cmp	r6, r4
 80003ec:	d105      	bne.n	80003fa <__libc_init_array+0x2e>
 80003ee:	bd70      	pop	{r4, r5, r6, pc}
 80003f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f4:	4798      	blx	r3
 80003f6:	3601      	adds	r6, #1
 80003f8:	e7ee      	b.n	80003d8 <__libc_init_array+0xc>
 80003fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80003fe:	4798      	blx	r3
 8000400:	3601      	adds	r6, #1
 8000402:	e7f2      	b.n	80003ea <__libc_init_array+0x1e>
 8000404:	08000434 	.word	0x08000434
 8000408:	08000434 	.word	0x08000434
 800040c:	08000434 	.word	0x08000434
 8000410:	08000438 	.word	0x08000438

08000414 <_init>:
 8000414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000416:	bf00      	nop
 8000418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041a:	bc08      	pop	{r3}
 800041c:	469e      	mov	lr, r3
 800041e:	4770      	bx	lr

08000420 <_fini>:
 8000420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000422:	bf00      	nop
 8000424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000426:	bc08      	pop	{r3}
 8000428:	469e      	mov	lr, r3
 800042a:	4770      	bx	lr
