
GPIO-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000608  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  0800079c  0800079c  0001079c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080007a8  080007a8  000107b0  2**0
                  CONTENTS
  4 .ARM          00000000  080007a8  080007a8  000107b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007a8  080007b0  000107b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007a8  080007a8  000107a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007ac  080007ac  000107ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000107b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080007b0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080007b0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000107b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001243  00000000  00000000  000107e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003dc  00000000  00000000  00011a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000140  00000000  00000000  00011e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000f8  00000000  00000000  00011f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000023dd  00000000  00000000  00012038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000020d8  00000000  00000000  00014415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008888  00000000  00000000  000164ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001ed75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003f8  00000000  00000000  0001edc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000784 	.word	0x08000784

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000784 	.word	0x08000784

080001d4 <Print_MLX>:
 */

#include "stdio.h"
#include "GPIO_Interface.h"
void Print_MLX(uint32_t copy_u8Number)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b088      	sub	sp, #32
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	char seg[10]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x67};
 80001dc:	4a23      	ldr	r2, [pc, #140]	; (800026c <Print_MLX+0x98>)
 80001de:	f107 030c 	add.w	r3, r7, #12
 80001e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80001e4:	c303      	stmia	r3!, {r0, r1}
 80001e6:	801a      	strh	r2, [r3, #0]
	uint32_t D0=copy_u8Number%10;
 80001e8:	687a      	ldr	r2, [r7, #4]
 80001ea:	4b21      	ldr	r3, [pc, #132]	; (8000270 <Print_MLX+0x9c>)
 80001ec:	fba3 1302 	umull	r1, r3, r3, r2
 80001f0:	08d9      	lsrs	r1, r3, #3
 80001f2:	460b      	mov	r3, r1
 80001f4:	009b      	lsls	r3, r3, #2
 80001f6:	440b      	add	r3, r1
 80001f8:	005b      	lsls	r3, r3, #1
 80001fa:	1ad3      	subs	r3, r2, r3
 80001fc:	61fb      	str	r3, [r7, #28]
	uint32_t D1=copy_u8Number/10;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	4a1b      	ldr	r2, [pc, #108]	; (8000270 <Print_MLX+0x9c>)
 8000202:	fba2 2303 	umull	r2, r3, r2, r3
 8000206:	08db      	lsrs	r3, r3, #3
 8000208:	61bb      	str	r3, [r7, #24]

	MGPIO_vSetOutputPinValueBSR(PORTA,PIN7,0);
 800020a:	2200      	movs	r2, #0
 800020c:	2107      	movs	r1, #7
 800020e:	2000      	movs	r0, #0
 8000210:	f000 f8f2 	bl	80003f8 <MGPIO_vSetOutputPinValueBSR>
	MGPIO_vSetOutputPinValueBSR(PORTB,PIN7,0);
 8000214:	2200      	movs	r2, #0
 8000216:	2107      	movs	r1, #7
 8000218:	2001      	movs	r0, #1
 800021a:	f000 f8ed 	bl	80003f8 <MGPIO_vSetOutputPinValueBSR>
//	MGPIO_vSetOutputPinValueBSR(PORTA,PIN2,(seg[D1]>>2)&&0x01);
//	MGPIO_vSetOutputPinValueBSR(PORTA,PIN3,(seg[D1]>>3)&&0x01);
//	MGPIO_vSetOutputPinValueBSR(PORTA,PIN4,(seg[D1]>>4)&&0x01);
//	MGPIO_vSetOutputPinValueBSR(PORTA,PIN5,(seg[D1]>>5)&&0x01);
//	MGPIO_vSetOutputPinValueBSR(PORTA,PIN6,(seg[D1]>>6)&&0x01);
	GPIOA->GPIO_ODR &= ~(0b1111111<<0);
 800021e:	4b15      	ldr	r3, [pc, #84]	; (8000274 <Print_MLX+0xa0>)
 8000220:	695b      	ldr	r3, [r3, #20]
 8000222:	4a14      	ldr	r2, [pc, #80]	; (8000274 <Print_MLX+0xa0>)
 8000224:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000228:	6153      	str	r3, [r2, #20]
	GPIOA->GPIO_ODR |= (seg[D1]<<0);
 800022a:	4b12      	ldr	r3, [pc, #72]	; (8000274 <Print_MLX+0xa0>)
 800022c:	695b      	ldr	r3, [r3, #20]
 800022e:	f107 010c 	add.w	r1, r7, #12
 8000232:	69ba      	ldr	r2, [r7, #24]
 8000234:	440a      	add	r2, r1
 8000236:	7812      	ldrb	r2, [r2, #0]
 8000238:	4611      	mov	r1, r2
 800023a:	4a0e      	ldr	r2, [pc, #56]	; (8000274 <Print_MLX+0xa0>)
 800023c:	430b      	orrs	r3, r1
 800023e:	6153      	str	r3, [r2, #20]
//	MGPIO_vSetOutputPinValueBSR(PORTB,PIN3,(seg[D0]>>3)&&0x01);
//	MGPIO_vSetOutputPinValueBSR(PORTB,PIN4,(seg[D0]>>4)&&0x01);
//	MGPIO_vSetOutputPinValueBSR(PORTB,PIN5,(seg[D0]>>5)&&0x01);
//	MGPIO_vSetOutputPinValueBSR(PORTB,PIN6,(seg[D0]>>6)&&0x01);

	GPIOB->GPIO_ODR &= ~(0b1111111<<0);
 8000240:	4b0d      	ldr	r3, [pc, #52]	; (8000278 <Print_MLX+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4a0c      	ldr	r2, [pc, #48]	; (8000278 <Print_MLX+0xa4>)
 8000246:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800024a:	6153      	str	r3, [r2, #20]
	GPIOB->GPIO_ODR |= (seg[D0]<<0);
 800024c:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <Print_MLX+0xa4>)
 800024e:	695b      	ldr	r3, [r3, #20]
 8000250:	f107 010c 	add.w	r1, r7, #12
 8000254:	69fa      	ldr	r2, [r7, #28]
 8000256:	440a      	add	r2, r1
 8000258:	7812      	ldrb	r2, [r2, #0]
 800025a:	4611      	mov	r1, r2
 800025c:	4a06      	ldr	r2, [pc, #24]	; (8000278 <Print_MLX+0xa4>)
 800025e:	430b      	orrs	r3, r1
 8000260:	6153      	str	r3, [r2, #20]



}
 8000262:	bf00      	nop
 8000264:	3720      	adds	r7, #32
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	0800079c 	.word	0x0800079c
 8000270:	cccccccd 	.word	0xcccccccd
 8000274:	40020000 	.word	0x40020000
 8000278:	40020400 	.word	0x40020400

0800027c <MGPIO_vSetPinType>:

#include "GPIO_Interface.h"


void MGPIO_vSetPinType(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_PinType_t copy_eGPIO_PinType)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	71fb      	strb	r3, [r7, #7]
 8000286:	460b      	mov	r3, r1
 8000288:	71bb      	strb	r3, [r7, #6]
 800028a:	4613      	mov	r3, r2
 800028c:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	2b05      	cmp	r3, #5
 8000292:	f200 809f 	bhi.w	80003d4 <MGPIO_vSetPinType+0x158>
 8000296:	a201      	add	r2, pc, #4	; (adr r2, 800029c <MGPIO_vSetPinType+0x20>)
 8000298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800029c:	080002b5 	.word	0x080002b5
 80002a0:	080002e5 	.word	0x080002e5
 80002a4:	08000315 	.word	0x08000315
 80002a8:	08000345 	.word	0x08000345
 80002ac:	08000375 	.word	0x08000375
 80002b0:	080003a5 	.word	0x080003a5
	{
	case PORTA:
		GPIOA->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 80002b4:	4b4a      	ldr	r3, [pc, #296]	; (80003e0 <MGPIO_vSetPinType+0x164>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	79ba      	ldrb	r2, [r7, #6]
 80002ba:	0052      	lsls	r2, r2, #1
 80002bc:	2103      	movs	r1, #3
 80002be:	fa01 f202 	lsl.w	r2, r1, r2
 80002c2:	43d2      	mvns	r2, r2
 80002c4:	4611      	mov	r1, r2
 80002c6:	4a46      	ldr	r2, [pc, #280]	; (80003e0 <MGPIO_vSetPinType+0x164>)
 80002c8:	400b      	ands	r3, r1
 80002ca:	6013      	str	r3, [r2, #0]
		GPIOA->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 80002cc:	4b44      	ldr	r3, [pc, #272]	; (80003e0 <MGPIO_vSetPinType+0x164>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	7979      	ldrb	r1, [r7, #5]
 80002d2:	79ba      	ldrb	r2, [r7, #6]
 80002d4:	0052      	lsls	r2, r2, #1
 80002d6:	fa01 f202 	lsl.w	r2, r1, r2
 80002da:	4611      	mov	r1, r2
 80002dc:	4a40      	ldr	r2, [pc, #256]	; (80003e0 <MGPIO_vSetPinType+0x164>)
 80002de:	430b      	orrs	r3, r1
 80002e0:	6013      	str	r3, [r2, #0]
		break;
 80002e2:	e077      	b.n	80003d4 <MGPIO_vSetPinType+0x158>
	case PORTB:
		GPIOB->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 80002e4:	4b3f      	ldr	r3, [pc, #252]	; (80003e4 <MGPIO_vSetPinType+0x168>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	79ba      	ldrb	r2, [r7, #6]
 80002ea:	0052      	lsls	r2, r2, #1
 80002ec:	2103      	movs	r1, #3
 80002ee:	fa01 f202 	lsl.w	r2, r1, r2
 80002f2:	43d2      	mvns	r2, r2
 80002f4:	4611      	mov	r1, r2
 80002f6:	4a3b      	ldr	r2, [pc, #236]	; (80003e4 <MGPIO_vSetPinType+0x168>)
 80002f8:	400b      	ands	r3, r1
 80002fa:	6013      	str	r3, [r2, #0]
		GPIOB->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 80002fc:	4b39      	ldr	r3, [pc, #228]	; (80003e4 <MGPIO_vSetPinType+0x168>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	7979      	ldrb	r1, [r7, #5]
 8000302:	79ba      	ldrb	r2, [r7, #6]
 8000304:	0052      	lsls	r2, r2, #1
 8000306:	fa01 f202 	lsl.w	r2, r1, r2
 800030a:	4611      	mov	r1, r2
 800030c:	4a35      	ldr	r2, [pc, #212]	; (80003e4 <MGPIO_vSetPinType+0x168>)
 800030e:	430b      	orrs	r3, r1
 8000310:	6013      	str	r3, [r2, #0]
		break;
 8000312:	e05f      	b.n	80003d4 <MGPIO_vSetPinType+0x158>
	case PORTC:
		GPIOC->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 8000314:	4b34      	ldr	r3, [pc, #208]	; (80003e8 <MGPIO_vSetPinType+0x16c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	79ba      	ldrb	r2, [r7, #6]
 800031a:	0052      	lsls	r2, r2, #1
 800031c:	2103      	movs	r1, #3
 800031e:	fa01 f202 	lsl.w	r2, r1, r2
 8000322:	43d2      	mvns	r2, r2
 8000324:	4611      	mov	r1, r2
 8000326:	4a30      	ldr	r2, [pc, #192]	; (80003e8 <MGPIO_vSetPinType+0x16c>)
 8000328:	400b      	ands	r3, r1
 800032a:	6013      	str	r3, [r2, #0]
		GPIOC->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <MGPIO_vSetPinType+0x16c>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	7979      	ldrb	r1, [r7, #5]
 8000332:	79ba      	ldrb	r2, [r7, #6]
 8000334:	0052      	lsls	r2, r2, #1
 8000336:	fa01 f202 	lsl.w	r2, r1, r2
 800033a:	4611      	mov	r1, r2
 800033c:	4a2a      	ldr	r2, [pc, #168]	; (80003e8 <MGPIO_vSetPinType+0x16c>)
 800033e:	430b      	orrs	r3, r1
 8000340:	6013      	str	r3, [r2, #0]
		break;
 8000342:	e047      	b.n	80003d4 <MGPIO_vSetPinType+0x158>
	case PORTD:
		GPIOD->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 8000344:	4b29      	ldr	r3, [pc, #164]	; (80003ec <MGPIO_vSetPinType+0x170>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	79ba      	ldrb	r2, [r7, #6]
 800034a:	0052      	lsls	r2, r2, #1
 800034c:	2103      	movs	r1, #3
 800034e:	fa01 f202 	lsl.w	r2, r1, r2
 8000352:	43d2      	mvns	r2, r2
 8000354:	4611      	mov	r1, r2
 8000356:	4a25      	ldr	r2, [pc, #148]	; (80003ec <MGPIO_vSetPinType+0x170>)
 8000358:	400b      	ands	r3, r1
 800035a:	6013      	str	r3, [r2, #0]
		GPIOD->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 800035c:	4b23      	ldr	r3, [pc, #140]	; (80003ec <MGPIO_vSetPinType+0x170>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	7979      	ldrb	r1, [r7, #5]
 8000362:	79ba      	ldrb	r2, [r7, #6]
 8000364:	0052      	lsls	r2, r2, #1
 8000366:	fa01 f202 	lsl.w	r2, r1, r2
 800036a:	4611      	mov	r1, r2
 800036c:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <MGPIO_vSetPinType+0x170>)
 800036e:	430b      	orrs	r3, r1
 8000370:	6013      	str	r3, [r2, #0]
		break;
 8000372:	e02f      	b.n	80003d4 <MGPIO_vSetPinType+0x158>
	case PORTE:
		GPIOE->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 8000374:	4b1e      	ldr	r3, [pc, #120]	; (80003f0 <MGPIO_vSetPinType+0x174>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	79ba      	ldrb	r2, [r7, #6]
 800037a:	0052      	lsls	r2, r2, #1
 800037c:	2103      	movs	r1, #3
 800037e:	fa01 f202 	lsl.w	r2, r1, r2
 8000382:	43d2      	mvns	r2, r2
 8000384:	4611      	mov	r1, r2
 8000386:	4a1a      	ldr	r2, [pc, #104]	; (80003f0 <MGPIO_vSetPinType+0x174>)
 8000388:	400b      	ands	r3, r1
 800038a:	6013      	str	r3, [r2, #0]
		GPIOE->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 800038c:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <MGPIO_vSetPinType+0x174>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	7979      	ldrb	r1, [r7, #5]
 8000392:	79ba      	ldrb	r2, [r7, #6]
 8000394:	0052      	lsls	r2, r2, #1
 8000396:	fa01 f202 	lsl.w	r2, r1, r2
 800039a:	4611      	mov	r1, r2
 800039c:	4a14      	ldr	r2, [pc, #80]	; (80003f0 <MGPIO_vSetPinType+0x174>)
 800039e:	430b      	orrs	r3, r1
 80003a0:	6013      	str	r3, [r2, #0]
		break;
 80003a2:	e017      	b.n	80003d4 <MGPIO_vSetPinType+0x158>
	case PORTH:
		GPIOH->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 80003a4:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <MGPIO_vSetPinType+0x178>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	79ba      	ldrb	r2, [r7, #6]
 80003aa:	0052      	lsls	r2, r2, #1
 80003ac:	2103      	movs	r1, #3
 80003ae:	fa01 f202 	lsl.w	r2, r1, r2
 80003b2:	43d2      	mvns	r2, r2
 80003b4:	4611      	mov	r1, r2
 80003b6:	4a0f      	ldr	r2, [pc, #60]	; (80003f4 <MGPIO_vSetPinType+0x178>)
 80003b8:	400b      	ands	r3, r1
 80003ba:	6013      	str	r3, [r2, #0]
		GPIOH->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 80003bc:	4b0d      	ldr	r3, [pc, #52]	; (80003f4 <MGPIO_vSetPinType+0x178>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	7979      	ldrb	r1, [r7, #5]
 80003c2:	79ba      	ldrb	r2, [r7, #6]
 80003c4:	0052      	lsls	r2, r2, #1
 80003c6:	fa01 f202 	lsl.w	r2, r1, r2
 80003ca:	4611      	mov	r1, r2
 80003cc:	4a09      	ldr	r2, [pc, #36]	; (80003f4 <MGPIO_vSetPinType+0x178>)
 80003ce:	430b      	orrs	r3, r1
 80003d0:	6013      	str	r3, [r2, #0]
		break;
 80003d2:	bf00      	nop
	}
}
 80003d4:	bf00      	nop
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	40020000 	.word	0x40020000
 80003e4:	40020400 	.word	0x40020400
 80003e8:	40020800 	.word	0x40020800
 80003ec:	40020c00 	.word	0x40020c00
 80003f0:	40021000 	.word	0x40021000
 80003f4:	40021c00 	.word	0x40021c00

080003f8 <MGPIO_vSetOutputPinValueBSR>:
		break;
	}

}
void MGPIO_vSetOutputPinValueBSR(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_BS_t copy_GPIO_BS)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	71fb      	strb	r3, [r7, #7]
 8000402:	460b      	mov	r3, r1
 8000404:	71bb      	strb	r3, [r7, #6]
 8000406:	4613      	mov	r3, r2
 8000408:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	2b05      	cmp	r3, #5
 800040e:	f200 80ca 	bhi.w	80005a6 <MGPIO_vSetOutputPinValueBSR+0x1ae>
 8000412:	a201      	add	r2, pc, #4	; (adr r2, 8000418 <MGPIO_vSetOutputPinValueBSR+0x20>)
 8000414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000418:	08000431 	.word	0x08000431
 800041c:	0800046d 	.word	0x0800046d
 8000420:	080004a9 	.word	0x080004a9
 8000424:	080004e3 	.word	0x080004e3
 8000428:	0800051d 	.word	0x0800051d
 800042c:	08000557 	.word	0x08000557
	{
	case PORTA:
		if (copy_GPIO_BS == SET)
 8000430:	797b      	ldrb	r3, [r7, #5]
 8000432:	2b01      	cmp	r3, #1
 8000434:	d10a      	bne.n	800044c <MGPIO_vSetOutputPinValueBSR+0x54>
		{
			GPIOA->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8000436:	4b5f      	ldr	r3, [pc, #380]	; (80005b4 <MGPIO_vSetOutputPinValueBSR+0x1bc>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	79ba      	ldrb	r2, [r7, #6]
 800043c:	2101      	movs	r1, #1
 800043e:	fa01 f202 	lsl.w	r2, r1, r2
 8000442:	4611      	mov	r1, r2
 8000444:	4a5b      	ldr	r2, [pc, #364]	; (80005b4 <MGPIO_vSetOutputPinValueBSR+0x1bc>)
 8000446:	430b      	orrs	r3, r1
 8000448:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOA->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}
		break;
 800044a:	e0a1      	b.n	8000590 <MGPIO_vSetOutputPinValueBSR+0x198>
		else if(copy_GPIO_BS == RESET)
 800044c:	797b      	ldrb	r3, [r7, #5]
 800044e:	2b00      	cmp	r3, #0
 8000450:	f040 809e 	bne.w	8000590 <MGPIO_vSetOutputPinValueBSR+0x198>
			GPIOA->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000454:	4b57      	ldr	r3, [pc, #348]	; (80005b4 <MGPIO_vSetOutputPinValueBSR+0x1bc>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	79ba      	ldrb	r2, [r7, #6]
 800045a:	3210      	adds	r2, #16
 800045c:	2101      	movs	r1, #1
 800045e:	fa01 f202 	lsl.w	r2, r1, r2
 8000462:	4611      	mov	r1, r2
 8000464:	4a53      	ldr	r2, [pc, #332]	; (80005b4 <MGPIO_vSetOutputPinValueBSR+0x1bc>)
 8000466:	430b      	orrs	r3, r1
 8000468:	6193      	str	r3, [r2, #24]
		break;
 800046a:	e091      	b.n	8000590 <MGPIO_vSetOutputPinValueBSR+0x198>
	case PORTB:
		if (copy_GPIO_BS == SET)
 800046c:	797b      	ldrb	r3, [r7, #5]
 800046e:	2b01      	cmp	r3, #1
 8000470:	d10a      	bne.n	8000488 <MGPIO_vSetOutputPinValueBSR+0x90>
		{
			GPIOB->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8000472:	4b51      	ldr	r3, [pc, #324]	; (80005b8 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	79ba      	ldrb	r2, [r7, #6]
 8000478:	2101      	movs	r1, #1
 800047a:	fa01 f202 	lsl.w	r2, r1, r2
 800047e:	4611      	mov	r1, r2
 8000480:	4a4d      	ldr	r2, [pc, #308]	; (80005b8 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000482:	430b      	orrs	r3, r1
 8000484:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOB->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 8000486:	e085      	b.n	8000594 <MGPIO_vSetOutputPinValueBSR+0x19c>
		else if(copy_GPIO_BS == RESET)
 8000488:	797b      	ldrb	r3, [r7, #5]
 800048a:	2b00      	cmp	r3, #0
 800048c:	f040 8082 	bne.w	8000594 <MGPIO_vSetOutputPinValueBSR+0x19c>
			GPIOB->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000490:	4b49      	ldr	r3, [pc, #292]	; (80005b8 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	79ba      	ldrb	r2, [r7, #6]
 8000496:	3210      	adds	r2, #16
 8000498:	2101      	movs	r1, #1
 800049a:	fa01 f202 	lsl.w	r2, r1, r2
 800049e:	4611      	mov	r1, r2
 80004a0:	4a45      	ldr	r2, [pc, #276]	; (80005b8 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 80004a2:	430b      	orrs	r3, r1
 80004a4:	6193      	str	r3, [r2, #24]
		}		break;
 80004a6:	e075      	b.n	8000594 <MGPIO_vSetOutputPinValueBSR+0x19c>
	case PORTC:
		if (copy_GPIO_BS == SET)
 80004a8:	797b      	ldrb	r3, [r7, #5]
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d10a      	bne.n	80004c4 <MGPIO_vSetOutputPinValueBSR+0xcc>
		{
			GPIOB->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 80004ae:	4b42      	ldr	r3, [pc, #264]	; (80005b8 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 80004b0:	699b      	ldr	r3, [r3, #24]
 80004b2:	79ba      	ldrb	r2, [r7, #6]
 80004b4:	2101      	movs	r1, #1
 80004b6:	fa01 f202 	lsl.w	r2, r1, r2
 80004ba:	4611      	mov	r1, r2
 80004bc:	4a3e      	ldr	r2, [pc, #248]	; (80005b8 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 80004be:	430b      	orrs	r3, r1
 80004c0:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOB->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 80004c2:	e069      	b.n	8000598 <MGPIO_vSetOutputPinValueBSR+0x1a0>
		else if(copy_GPIO_BS == RESET)
 80004c4:	797b      	ldrb	r3, [r7, #5]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d166      	bne.n	8000598 <MGPIO_vSetOutputPinValueBSR+0x1a0>
			GPIOB->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 80004ca:	4b3b      	ldr	r3, [pc, #236]	; (80005b8 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	79ba      	ldrb	r2, [r7, #6]
 80004d0:	3210      	adds	r2, #16
 80004d2:	2101      	movs	r1, #1
 80004d4:	fa01 f202 	lsl.w	r2, r1, r2
 80004d8:	4611      	mov	r1, r2
 80004da:	4a37      	ldr	r2, [pc, #220]	; (80005b8 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 80004dc:	430b      	orrs	r3, r1
 80004de:	6193      	str	r3, [r2, #24]
		}		break;
 80004e0:	e05a      	b.n	8000598 <MGPIO_vSetOutputPinValueBSR+0x1a0>
	case PORTD:
		if (copy_GPIO_BS == SET)
 80004e2:	797b      	ldrb	r3, [r7, #5]
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d10a      	bne.n	80004fe <MGPIO_vSetOutputPinValueBSR+0x106>
		{
			GPIOD->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 80004e8:	4b34      	ldr	r3, [pc, #208]	; (80005bc <MGPIO_vSetOutputPinValueBSR+0x1c4>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	79ba      	ldrb	r2, [r7, #6]
 80004ee:	2101      	movs	r1, #1
 80004f0:	fa01 f202 	lsl.w	r2, r1, r2
 80004f4:	4611      	mov	r1, r2
 80004f6:	4a31      	ldr	r2, [pc, #196]	; (80005bc <MGPIO_vSetOutputPinValueBSR+0x1c4>)
 80004f8:	430b      	orrs	r3, r1
 80004fa:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOD->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 80004fc:	e04e      	b.n	800059c <MGPIO_vSetOutputPinValueBSR+0x1a4>
		else if(copy_GPIO_BS == RESET)
 80004fe:	797b      	ldrb	r3, [r7, #5]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d14b      	bne.n	800059c <MGPIO_vSetOutputPinValueBSR+0x1a4>
			GPIOD->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000504:	4b2d      	ldr	r3, [pc, #180]	; (80005bc <MGPIO_vSetOutputPinValueBSR+0x1c4>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	79ba      	ldrb	r2, [r7, #6]
 800050a:	3210      	adds	r2, #16
 800050c:	2101      	movs	r1, #1
 800050e:	fa01 f202 	lsl.w	r2, r1, r2
 8000512:	4611      	mov	r1, r2
 8000514:	4a29      	ldr	r2, [pc, #164]	; (80005bc <MGPIO_vSetOutputPinValueBSR+0x1c4>)
 8000516:	430b      	orrs	r3, r1
 8000518:	6193      	str	r3, [r2, #24]
		}		break;
 800051a:	e03f      	b.n	800059c <MGPIO_vSetOutputPinValueBSR+0x1a4>
	case PORTE:
		if (copy_GPIO_BS == SET)
 800051c:	797b      	ldrb	r3, [r7, #5]
 800051e:	2b01      	cmp	r3, #1
 8000520:	d10a      	bne.n	8000538 <MGPIO_vSetOutputPinValueBSR+0x140>
		{
			GPIOE->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8000522:	4b27      	ldr	r3, [pc, #156]	; (80005c0 <MGPIO_vSetOutputPinValueBSR+0x1c8>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	79ba      	ldrb	r2, [r7, #6]
 8000528:	2101      	movs	r1, #1
 800052a:	fa01 f202 	lsl.w	r2, r1, r2
 800052e:	4611      	mov	r1, r2
 8000530:	4a23      	ldr	r2, [pc, #140]	; (80005c0 <MGPIO_vSetOutputPinValueBSR+0x1c8>)
 8000532:	430b      	orrs	r3, r1
 8000534:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOE->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 8000536:	e033      	b.n	80005a0 <MGPIO_vSetOutputPinValueBSR+0x1a8>
		else if(copy_GPIO_BS == RESET)
 8000538:	797b      	ldrb	r3, [r7, #5]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d130      	bne.n	80005a0 <MGPIO_vSetOutputPinValueBSR+0x1a8>
			GPIOE->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 800053e:	4b20      	ldr	r3, [pc, #128]	; (80005c0 <MGPIO_vSetOutputPinValueBSR+0x1c8>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	79ba      	ldrb	r2, [r7, #6]
 8000544:	3210      	adds	r2, #16
 8000546:	2101      	movs	r1, #1
 8000548:	fa01 f202 	lsl.w	r2, r1, r2
 800054c:	4611      	mov	r1, r2
 800054e:	4a1c      	ldr	r2, [pc, #112]	; (80005c0 <MGPIO_vSetOutputPinValueBSR+0x1c8>)
 8000550:	430b      	orrs	r3, r1
 8000552:	6193      	str	r3, [r2, #24]
		}		break;
 8000554:	e024      	b.n	80005a0 <MGPIO_vSetOutputPinValueBSR+0x1a8>
	case PORTH:
		if (copy_GPIO_BS == SET)
 8000556:	797b      	ldrb	r3, [r7, #5]
 8000558:	2b01      	cmp	r3, #1
 800055a:	d10a      	bne.n	8000572 <MGPIO_vSetOutputPinValueBSR+0x17a>
		{
			GPIOH->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 800055c:	4b19      	ldr	r3, [pc, #100]	; (80005c4 <MGPIO_vSetOutputPinValueBSR+0x1cc>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	79ba      	ldrb	r2, [r7, #6]
 8000562:	2101      	movs	r1, #1
 8000564:	fa01 f202 	lsl.w	r2, r1, r2
 8000568:	4611      	mov	r1, r2
 800056a:	4a16      	ldr	r2, [pc, #88]	; (80005c4 <MGPIO_vSetOutputPinValueBSR+0x1cc>)
 800056c:	430b      	orrs	r3, r1
 800056e:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOH->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 8000570:	e018      	b.n	80005a4 <MGPIO_vSetOutputPinValueBSR+0x1ac>
		else if(copy_GPIO_BS == RESET)
 8000572:	797b      	ldrb	r3, [r7, #5]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d115      	bne.n	80005a4 <MGPIO_vSetOutputPinValueBSR+0x1ac>
			GPIOH->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000578:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <MGPIO_vSetOutputPinValueBSR+0x1cc>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	79ba      	ldrb	r2, [r7, #6]
 800057e:	3210      	adds	r2, #16
 8000580:	2101      	movs	r1, #1
 8000582:	fa01 f202 	lsl.w	r2, r1, r2
 8000586:	4611      	mov	r1, r2
 8000588:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <MGPIO_vSetOutputPinValueBSR+0x1cc>)
 800058a:	430b      	orrs	r3, r1
 800058c:	6193      	str	r3, [r2, #24]
		}		break;
 800058e:	e009      	b.n	80005a4 <MGPIO_vSetOutputPinValueBSR+0x1ac>
		break;
 8000590:	bf00      	nop
 8000592:	e008      	b.n	80005a6 <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 8000594:	bf00      	nop
 8000596:	e006      	b.n	80005a6 <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 8000598:	bf00      	nop
 800059a:	e004      	b.n	80005a6 <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 800059c:	bf00      	nop
 800059e:	e002      	b.n	80005a6 <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 80005a0:	bf00      	nop
 80005a2:	e000      	b.n	80005a6 <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 80005a4:	bf00      	nop
	}

}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	40020000 	.word	0x40020000
 80005b8:	40020400 	.word	0x40020400
 80005bc:	40020c00 	.word	0x40020c00
 80005c0:	40021000 	.word	0x40021000
 80005c4:	40021c00 	.word	0x40021c00

080005c8 <RCC_AHB1EnableCLK>:
	RCC->RCC_CR&= ~(1<<CSSON);
	RCC->RCC_CR|=(copy_eClock_detector<<CSSON);
}

void RCC_AHB1EnableCLK(PeripheralAHB1_t peripheral)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
	SET_BIT(RCC->RCC_AHB1ENR,peripheral);
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <RCC_AHB1EnableCLK+0x2c>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	79fa      	ldrb	r2, [r7, #7]
 80005d8:	2101      	movs	r1, #1
 80005da:	fa01 f202 	lsl.w	r2, r1, r2
 80005de:	4611      	mov	r1, r2
 80005e0:	4a04      	ldr	r2, [pc, #16]	; (80005f4 <RCC_AHB1EnableCLK+0x2c>)
 80005e2:	430b      	orrs	r3, r1
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800

080005f8 <main>:
#include <stdint.h>
#include "RCC_Interface.h"
#include "GPIO_Interface.h"

int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
	/* Loop forever */

while (1)
{
	RCC_AHB1EnableCLK(GPIOAEN);
 80005fe:	2000      	movs	r0, #0
 8000600:	f7ff ffe2 	bl	80005c8 <RCC_AHB1EnableCLK>
	RCC_AHB1EnableCLK(GPIOBEN);
 8000604:	2001      	movs	r0, #1
 8000606:	f7ff ffdf 	bl	80005c8 <RCC_AHB1EnableCLK>

//	// PORTA Initialization
	MGPIO_vSetPinType(PORTA,PIN0,OUTPUT);
 800060a:	2201      	movs	r2, #1
 800060c:	2100      	movs	r1, #0
 800060e:	2000      	movs	r0, #0
 8000610:	f7ff fe34 	bl	800027c <MGPIO_vSetPinType>
	MGPIO_vSetPinType(PORTA,PIN1,OUTPUT);
 8000614:	2201      	movs	r2, #1
 8000616:	2101      	movs	r1, #1
 8000618:	2000      	movs	r0, #0
 800061a:	f7ff fe2f 	bl	800027c <MGPIO_vSetPinType>
	MGPIO_vSetPinType(PORTA,PIN2,OUTPUT);
 800061e:	2201      	movs	r2, #1
 8000620:	2102      	movs	r1, #2
 8000622:	2000      	movs	r0, #0
 8000624:	f7ff fe2a 	bl	800027c <MGPIO_vSetPinType>
	MGPIO_vSetPinType(PORTA,PIN3,OUTPUT);
 8000628:	2201      	movs	r2, #1
 800062a:	2103      	movs	r1, #3
 800062c:	2000      	movs	r0, #0
 800062e:	f7ff fe25 	bl	800027c <MGPIO_vSetPinType>
	MGPIO_vSetPinType(PORTA,PIN4,OUTPUT);
 8000632:	2201      	movs	r2, #1
 8000634:	2104      	movs	r1, #4
 8000636:	2000      	movs	r0, #0
 8000638:	f7ff fe20 	bl	800027c <MGPIO_vSetPinType>
	MGPIO_vSetPinType(PORTA,PIN5,OUTPUT);
 800063c:	2201      	movs	r2, #1
 800063e:	2105      	movs	r1, #5
 8000640:	2000      	movs	r0, #0
 8000642:	f7ff fe1b 	bl	800027c <MGPIO_vSetPinType>
	MGPIO_vSetPinType(PORTA,PIN6,OUTPUT);
 8000646:	2201      	movs	r2, #1
 8000648:	2106      	movs	r1, #6
 800064a:	2000      	movs	r0, #0
 800064c:	f7ff fe16 	bl	800027c <MGPIO_vSetPinType>
	MGPIO_vSetPinType(PORTA,PIN7,OUTPUT);
 8000650:	2201      	movs	r2, #1
 8000652:	2107      	movs	r1, #7
 8000654:	2000      	movs	r0, #0
 8000656:	f7ff fe11 	bl	800027c <MGPIO_vSetPinType>

	MGPIO_vSetPinType(PORTB,PIN0,OUTPUT);
 800065a:	2201      	movs	r2, #1
 800065c:	2100      	movs	r1, #0
 800065e:	2001      	movs	r0, #1
 8000660:	f7ff fe0c 	bl	800027c <MGPIO_vSetPinType>
	MGPIO_vSetPinType(PORTB,PIN1,OUTPUT);
 8000664:	2201      	movs	r2, #1
 8000666:	2101      	movs	r1, #1
 8000668:	2001      	movs	r0, #1
 800066a:	f7ff fe07 	bl	800027c <MGPIO_vSetPinType>
	MGPIO_vSetPinType(PORTB,PIN2,OUTPUT);
 800066e:	2201      	movs	r2, #1
 8000670:	2102      	movs	r1, #2
 8000672:	2001      	movs	r0, #1
 8000674:	f7ff fe02 	bl	800027c <MGPIO_vSetPinType>
	MGPIO_vSetPinType(PORTB,PIN3,OUTPUT);
 8000678:	2201      	movs	r2, #1
 800067a:	2103      	movs	r1, #3
 800067c:	2001      	movs	r0, #1
 800067e:	f7ff fdfd 	bl	800027c <MGPIO_vSetPinType>
	MGPIO_vSetPinType(PORTB,PIN4,OUTPUT);
 8000682:	2201      	movs	r2, #1
 8000684:	2104      	movs	r1, #4
 8000686:	2001      	movs	r0, #1
 8000688:	f7ff fdf8 	bl	800027c <MGPIO_vSetPinType>
	MGPIO_vSetPinType(PORTB,PIN5,OUTPUT);
 800068c:	2201      	movs	r2, #1
 800068e:	2105      	movs	r1, #5
 8000690:	2001      	movs	r0, #1
 8000692:	f7ff fdf3 	bl	800027c <MGPIO_vSetPinType>
	MGPIO_vSetPinType(PORTB,PIN6,OUTPUT);
 8000696:	2201      	movs	r2, #1
 8000698:	2106      	movs	r1, #6
 800069a:	2001      	movs	r0, #1
 800069c:	f7ff fdee 	bl	800027c <MGPIO_vSetPinType>
	MGPIO_vSetPinType(PORTB,PIN7,OUTPUT);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2107      	movs	r1, #7
 80006a4:	2001      	movs	r0, #1
 80006a6:	f7ff fde9 	bl	800027c <MGPIO_vSetPinType>

//	MGPIO_vSetOutputPinType(PORTA,PIN0,PUSH_PULL);
//	MGPIO_vSetOutputPinSpeed(PORTA,PIN0,LOW_SPEED);

for (int x=0 ;x<=99;x++)
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	e014      	b.n	80006da <main+0xe2>
{

	if(x==100)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2b64      	cmp	r3, #100	; 0x64
 80006b4:	d101      	bne.n	80006ba <main+0xc2>
	{
		x=0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
	}
	Print_MLX(x);
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f7ff fd8a 	bl	80001d4 <Print_MLX>
    for(int i = 0; i < 1000000; i++); // Delay
 80006c0:	2300      	movs	r3, #0
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	e002      	b.n	80006cc <main+0xd4>
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	3301      	adds	r3, #1
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	4a05      	ldr	r2, [pc, #20]	; (80006e4 <main+0xec>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	ddf8      	ble.n	80006c6 <main+0xce>
for (int x=0 ;x<=99;x++)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3301      	adds	r3, #1
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2b63      	cmp	r3, #99	; 0x63
 80006de:	dde7      	ble.n	80006b0 <main+0xb8>
	RCC_AHB1EnableCLK(GPIOAEN);
 80006e0:	e78d      	b.n	80005fe <main+0x6>
 80006e2:	bf00      	nop
 80006e4:	000f423f 	.word	0x000f423f

080006e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006e8:	480d      	ldr	r0, [pc, #52]	; (8000720 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f0:	480c      	ldr	r0, [pc, #48]	; (8000724 <LoopForever+0x6>)
  ldr r1, =_edata
 80006f2:	490d      	ldr	r1, [pc, #52]	; (8000728 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006f4:	4a0d      	ldr	r2, [pc, #52]	; (800072c <LoopForever+0xe>)
  movs r3, #0
 80006f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f8:	e002      	b.n	8000700 <LoopCopyDataInit>

080006fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fe:	3304      	adds	r3, #4

08000700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000704:	d3f9      	bcc.n	80006fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000706:	4a0a      	ldr	r2, [pc, #40]	; (8000730 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000708:	4c0a      	ldr	r4, [pc, #40]	; (8000734 <LoopForever+0x16>)
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800070c:	e001      	b.n	8000712 <LoopFillZerobss>

0800070e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000710:	3204      	adds	r2, #4

08000712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000714:	d3fb      	bcc.n	800070e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000716:	f000 f811 	bl	800073c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800071a:	f7ff ff6d 	bl	80005f8 <main>

0800071e <LoopForever>:

LoopForever:
  b LoopForever
 800071e:	e7fe      	b.n	800071e <LoopForever>
  ldr   r0, =_estack
 8000720:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000728:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800072c:	080007b0 	.word	0x080007b0
  ldr r2, =_sbss
 8000730:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000734:	2000001c 	.word	0x2000001c

08000738 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000738:	e7fe      	b.n	8000738 <ADC_IRQHandler>
	...

0800073c <__libc_init_array>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	4d0d      	ldr	r5, [pc, #52]	; (8000774 <__libc_init_array+0x38>)
 8000740:	4c0d      	ldr	r4, [pc, #52]	; (8000778 <__libc_init_array+0x3c>)
 8000742:	1b64      	subs	r4, r4, r5
 8000744:	10a4      	asrs	r4, r4, #2
 8000746:	2600      	movs	r6, #0
 8000748:	42a6      	cmp	r6, r4
 800074a:	d109      	bne.n	8000760 <__libc_init_array+0x24>
 800074c:	4d0b      	ldr	r5, [pc, #44]	; (800077c <__libc_init_array+0x40>)
 800074e:	4c0c      	ldr	r4, [pc, #48]	; (8000780 <__libc_init_array+0x44>)
 8000750:	f000 f818 	bl	8000784 <_init>
 8000754:	1b64      	subs	r4, r4, r5
 8000756:	10a4      	asrs	r4, r4, #2
 8000758:	2600      	movs	r6, #0
 800075a:	42a6      	cmp	r6, r4
 800075c:	d105      	bne.n	800076a <__libc_init_array+0x2e>
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f855 3b04 	ldr.w	r3, [r5], #4
 8000764:	4798      	blx	r3
 8000766:	3601      	adds	r6, #1
 8000768:	e7ee      	b.n	8000748 <__libc_init_array+0xc>
 800076a:	f855 3b04 	ldr.w	r3, [r5], #4
 800076e:	4798      	blx	r3
 8000770:	3601      	adds	r6, #1
 8000772:	e7f2      	b.n	800075a <__libc_init_array+0x1e>
 8000774:	080007a8 	.word	0x080007a8
 8000778:	080007a8 	.word	0x080007a8
 800077c:	080007a8 	.word	0x080007a8
 8000780:	080007ac 	.word	0x080007ac

08000784 <_init>:
 8000784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000786:	bf00      	nop
 8000788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800078a:	bc08      	pop	{r3}
 800078c:	469e      	mov	lr, r3
 800078e:	4770      	bx	lr

08000790 <_fini>:
 8000790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000792:	bf00      	nop
 8000794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000796:	bc08      	pop	{r3}
 8000798:	469e      	mov	lr, r3
 800079a:	4770      	bx	lr
