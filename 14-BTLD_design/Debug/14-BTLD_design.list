
14-BTLD_design.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001440  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  080015d4  080015d4  000115d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015d8  080015d8  000115e0  2**0
                  CONTENTS
  4 .ARM          00000000  080015d8  080015d8  000115e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015d8  080015e0  000115e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015d8  080015d8  000115d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015dc  080015dc  000115dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000115e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000000  080015e0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  080015e0  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000115e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002423  00000000  00000000  00011610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009ee  00000000  00000000  00013a33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002c0  00000000  00000000  00014428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000238  00000000  00000000  000146e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002ba0  00000000  00000000  00014920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000042f9  00000000  00000000  000174c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009690  00000000  00000000  0001b7b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00024e49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000950  00000000  00000000  00024e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080015bc 	.word	0x080015bc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080015bc 	.word	0x080015bc

080001d4 <HexParser_vEraseAppArea>:

uint16_t DataBuffer[100] ;
#define FLASH_BASE_ADDR 0x08000000

void HexParser_vEraseAppArea()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	FMI_vEraseAppArea();
 80001d8:	f000 f94a 	bl	8000470 <FMI_vEraseAppArea>
}
 80001dc:	bf00      	nop
 80001de:	bd80      	pop	{r7, pc}

080001e0 <HexParser_u8ASCII2HEX>:

uint8_t HexParser_u8ASCII2HEX(uint8_t copy_u8ASCII)
{
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	4603      	mov	r3, r0
 80001e8:	71fb      	strb	r3, [r7, #7]
	uint8_t copy_u8HexValue = 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	73fb      	strb	r3, [r7, #15]
	if (copy_u8ASCII >='0' && copy_u8ASCII<= '9')
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	2b2f      	cmp	r3, #47	; 0x2f
 80001f2:	d906      	bls.n	8000202 <HexParser_u8ASCII2HEX+0x22>
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	2b39      	cmp	r3, #57	; 0x39
 80001f8:	d803      	bhi.n	8000202 <HexParser_u8ASCII2HEX+0x22>
	{
		copy_u8HexValue = copy_u8ASCII - '0';
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	3b30      	subs	r3, #48	; 0x30
 80001fe:	73fb      	strb	r3, [r7, #15]
 8000200:	e008      	b.n	8000214 <HexParser_u8ASCII2HEX+0x34>
	}
	else if (copy_u8ASCII >='A' && copy_u8ASCII<= 'F')
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	2b40      	cmp	r3, #64	; 0x40
 8000206:	d905      	bls.n	8000214 <HexParser_u8ASCII2HEX+0x34>
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	2b46      	cmp	r3, #70	; 0x46
 800020c:	d802      	bhi.n	8000214 <HexParser_u8ASCII2HEX+0x34>
	{
		copy_u8HexValue = copy_u8ASCII - 'A'+10;
 800020e:	79fb      	ldrb	r3, [r7, #7]
 8000210:	3b37      	subs	r3, #55	; 0x37
 8000212:	73fb      	strb	r3, [r7, #15]
	}
	return copy_u8HexValue;
 8000214:	7bfb      	ldrb	r3, [r7, #15]
}
 8000216:	4618      	mov	r0, r3
 8000218:	3714      	adds	r7, #20
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
	...

08000224 <HexParser_vParseData>:

void HexParser_vParseData(char *  copy_u8Data)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b086      	sub	sp, #24
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	uint8_t digit0, digit1, digit2, digit3;
	/* Address variable */
	uint32_t address;

	/* 1- convert charachter count */
	CC_High  = HexParser_u8ASCII2HEX(copy_u8Data[1]);
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	3301      	adds	r3, #1
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	4618      	mov	r0, r3
 8000234:	f7ff ffd4 	bl	80001e0 <HexParser_u8ASCII2HEX>
 8000238:	4603      	mov	r3, r0
 800023a:	75bb      	strb	r3, [r7, #22]
	CC_Low = HexParser_u8ASCII2HEX(copy_u8Data[2]);
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	3302      	adds	r3, #2
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	4618      	mov	r0, r3
 8000244:	f7ff ffcc 	bl	80001e0 <HexParser_u8ASCII2HEX>
 8000248:	4603      	mov	r3, r0
 800024a:	757b      	strb	r3, [r7, #21]
	CC = CC_High << 4 | CC_Low;
 800024c:	7dbb      	ldrb	r3, [r7, #22]
 800024e:	011b      	lsls	r3, r3, #4
 8000250:	b25a      	sxtb	r2, r3
 8000252:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000256:	4313      	orrs	r3, r2
 8000258:	b25b      	sxtb	r3, r3
 800025a:	753b      	strb	r3, [r7, #20]
	/* 2- convert Address */
	digit0 = HexParser_u8ASCII2HEX(copy_u8Data[3]);
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	3303      	adds	r3, #3
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	4618      	mov	r0, r3
 8000264:	f7ff ffbc 	bl	80001e0 <HexParser_u8ASCII2HEX>
 8000268:	4603      	mov	r3, r0
 800026a:	74fb      	strb	r3, [r7, #19]
	digit1 = HexParser_u8ASCII2HEX(copy_u8Data[4]);
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	3304      	adds	r3, #4
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	4618      	mov	r0, r3
 8000274:	f7ff ffb4 	bl	80001e0 <HexParser_u8ASCII2HEX>
 8000278:	4603      	mov	r3, r0
 800027a:	74bb      	strb	r3, [r7, #18]
	digit2 = HexParser_u8ASCII2HEX(copy_u8Data[5]);
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	3305      	adds	r3, #5
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	4618      	mov	r0, r3
 8000284:	f7ff ffac 	bl	80001e0 <HexParser_u8ASCII2HEX>
 8000288:	4603      	mov	r3, r0
 800028a:	747b      	strb	r3, [r7, #17]
	digit3 = HexParser_u8ASCII2HEX(copy_u8Data[6]);
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	3306      	adds	r3, #6
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	4618      	mov	r0, r3
 8000294:	f7ff ffa4 	bl	80001e0 <HexParser_u8ASCII2HEX>
 8000298:	4603      	mov	r3, r0
 800029a:	743b      	strb	r3, [r7, #16]
	address = (FLASH_BASE_ADDR) | digit0<<12 | digit1<<8 | digit2<<4 | digit3;
 800029c:	7cfb      	ldrb	r3, [r7, #19]
 800029e:	031b      	lsls	r3, r3, #12
 80002a0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80002a4:	7cbb      	ldrb	r3, [r7, #18]
 80002a6:	021b      	lsls	r3, r3, #8
 80002a8:	431a      	orrs	r2, r3
 80002aa:	7c7b      	ldrb	r3, [r7, #17]
 80002ac:	011b      	lsls	r3, r3, #4
 80002ae:	431a      	orrs	r2, r3
 80002b0:	7c3b      	ldrb	r3, [r7, #16]
 80002b2:	4313      	orrs	r3, r2
 80002b4:	60fb      	str	r3, [r7, #12]

	/* 3- convert Data */
	for(uint8_t i=0 ;i < CC/2 ; i++)
 80002b6:	2300      	movs	r3, #0
 80002b8:	75fb      	strb	r3, [r7, #23]
 80002ba:	e044      	b.n	8000346 <HexParser_vParseData+0x122>
	{
		digit0 = HexParser_u8ASCII2HEX(copy_u8Data[(4*i)+9]);
 80002bc:	7dfb      	ldrb	r3, [r7, #23]
 80002be:	009b      	lsls	r3, r3, #2
 80002c0:	3309      	adds	r3, #9
 80002c2:	687a      	ldr	r2, [r7, #4]
 80002c4:	4413      	add	r3, r2
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	4618      	mov	r0, r3
 80002ca:	f7ff ff89 	bl	80001e0 <HexParser_u8ASCII2HEX>
 80002ce:	4603      	mov	r3, r0
 80002d0:	74fb      	strb	r3, [r7, #19]
		digit1 = HexParser_u8ASCII2HEX(copy_u8Data[(4*i)+10]);
 80002d2:	7dfb      	ldrb	r3, [r7, #23]
 80002d4:	009b      	lsls	r3, r3, #2
 80002d6:	330a      	adds	r3, #10
 80002d8:	687a      	ldr	r2, [r7, #4]
 80002da:	4413      	add	r3, r2
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	4618      	mov	r0, r3
 80002e0:	f7ff ff7e 	bl	80001e0 <HexParser_u8ASCII2HEX>
 80002e4:	4603      	mov	r3, r0
 80002e6:	74bb      	strb	r3, [r7, #18]
		digit2 = HexParser_u8ASCII2HEX(copy_u8Data[(4*i)+11]);
 80002e8:	7dfb      	ldrb	r3, [r7, #23]
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	330b      	adds	r3, #11
 80002ee:	687a      	ldr	r2, [r7, #4]
 80002f0:	4413      	add	r3, r2
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	4618      	mov	r0, r3
 80002f6:	f7ff ff73 	bl	80001e0 <HexParser_u8ASCII2HEX>
 80002fa:	4603      	mov	r3, r0
 80002fc:	747b      	strb	r3, [r7, #17]
		digit3 = HexParser_u8ASCII2HEX(copy_u8Data[(4*i)+12]);
 80002fe:	7dfb      	ldrb	r3, [r7, #23]
 8000300:	009b      	lsls	r3, r3, #2
 8000302:	330c      	adds	r3, #12
 8000304:	687a      	ldr	r2, [r7, #4]
 8000306:	4413      	add	r3, r2
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	4618      	mov	r0, r3
 800030c:	f7ff ff68 	bl	80001e0 <HexParser_u8ASCII2HEX>
 8000310:	4603      	mov	r3, r0
 8000312:	743b      	strb	r3, [r7, #16]
		DataBuffer[i] = digit0<<12 | digit1<<8 | digit2<<4 | digit3;
 8000314:	7cfb      	ldrb	r3, [r7, #19]
 8000316:	031b      	lsls	r3, r3, #12
 8000318:	b21a      	sxth	r2, r3
 800031a:	7cbb      	ldrb	r3, [r7, #18]
 800031c:	021b      	lsls	r3, r3, #8
 800031e:	b21b      	sxth	r3, r3
 8000320:	4313      	orrs	r3, r2
 8000322:	b21a      	sxth	r2, r3
 8000324:	7c7b      	ldrb	r3, [r7, #17]
 8000326:	011b      	lsls	r3, r3, #4
 8000328:	b21b      	sxth	r3, r3
 800032a:	4313      	orrs	r3, r2
 800032c:	b21a      	sxth	r2, r3
 800032e:	7c3b      	ldrb	r3, [r7, #16]
 8000330:	b21b      	sxth	r3, r3
 8000332:	4313      	orrs	r3, r2
 8000334:	b21a      	sxth	r2, r3
 8000336:	7dfb      	ldrb	r3, [r7, #23]
 8000338:	b291      	uxth	r1, r2
 800033a:	4a0c      	ldr	r2, [pc, #48]	; (800036c <HexParser_vParseData+0x148>)
 800033c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0 ;i < CC/2 ; i++)
 8000340:	7dfb      	ldrb	r3, [r7, #23]
 8000342:	3301      	adds	r3, #1
 8000344:	75fb      	strb	r3, [r7, #23]
 8000346:	7d3b      	ldrb	r3, [r7, #20]
 8000348:	085b      	lsrs	r3, r3, #1
 800034a:	b2db      	uxtb	r3, r3
 800034c:	7dfa      	ldrb	r2, [r7, #23]
 800034e:	429a      	cmp	r2, r3
 8000350:	d3b4      	bcc.n	80002bc <HexParser_vParseData+0x98>
	}

	 FMI_vFlashWrite(address, DataBuffer,  CC/2);
 8000352:	7d3b      	ldrb	r3, [r7, #20]
 8000354:	085b      	lsrs	r3, r3, #1
 8000356:	b2db      	uxtb	r3, r3
 8000358:	461a      	mov	r2, r3
 800035a:	4904      	ldr	r1, [pc, #16]	; (800036c <HexParser_vParseData+0x148>)
 800035c:	68f8      	ldr	r0, [r7, #12]
 800035e:	f000 f89f 	bl	80004a0 <FMI_vFlashWrite>
}
 8000362:	bf00      	nop
 8000364:	3718      	adds	r7, #24
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	2000001c 	.word	0x2000001c

08000370 <EXTI0_IRQHandler>:
#include "RCC_Interface.h"

EXTI_Callback_t Global_EXTICallBack[16];

void EXTI0_IRQHandler(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	//if (Global_EXTICallBack[0] != NULL)
	Global_EXTICallBack[0]();
 8000374:	4b05      	ldr	r3, [pc, #20]	; (800038c <EXTI0_IRQHandler+0x1c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4798      	blx	r3
	SET_BIT(MEXTI->EXTI_PR,EXTI_LINE_0);
 800037a:	4b05      	ldr	r3, [pc, #20]	; (8000390 <EXTI0_IRQHandler+0x20>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	4a04      	ldr	r2, [pc, #16]	; (8000390 <EXTI0_IRQHandler+0x20>)
 8000380:	f043 0301 	orr.w	r3, r3, #1
 8000384:	6153      	str	r3, [r2, #20]
}
 8000386:	bf00      	nop
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	200000e4 	.word	0x200000e4
 8000390:	40013c00 	.word	0x40013c00

08000394 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
//	if (Global_EXTICallBack[1] != NULL)
	Global_EXTICallBack[1]();
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <EXTI1_IRQHandler+0x1c>)
 800039a:	685b      	ldr	r3, [r3, #4]
 800039c:	4798      	blx	r3
	SET_BIT(MEXTI->EXTI_PR,EXTI_LINE_1);
 800039e:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <EXTI1_IRQHandler+0x20>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	4a04      	ldr	r2, [pc, #16]	; (80003b4 <EXTI1_IRQHandler+0x20>)
 80003a4:	f043 0302 	orr.w	r3, r3, #2
 80003a8:	6153      	str	r3, [r2, #20]

}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	200000e4 	.word	0x200000e4
 80003b4:	40013c00 	.word	0x40013c00

080003b8 <FMI_vInit>:


#include "FMI_Interface.h"
#include "RCC_Interface.h"
void FMI_vInit()
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	RCC_AHB1LPEnableCLK(FLITFLPEN);
 80003bc:	200f      	movs	r0, #15
 80003be:	f000 ff0d 	bl	80011dc <RCC_AHB1LPEnableCLK>
}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
	...

080003c8 <FMI_vFlashEraseSector>:

void FMI_vFlashEraseSector(FMI_Sector_t copy_eFMI_Sector)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	71fb      	strb	r3, [r7, #7]
	/* 0. unlock control register in FLASH_KEYR */
	if(READ_BIT(FMI->FLASH_CR, CR_LOCK) )
 80003d2:	4b24      	ldr	r3, [pc, #144]	; (8000464 <FMI_vFlashEraseSector+0x9c>)
 80003d4:	691b      	ldr	r3, [r3, #16]
 80003d6:	0fdb      	lsrs	r3, r3, #31
 80003d8:	f003 0301 	and.w	r3, r3, #1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d005      	beq.n	80003ec <FMI_vFlashEraseSector+0x24>
	{
		FMI->FLASH_KEYR = FMI_KEY1;
 80003e0:	4b20      	ldr	r3, [pc, #128]	; (8000464 <FMI_vFlashEraseSector+0x9c>)
 80003e2:	4a21      	ldr	r2, [pc, #132]	; (8000468 <FMI_vFlashEraseSector+0xa0>)
 80003e4:	605a      	str	r2, [r3, #4]
		FMI->FLASH_KEYR = FMI_KEY2;
 80003e6:	4b1f      	ldr	r3, [pc, #124]	; (8000464 <FMI_vFlashEraseSector+0x9c>)
 80003e8:	4a20      	ldr	r2, [pc, #128]	; (800046c <FMI_vFlashEraseSector+0xa4>)
 80003ea:	605a      	str	r2, [r3, #4]
	}
	/* 1. check busy bit */
	while(READ_BIT(FMI->FLASH_SR,SR_BSY));
 80003ec:	bf00      	nop
 80003ee:	4b1d      	ldr	r3, [pc, #116]	; (8000464 <FMI_vFlashEraseSector+0x9c>)
 80003f0:	68db      	ldr	r3, [r3, #12]
 80003f2:	0c1b      	lsrs	r3, r3, #16
 80003f4:	f003 0301 	and.w	r3, r3, #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d1f8      	bne.n	80003ee <FMI_vFlashEraseSector+0x26>
	/* 2. Set the SER bit and select the sector out of the 5 sectors */
	SET_BIT(FMI->FLASH_CR,CR_SER);
 80003fc:	4b19      	ldr	r3, [pc, #100]	; (8000464 <FMI_vFlashEraseSector+0x9c>)
 80003fe:	691b      	ldr	r3, [r3, #16]
 8000400:	4a18      	ldr	r2, [pc, #96]	; (8000464 <FMI_vFlashEraseSector+0x9c>)
 8000402:	f043 0302 	orr.w	r3, r3, #2
 8000406:	6113      	str	r3, [r2, #16]

	FMI->FLASH_CR &= ~ (0b1111 << CR_SNB0);
 8000408:	4b16      	ldr	r3, [pc, #88]	; (8000464 <FMI_vFlashEraseSector+0x9c>)
 800040a:	691b      	ldr	r3, [r3, #16]
 800040c:	4a15      	ldr	r2, [pc, #84]	; (8000464 <FMI_vFlashEraseSector+0x9c>)
 800040e:	f023 0378 	bic.w	r3, r3, #120	; 0x78
 8000412:	6113      	str	r3, [r2, #16]
	FMI->FLASH_CR |= copy_eFMI_Sector << CR_SNB0;
 8000414:	4b13      	ldr	r3, [pc, #76]	; (8000464 <FMI_vFlashEraseSector+0x9c>)
 8000416:	691b      	ldr	r3, [r3, #16]
 8000418:	79fa      	ldrb	r2, [r7, #7]
 800041a:	00d2      	lsls	r2, r2, #3
 800041c:	4611      	mov	r1, r2
 800041e:	4a11      	ldr	r2, [pc, #68]	; (8000464 <FMI_vFlashEraseSector+0x9c>)
 8000420:	430b      	orrs	r3, r1
 8000422:	6113      	str	r3, [r2, #16]
	/* 3. Set the STRT bit in the FLASH_CR register*/
	SET_BIT(FMI->FLASH_CR,CR_STRT);
 8000424:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <FMI_vFlashEraseSector+0x9c>)
 8000426:	691b      	ldr	r3, [r3, #16]
 8000428:	4a0e      	ldr	r2, [pc, #56]	; (8000464 <FMI_vFlashEraseSector+0x9c>)
 800042a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800042e:	6113      	str	r3, [r2, #16]

	/* 4. Wait for the BSY bit to be cleared */
	while(READ_BIT(FMI->FLASH_SR,SR_BSY));
 8000430:	bf00      	nop
 8000432:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <FMI_vFlashEraseSector+0x9c>)
 8000434:	68db      	ldr	r3, [r3, #12]
 8000436:	0c1b      	lsrs	r3, r3, #16
 8000438:	f003 0301 	and.w	r3, r3, #1
 800043c:	2b00      	cmp	r3, #0
 800043e:	d1f8      	bne.n	8000432 <FMI_vFlashEraseSector+0x6a>
	/* 5- Clear EOP flag   */
	SET_BIT(FMI->FLASH_SR, SR_EOP);
 8000440:	4b08      	ldr	r3, [pc, #32]	; (8000464 <FMI_vFlashEraseSector+0x9c>)
 8000442:	68db      	ldr	r3, [r3, #12]
 8000444:	4a07      	ldr	r2, [pc, #28]	; (8000464 <FMI_vFlashEraseSector+0x9c>)
 8000446:	f043 0301 	orr.w	r3, r3, #1
 800044a:	60d3      	str	r3, [r2, #12]

	/* 6- DeSelect Erase Operation (reverse of step 2) */
	CLEAR_BIT(FMI->FLASH_CR, CR_SER);
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <FMI_vFlashEraseSector+0x9c>)
 800044e:	691b      	ldr	r3, [r3, #16]
 8000450:	4a04      	ldr	r2, [pc, #16]	; (8000464 <FMI_vFlashEraseSector+0x9c>)
 8000452:	f023 0302 	bic.w	r3, r3, #2
 8000456:	6113      	str	r3, [r2, #16]

}
 8000458:	bf00      	nop
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr
 8000464:	40023c00 	.word	0x40023c00
 8000468:	45670123 	.word	0x45670123
 800046c:	cdef89ab 	.word	0xcdef89ab

08000470 <FMI_vEraseAppArea>:
void FMI_vEraseAppArea()
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
	for(uint8_t Local_u8Counter = 1;Local_u8Counter<8; Local_u8Counter++)
 8000476:	2301      	movs	r3, #1
 8000478:	71fb      	strb	r3, [r7, #7]
 800047a:	e008      	b.n	800048e <FMI_vEraseAppArea+0x1e>
	{
		FMI_vFlashEraseSector(Local_u8Counter++);
 800047c:	79fb      	ldrb	r3, [r7, #7]
 800047e:	1c5a      	adds	r2, r3, #1
 8000480:	71fa      	strb	r2, [r7, #7]
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff ffa0 	bl	80003c8 <FMI_vFlashEraseSector>
	for(uint8_t Local_u8Counter = 1;Local_u8Counter<8; Local_u8Counter++)
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	3301      	adds	r3, #1
 800048c:	71fb      	strb	r3, [r7, #7]
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	2b07      	cmp	r3, #7
 8000492:	d9f3      	bls.n	800047c <FMI_vEraseAppArea+0xc>
	}
}
 8000494:	bf00      	nop
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
	...

080004a0 <FMI_vFlashWrite>:

	/* 6- DeSelect Erase Operation (reverse of step 2) */
	CLEAR_BIT(FMI->FLASH_CR, CR_SER);
}
void FMI_vFlashWrite(uint32_t copy_u32Address, uint16_t* copy_pu16Data, uint32_t copy_u32Size)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b087      	sub	sp, #28
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	60f8      	str	r0, [r7, #12]
 80004a8:	60b9      	str	r1, [r7, #8]
 80004aa:	607a      	str	r2, [r7, #4]
	//	FMI_vFlashEraseSector(Sector2);

	/* 0. unlock control register in FLASH_KEYR */
	if(READ_BIT(FMI->FLASH_CR, CR_LOCK) )
 80004ac:	4b2a      	ldr	r3, [pc, #168]	; (8000558 <FMI_vFlashWrite+0xb8>)
 80004ae:	691b      	ldr	r3, [r3, #16]
 80004b0:	0fdb      	lsrs	r3, r3, #31
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d005      	beq.n	80004c6 <FMI_vFlashWrite+0x26>
	{
		FMI->FLASH_KEYR = FMI_KEY1;
 80004ba:	4b27      	ldr	r3, [pc, #156]	; (8000558 <FMI_vFlashWrite+0xb8>)
 80004bc:	4a27      	ldr	r2, [pc, #156]	; (800055c <FMI_vFlashWrite+0xbc>)
 80004be:	605a      	str	r2, [r3, #4]
		FMI->FLASH_KEYR = FMI_KEY2;
 80004c0:	4b25      	ldr	r3, [pc, #148]	; (8000558 <FMI_vFlashWrite+0xb8>)
 80004c2:	4a27      	ldr	r2, [pc, #156]	; (8000560 <FMI_vFlashWrite+0xc0>)
 80004c4:	605a      	str	r2, [r3, #4]
	}
	/* 1. check busy bit */
	while(READ_BIT(FMI->FLASH_SR,SR_BSY));
 80004c6:	bf00      	nop
 80004c8:	4b23      	ldr	r3, [pc, #140]	; (8000558 <FMI_vFlashWrite+0xb8>)
 80004ca:	68db      	ldr	r3, [r3, #12]
 80004cc:	0c1b      	lsrs	r3, r3, #16
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d1f8      	bne.n	80004c8 <FMI_vFlashWrite+0x28>
	/* 2. Set the PG bit */
	SET_BIT(FMI->FLASH_CR,CR_PG);
 80004d6:	4b20      	ldr	r3, [pc, #128]	; (8000558 <FMI_vFlashWrite+0xb8>)
 80004d8:	691b      	ldr	r3, [r3, #16]
 80004da:	4a1f      	ldr	r2, [pc, #124]	; (8000558 <FMI_vFlashWrite+0xb8>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	6113      	str	r3, [r2, #16]
	/* 3. Select PSIZEt */
	FMI->FLASH_CR &= ~ (0b11 << CR_PSIZE0);
 80004e2:	4b1d      	ldr	r3, [pc, #116]	; (8000558 <FMI_vFlashWrite+0xb8>)
 80004e4:	691b      	ldr	r3, [r3, #16]
 80004e6:	4a1c      	ldr	r2, [pc, #112]	; (8000558 <FMI_vFlashWrite+0xb8>)
 80004e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80004ec:	6113      	str	r3, [r2, #16]
	FMI->FLASH_CR |= 0b01 << CR_PSIZE0;
 80004ee:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <FMI_vFlashWrite+0xb8>)
 80004f0:	691b      	ldr	r3, [r3, #16]
 80004f2:	4a19      	ldr	r2, [pc, #100]	; (8000558 <FMI_vFlashWrite+0xb8>)
 80004f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004f8:	6113      	str	r3, [r2, #16]

	/* 4. Assign data*/
	for(uint32_t Local_u32counter=0;Local_u32counter<copy_u32Size;Local_u32counter++)
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]
 80004fe:	e01a      	b.n	8000536 <FMI_vFlashWrite+0x96>
	{
		*((volatile uint16_t*)copy_u32Address) = copy_pu16Data[Local_u32counter];
 8000500:	697b      	ldr	r3, [r7, #20]
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	68ba      	ldr	r2, [r7, #8]
 8000506:	441a      	add	r2, r3
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	8812      	ldrh	r2, [r2, #0]
 800050c:	801a      	strh	r2, [r3, #0]
		/* 5. Wait for the BSY bit to be cleared */
		while(READ_BIT(FMI->FLASH_SR,SR_BSY));
 800050e:	bf00      	nop
 8000510:	4b11      	ldr	r3, [pc, #68]	; (8000558 <FMI_vFlashWrite+0xb8>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	0c1b      	lsrs	r3, r3, #16
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	2b00      	cmp	r3, #0
 800051c:	d1f8      	bne.n	8000510 <FMI_vFlashWrite+0x70>
		/* 6- Clear EOP flag   */
		SET_BIT(FMI->FLASH_SR, SR_EOP);
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <FMI_vFlashWrite+0xb8>)
 8000520:	68db      	ldr	r3, [r3, #12]
 8000522:	4a0d      	ldr	r2, [pc, #52]	; (8000558 <FMI_vFlashWrite+0xb8>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	60d3      	str	r3, [r2, #12]
		copy_u32Address += 2;
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	3302      	adds	r3, #2
 800052e:	60fb      	str	r3, [r7, #12]
	for(uint32_t Local_u32counter=0;Local_u32counter<copy_u32Size;Local_u32counter++)
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	3301      	adds	r3, #1
 8000534:	617b      	str	r3, [r7, #20]
 8000536:	697a      	ldr	r2, [r7, #20]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	429a      	cmp	r2, r3
 800053c:	d3e0      	bcc.n	8000500 <FMI_vFlashWrite+0x60>
	}
	/* 7 - deactivate programming mode */
	CLEAR_BIT(FMI->FLASH_CR,CR_PG);
 800053e:	4b06      	ldr	r3, [pc, #24]	; (8000558 <FMI_vFlashWrite+0xb8>)
 8000540:	691b      	ldr	r3, [r3, #16]
 8000542:	4a05      	ldr	r2, [pc, #20]	; (8000558 <FMI_vFlashWrite+0xb8>)
 8000544:	f023 0301 	bic.w	r3, r3, #1
 8000548:	6113      	str	r3, [r2, #16]
	//	}
	//	/* 8- deactivate programming mode */
	//	READ_BIT(FMI->FLASH_CR, 0);


}
 800054a:	bf00      	nop
 800054c:	371c      	adds	r7, #28
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	40023c00 	.word	0x40023c00
 800055c:	45670123 	.word	0x45670123
 8000560:	cdef89ab 	.word	0xcdef89ab

08000564 <MGPIO_Init>:
#include "GPIO_Interface.h"
#include "RCC_Interface.h"
#include "Utils.h"

void MGPIO_Init(GPIO_CFG_t* copy_GPIO_pCFG)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	RCC_AHB1EnableCLK(GPIOAEN);
 800056c:	2000      	movs	r0, #0
 800056e:	f000 fe05 	bl	800117c <RCC_AHB1EnableCLK>
	RCC_AHB1EnableCLK(GPIOBEN);
 8000572:	2001      	movs	r0, #1
 8000574:	f000 fe02 	bl	800117c <RCC_AHB1EnableCLK>

	MGPIO_vSetPinType(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_Type);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	7818      	ldrb	r0, [r3, #0]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	7859      	ldrb	r1, [r3, #1]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	789b      	ldrb	r3, [r3, #2]
 8000584:	461a      	mov	r2, r3
 8000586:	f000 f83b 	bl	8000600 <MGPIO_vSetPinType>
	MGPIO_vSetOutputPinType(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_OType);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	7818      	ldrb	r0, [r3, #0]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	7859      	ldrb	r1, [r3, #1]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	791b      	ldrb	r3, [r3, #4]
 8000596:	461a      	mov	r2, r3
 8000598:	f000 f8f0 	bl	800077c <MGPIO_vSetOutputPinType>
	MGPIO_vSetOutputPinSpeed(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_OSpeed);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	7818      	ldrb	r0, [r3, #0]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	7859      	ldrb	r1, [r3, #1]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	795b      	ldrb	r3, [r3, #5]
 80005a8:	461a      	mov	r2, r3
 80005aa:	f000 f99b 	bl	80008e4 <MGPIO_vSetOutputPinSpeed>
	MGPIO_vSetInputPinPullUpDown(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_IPullUpDown);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	7818      	ldrb	r0, [r3, #0]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	7859      	ldrb	r1, [r3, #1]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	799b      	ldrb	r3, [r3, #6]
 80005ba:	461a      	mov	r2, r3
 80005bc:	f000 fa50 	bl	8000a60 <MGPIO_vSetInputPinPullUpDown>
	MGPIO_vSetOutputPinValueBSR(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_OValue);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	7818      	ldrb	r0, [r3, #0]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	7859      	ldrb	r1, [r3, #1]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	78db      	ldrb	r3, [r3, #3]
 80005cc:	461a      	mov	r2, r3
 80005ce:	f000 fb05 	bl	8000bdc <MGPIO_vSetOutputPinValueBSR>
	MGPIO_vSetPinLockSTS(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_LCKSTS);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	7818      	ldrb	r0, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	7859      	ldrb	r1, [r3, #1]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	79db      	ldrb	r3, [r3, #7]
 80005de:	461a      	mov	r2, r3
 80005e0:	f000 fbe4 	bl	8000dac <MGPIO_vSetPinLockSTS>
	MGPIO_vSetPinAlternativeFunction(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_AF);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	7818      	ldrb	r0, [r3, #0]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7859      	ldrb	r1, [r3, #1]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	7a1b      	ldrb	r3, [r3, #8]
 80005f0:	461a      	mov	r2, r3
 80005f2:	f000 fc8d 	bl	8000f10 <MGPIO_vSetPinAlternativeFunction>


}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <MGPIO_vSetPinType>:

void MGPIO_vSetPinType(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_PinType_t copy_eGPIO_PinType)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
 800060a:	460b      	mov	r3, r1
 800060c:	71bb      	strb	r3, [r7, #6]
 800060e:	4613      	mov	r3, r2
 8000610:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	2b05      	cmp	r3, #5
 8000616:	f200 809f 	bhi.w	8000758 <MGPIO_vSetPinType+0x158>
 800061a:	a201      	add	r2, pc, #4	; (adr r2, 8000620 <MGPIO_vSetPinType+0x20>)
 800061c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000620:	08000639 	.word	0x08000639
 8000624:	08000669 	.word	0x08000669
 8000628:	08000699 	.word	0x08000699
 800062c:	080006c9 	.word	0x080006c9
 8000630:	080006f9 	.word	0x080006f9
 8000634:	08000729 	.word	0x08000729
	{
	case PORTA:
		GPIOA->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 8000638:	4b4a      	ldr	r3, [pc, #296]	; (8000764 <MGPIO_vSetPinType+0x164>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	79ba      	ldrb	r2, [r7, #6]
 800063e:	0052      	lsls	r2, r2, #1
 8000640:	2103      	movs	r1, #3
 8000642:	fa01 f202 	lsl.w	r2, r1, r2
 8000646:	43d2      	mvns	r2, r2
 8000648:	4611      	mov	r1, r2
 800064a:	4a46      	ldr	r2, [pc, #280]	; (8000764 <MGPIO_vSetPinType+0x164>)
 800064c:	400b      	ands	r3, r1
 800064e:	6013      	str	r3, [r2, #0]
		GPIOA->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 8000650:	4b44      	ldr	r3, [pc, #272]	; (8000764 <MGPIO_vSetPinType+0x164>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	7979      	ldrb	r1, [r7, #5]
 8000656:	79ba      	ldrb	r2, [r7, #6]
 8000658:	0052      	lsls	r2, r2, #1
 800065a:	fa01 f202 	lsl.w	r2, r1, r2
 800065e:	4611      	mov	r1, r2
 8000660:	4a40      	ldr	r2, [pc, #256]	; (8000764 <MGPIO_vSetPinType+0x164>)
 8000662:	430b      	orrs	r3, r1
 8000664:	6013      	str	r3, [r2, #0]
		break;
 8000666:	e077      	b.n	8000758 <MGPIO_vSetPinType+0x158>
	case PORTB:
		GPIOB->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 8000668:	4b3f      	ldr	r3, [pc, #252]	; (8000768 <MGPIO_vSetPinType+0x168>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	79ba      	ldrb	r2, [r7, #6]
 800066e:	0052      	lsls	r2, r2, #1
 8000670:	2103      	movs	r1, #3
 8000672:	fa01 f202 	lsl.w	r2, r1, r2
 8000676:	43d2      	mvns	r2, r2
 8000678:	4611      	mov	r1, r2
 800067a:	4a3b      	ldr	r2, [pc, #236]	; (8000768 <MGPIO_vSetPinType+0x168>)
 800067c:	400b      	ands	r3, r1
 800067e:	6013      	str	r3, [r2, #0]
		GPIOB->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 8000680:	4b39      	ldr	r3, [pc, #228]	; (8000768 <MGPIO_vSetPinType+0x168>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	7979      	ldrb	r1, [r7, #5]
 8000686:	79ba      	ldrb	r2, [r7, #6]
 8000688:	0052      	lsls	r2, r2, #1
 800068a:	fa01 f202 	lsl.w	r2, r1, r2
 800068e:	4611      	mov	r1, r2
 8000690:	4a35      	ldr	r2, [pc, #212]	; (8000768 <MGPIO_vSetPinType+0x168>)
 8000692:	430b      	orrs	r3, r1
 8000694:	6013      	str	r3, [r2, #0]
		break;
 8000696:	e05f      	b.n	8000758 <MGPIO_vSetPinType+0x158>
	case PORTC:
		GPIOC->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 8000698:	4b34      	ldr	r3, [pc, #208]	; (800076c <MGPIO_vSetPinType+0x16c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	79ba      	ldrb	r2, [r7, #6]
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	2103      	movs	r1, #3
 80006a2:	fa01 f202 	lsl.w	r2, r1, r2
 80006a6:	43d2      	mvns	r2, r2
 80006a8:	4611      	mov	r1, r2
 80006aa:	4a30      	ldr	r2, [pc, #192]	; (800076c <MGPIO_vSetPinType+0x16c>)
 80006ac:	400b      	ands	r3, r1
 80006ae:	6013      	str	r3, [r2, #0]
		GPIOC->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 80006b0:	4b2e      	ldr	r3, [pc, #184]	; (800076c <MGPIO_vSetPinType+0x16c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	7979      	ldrb	r1, [r7, #5]
 80006b6:	79ba      	ldrb	r2, [r7, #6]
 80006b8:	0052      	lsls	r2, r2, #1
 80006ba:	fa01 f202 	lsl.w	r2, r1, r2
 80006be:	4611      	mov	r1, r2
 80006c0:	4a2a      	ldr	r2, [pc, #168]	; (800076c <MGPIO_vSetPinType+0x16c>)
 80006c2:	430b      	orrs	r3, r1
 80006c4:	6013      	str	r3, [r2, #0]
		break;
 80006c6:	e047      	b.n	8000758 <MGPIO_vSetPinType+0x158>
	case PORTD:
		GPIOD->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 80006c8:	4b29      	ldr	r3, [pc, #164]	; (8000770 <MGPIO_vSetPinType+0x170>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	79ba      	ldrb	r2, [r7, #6]
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	2103      	movs	r1, #3
 80006d2:	fa01 f202 	lsl.w	r2, r1, r2
 80006d6:	43d2      	mvns	r2, r2
 80006d8:	4611      	mov	r1, r2
 80006da:	4a25      	ldr	r2, [pc, #148]	; (8000770 <MGPIO_vSetPinType+0x170>)
 80006dc:	400b      	ands	r3, r1
 80006de:	6013      	str	r3, [r2, #0]
		GPIOD->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 80006e0:	4b23      	ldr	r3, [pc, #140]	; (8000770 <MGPIO_vSetPinType+0x170>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	7979      	ldrb	r1, [r7, #5]
 80006e6:	79ba      	ldrb	r2, [r7, #6]
 80006e8:	0052      	lsls	r2, r2, #1
 80006ea:	fa01 f202 	lsl.w	r2, r1, r2
 80006ee:	4611      	mov	r1, r2
 80006f0:	4a1f      	ldr	r2, [pc, #124]	; (8000770 <MGPIO_vSetPinType+0x170>)
 80006f2:	430b      	orrs	r3, r1
 80006f4:	6013      	str	r3, [r2, #0]
		break;
 80006f6:	e02f      	b.n	8000758 <MGPIO_vSetPinType+0x158>
	case PORTE:
		GPIOE->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 80006f8:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <MGPIO_vSetPinType+0x174>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	79ba      	ldrb	r2, [r7, #6]
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	2103      	movs	r1, #3
 8000702:	fa01 f202 	lsl.w	r2, r1, r2
 8000706:	43d2      	mvns	r2, r2
 8000708:	4611      	mov	r1, r2
 800070a:	4a1a      	ldr	r2, [pc, #104]	; (8000774 <MGPIO_vSetPinType+0x174>)
 800070c:	400b      	ands	r3, r1
 800070e:	6013      	str	r3, [r2, #0]
		GPIOE->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <MGPIO_vSetPinType+0x174>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	7979      	ldrb	r1, [r7, #5]
 8000716:	79ba      	ldrb	r2, [r7, #6]
 8000718:	0052      	lsls	r2, r2, #1
 800071a:	fa01 f202 	lsl.w	r2, r1, r2
 800071e:	4611      	mov	r1, r2
 8000720:	4a14      	ldr	r2, [pc, #80]	; (8000774 <MGPIO_vSetPinType+0x174>)
 8000722:	430b      	orrs	r3, r1
 8000724:	6013      	str	r3, [r2, #0]
		break;
 8000726:	e017      	b.n	8000758 <MGPIO_vSetPinType+0x158>
	case PORTH:
		GPIOH->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 8000728:	4b13      	ldr	r3, [pc, #76]	; (8000778 <MGPIO_vSetPinType+0x178>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	79ba      	ldrb	r2, [r7, #6]
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	2103      	movs	r1, #3
 8000732:	fa01 f202 	lsl.w	r2, r1, r2
 8000736:	43d2      	mvns	r2, r2
 8000738:	4611      	mov	r1, r2
 800073a:	4a0f      	ldr	r2, [pc, #60]	; (8000778 <MGPIO_vSetPinType+0x178>)
 800073c:	400b      	ands	r3, r1
 800073e:	6013      	str	r3, [r2, #0]
		GPIOH->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 8000740:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <MGPIO_vSetPinType+0x178>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	7979      	ldrb	r1, [r7, #5]
 8000746:	79ba      	ldrb	r2, [r7, #6]
 8000748:	0052      	lsls	r2, r2, #1
 800074a:	fa01 f202 	lsl.w	r2, r1, r2
 800074e:	4611      	mov	r1, r2
 8000750:	4a09      	ldr	r2, [pc, #36]	; (8000778 <MGPIO_vSetPinType+0x178>)
 8000752:	430b      	orrs	r3, r1
 8000754:	6013      	str	r3, [r2, #0]
		break;
 8000756:	bf00      	nop
	}
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	40020000 	.word	0x40020000
 8000768:	40020400 	.word	0x40020400
 800076c:	40020800 	.word	0x40020800
 8000770:	40020c00 	.word	0x40020c00
 8000774:	40021000 	.word	0x40021000
 8000778:	40021c00 	.word	0x40021c00

0800077c <MGPIO_vSetOutputPinType>:
void MGPIO_vSetOutputPinType(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_OType_t copy_GPIO_OType)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
 8000786:	460b      	mov	r3, r1
 8000788:	71bb      	strb	r3, [r7, #6]
 800078a:	4613      	mov	r3, r2
 800078c:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b05      	cmp	r3, #5
 8000792:	f200 8095 	bhi.w	80008c0 <MGPIO_vSetOutputPinType+0x144>
 8000796:	a201      	add	r2, pc, #4	; (adr r2, 800079c <MGPIO_vSetOutputPinType+0x20>)
 8000798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079c:	080007b5 	.word	0x080007b5
 80007a0:	080007e3 	.word	0x080007e3
 80007a4:	08000811 	.word	0x08000811
 80007a8:	0800083d 	.word	0x0800083d
 80007ac:	08000869 	.word	0x08000869
 80007b0:	08000895 	.word	0x08000895
	{
	case PORTA:
		GPIOA->GPIO_OTYPER &= ~(0b1<<copy_eGPIO_Pin*2);
 80007b4:	4b45      	ldr	r3, [pc, #276]	; (80008cc <MGPIO_vSetOutputPinType+0x150>)
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	79ba      	ldrb	r2, [r7, #6]
 80007ba:	0052      	lsls	r2, r2, #1
 80007bc:	2101      	movs	r1, #1
 80007be:	fa01 f202 	lsl.w	r2, r1, r2
 80007c2:	43d2      	mvns	r2, r2
 80007c4:	4611      	mov	r1, r2
 80007c6:	4a41      	ldr	r2, [pc, #260]	; (80008cc <MGPIO_vSetOutputPinType+0x150>)
 80007c8:	400b      	ands	r3, r1
 80007ca:	6053      	str	r3, [r2, #4]
		GPIOA->GPIO_OTYPER |= (copy_GPIO_OType<<copy_eGPIO_Pin);
 80007cc:	4b3f      	ldr	r3, [pc, #252]	; (80008cc <MGPIO_vSetOutputPinType+0x150>)
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	7979      	ldrb	r1, [r7, #5]
 80007d2:	79ba      	ldrb	r2, [r7, #6]
 80007d4:	fa01 f202 	lsl.w	r2, r1, r2
 80007d8:	4611      	mov	r1, r2
 80007da:	4a3c      	ldr	r2, [pc, #240]	; (80008cc <MGPIO_vSetOutputPinType+0x150>)
 80007dc:	430b      	orrs	r3, r1
 80007de:	6053      	str	r3, [r2, #4]
		break;
 80007e0:	e06e      	b.n	80008c0 <MGPIO_vSetOutputPinType+0x144>
	case PORTB:
		GPIOB->GPIO_OTYPER &= ~(0b1<<copy_eGPIO_Pin*2);
 80007e2:	4b3b      	ldr	r3, [pc, #236]	; (80008d0 <MGPIO_vSetOutputPinType+0x154>)
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	79ba      	ldrb	r2, [r7, #6]
 80007e8:	0052      	lsls	r2, r2, #1
 80007ea:	2101      	movs	r1, #1
 80007ec:	fa01 f202 	lsl.w	r2, r1, r2
 80007f0:	43d2      	mvns	r2, r2
 80007f2:	4611      	mov	r1, r2
 80007f4:	4a36      	ldr	r2, [pc, #216]	; (80008d0 <MGPIO_vSetOutputPinType+0x154>)
 80007f6:	400b      	ands	r3, r1
 80007f8:	6053      	str	r3, [r2, #4]
		GPIOB->GPIO_OTYPER |= (copy_GPIO_OType<<copy_eGPIO_Pin);
 80007fa:	4b35      	ldr	r3, [pc, #212]	; (80008d0 <MGPIO_vSetOutputPinType+0x154>)
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	7979      	ldrb	r1, [r7, #5]
 8000800:	79ba      	ldrb	r2, [r7, #6]
 8000802:	fa01 f202 	lsl.w	r2, r1, r2
 8000806:	4611      	mov	r1, r2
 8000808:	4a31      	ldr	r2, [pc, #196]	; (80008d0 <MGPIO_vSetOutputPinType+0x154>)
 800080a:	430b      	orrs	r3, r1
 800080c:	6053      	str	r3, [r2, #4]
		break;
 800080e:	e057      	b.n	80008c0 <MGPIO_vSetOutputPinType+0x144>
	case PORTC:
		GPIOC->GPIO_OTYPER &= ~(0b1<<copy_eGPIO_Pin);
 8000810:	4b30      	ldr	r3, [pc, #192]	; (80008d4 <MGPIO_vSetOutputPinType+0x158>)
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	79ba      	ldrb	r2, [r7, #6]
 8000816:	2101      	movs	r1, #1
 8000818:	fa01 f202 	lsl.w	r2, r1, r2
 800081c:	43d2      	mvns	r2, r2
 800081e:	4611      	mov	r1, r2
 8000820:	4a2c      	ldr	r2, [pc, #176]	; (80008d4 <MGPIO_vSetOutputPinType+0x158>)
 8000822:	400b      	ands	r3, r1
 8000824:	6053      	str	r3, [r2, #4]
		GPIOC->GPIO_OTYPER |= (copy_GPIO_OType<<copy_eGPIO_Pin);
 8000826:	4b2b      	ldr	r3, [pc, #172]	; (80008d4 <MGPIO_vSetOutputPinType+0x158>)
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	7979      	ldrb	r1, [r7, #5]
 800082c:	79ba      	ldrb	r2, [r7, #6]
 800082e:	fa01 f202 	lsl.w	r2, r1, r2
 8000832:	4611      	mov	r1, r2
 8000834:	4a27      	ldr	r2, [pc, #156]	; (80008d4 <MGPIO_vSetOutputPinType+0x158>)
 8000836:	430b      	orrs	r3, r1
 8000838:	6053      	str	r3, [r2, #4]
		break;
 800083a:	e041      	b.n	80008c0 <MGPIO_vSetOutputPinType+0x144>
	case PORTD:
		GPIOD->GPIO_OTYPER &= ~(0b1<<copy_eGPIO_Pin);
 800083c:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <MGPIO_vSetOutputPinType+0x15c>)
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	79ba      	ldrb	r2, [r7, #6]
 8000842:	2101      	movs	r1, #1
 8000844:	fa01 f202 	lsl.w	r2, r1, r2
 8000848:	43d2      	mvns	r2, r2
 800084a:	4611      	mov	r1, r2
 800084c:	4a22      	ldr	r2, [pc, #136]	; (80008d8 <MGPIO_vSetOutputPinType+0x15c>)
 800084e:	400b      	ands	r3, r1
 8000850:	6053      	str	r3, [r2, #4]
		GPIOD->GPIO_OTYPER |= (copy_GPIO_OType<<copy_eGPIO_Pin);
 8000852:	4b21      	ldr	r3, [pc, #132]	; (80008d8 <MGPIO_vSetOutputPinType+0x15c>)
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	7979      	ldrb	r1, [r7, #5]
 8000858:	79ba      	ldrb	r2, [r7, #6]
 800085a:	fa01 f202 	lsl.w	r2, r1, r2
 800085e:	4611      	mov	r1, r2
 8000860:	4a1d      	ldr	r2, [pc, #116]	; (80008d8 <MGPIO_vSetOutputPinType+0x15c>)
 8000862:	430b      	orrs	r3, r1
 8000864:	6053      	str	r3, [r2, #4]
		break;
 8000866:	e02b      	b.n	80008c0 <MGPIO_vSetOutputPinType+0x144>
	case PORTE:
		GPIOE->GPIO_OTYPER &= ~(0b1<<copy_eGPIO_Pin);
 8000868:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <MGPIO_vSetOutputPinType+0x160>)
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	79ba      	ldrb	r2, [r7, #6]
 800086e:	2101      	movs	r1, #1
 8000870:	fa01 f202 	lsl.w	r2, r1, r2
 8000874:	43d2      	mvns	r2, r2
 8000876:	4611      	mov	r1, r2
 8000878:	4a18      	ldr	r2, [pc, #96]	; (80008dc <MGPIO_vSetOutputPinType+0x160>)
 800087a:	400b      	ands	r3, r1
 800087c:	6053      	str	r3, [r2, #4]
		GPIOE->GPIO_OTYPER |= (copy_GPIO_OType<<copy_eGPIO_Pin);
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MGPIO_vSetOutputPinType+0x160>)
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	7979      	ldrb	r1, [r7, #5]
 8000884:	79ba      	ldrb	r2, [r7, #6]
 8000886:	fa01 f202 	lsl.w	r2, r1, r2
 800088a:	4611      	mov	r1, r2
 800088c:	4a13      	ldr	r2, [pc, #76]	; (80008dc <MGPIO_vSetOutputPinType+0x160>)
 800088e:	430b      	orrs	r3, r1
 8000890:	6053      	str	r3, [r2, #4]
		break;
 8000892:	e015      	b.n	80008c0 <MGPIO_vSetOutputPinType+0x144>
	case PORTH:
		GPIOH->GPIO_OTYPER &= ~(0b1<<copy_eGPIO_Pin);
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MGPIO_vSetOutputPinType+0x164>)
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	79ba      	ldrb	r2, [r7, #6]
 800089a:	2101      	movs	r1, #1
 800089c:	fa01 f202 	lsl.w	r2, r1, r2
 80008a0:	43d2      	mvns	r2, r2
 80008a2:	4611      	mov	r1, r2
 80008a4:	4a0e      	ldr	r2, [pc, #56]	; (80008e0 <MGPIO_vSetOutputPinType+0x164>)
 80008a6:	400b      	ands	r3, r1
 80008a8:	6053      	str	r3, [r2, #4]
		GPIOH->GPIO_OTYPER |= (copy_GPIO_OType<<copy_eGPIO_Pin);
 80008aa:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <MGPIO_vSetOutputPinType+0x164>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	7979      	ldrb	r1, [r7, #5]
 80008b0:	79ba      	ldrb	r2, [r7, #6]
 80008b2:	fa01 f202 	lsl.w	r2, r1, r2
 80008b6:	4611      	mov	r1, r2
 80008b8:	4a09      	ldr	r2, [pc, #36]	; (80008e0 <MGPIO_vSetOutputPinType+0x164>)
 80008ba:	430b      	orrs	r3, r1
 80008bc:	6053      	str	r3, [r2, #4]
		break;
 80008be:	bf00      	nop
	}
}
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	40020000 	.word	0x40020000
 80008d0:	40020400 	.word	0x40020400
 80008d4:	40020800 	.word	0x40020800
 80008d8:	40020c00 	.word	0x40020c00
 80008dc:	40021000 	.word	0x40021000
 80008e0:	40021c00 	.word	0x40021c00

080008e4 <MGPIO_vSetOutputPinSpeed>:
void MGPIO_vSetOutputPinSpeed(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_OSpeed_t copy_GPIO_OSpeed)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
 80008ee:	460b      	mov	r3, r1
 80008f0:	71bb      	strb	r3, [r7, #6]
 80008f2:	4613      	mov	r3, r2
 80008f4:	717b      	strb	r3, [r7, #5]

	switch (copy_eGPIO_Port)
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2b05      	cmp	r3, #5
 80008fa:	f200 809f 	bhi.w	8000a3c <MGPIO_vSetOutputPinSpeed+0x158>
 80008fe:	a201      	add	r2, pc, #4	; (adr r2, 8000904 <MGPIO_vSetOutputPinSpeed+0x20>)
 8000900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000904:	0800091d 	.word	0x0800091d
 8000908:	0800094d 	.word	0x0800094d
 800090c:	0800097d 	.word	0x0800097d
 8000910:	080009ad 	.word	0x080009ad
 8000914:	080009dd 	.word	0x080009dd
 8000918:	08000a0d 	.word	0x08000a0d
	{
	case PORTA:
		GPIOA->GPIO_OSPEEDR &= ~(0b11<<copy_eGPIO_Pin*2);
 800091c:	4b4a      	ldr	r3, [pc, #296]	; (8000a48 <MGPIO_vSetOutputPinSpeed+0x164>)
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	79ba      	ldrb	r2, [r7, #6]
 8000922:	0052      	lsls	r2, r2, #1
 8000924:	2103      	movs	r1, #3
 8000926:	fa01 f202 	lsl.w	r2, r1, r2
 800092a:	43d2      	mvns	r2, r2
 800092c:	4611      	mov	r1, r2
 800092e:	4a46      	ldr	r2, [pc, #280]	; (8000a48 <MGPIO_vSetOutputPinSpeed+0x164>)
 8000930:	400b      	ands	r3, r1
 8000932:	6093      	str	r3, [r2, #8]
		GPIOA->GPIO_OSPEEDR |= (copy_GPIO_OSpeed<<copy_eGPIO_Pin*2);
 8000934:	4b44      	ldr	r3, [pc, #272]	; (8000a48 <MGPIO_vSetOutputPinSpeed+0x164>)
 8000936:	689b      	ldr	r3, [r3, #8]
 8000938:	7979      	ldrb	r1, [r7, #5]
 800093a:	79ba      	ldrb	r2, [r7, #6]
 800093c:	0052      	lsls	r2, r2, #1
 800093e:	fa01 f202 	lsl.w	r2, r1, r2
 8000942:	4611      	mov	r1, r2
 8000944:	4a40      	ldr	r2, [pc, #256]	; (8000a48 <MGPIO_vSetOutputPinSpeed+0x164>)
 8000946:	430b      	orrs	r3, r1
 8000948:	6093      	str	r3, [r2, #8]
		break;
 800094a:	e077      	b.n	8000a3c <MGPIO_vSetOutputPinSpeed+0x158>
	case PORTB:
		GPIOB->GPIO_OSPEEDR &= ~(0b11<<copy_eGPIO_Pin*2);
 800094c:	4b3f      	ldr	r3, [pc, #252]	; (8000a4c <MGPIO_vSetOutputPinSpeed+0x168>)
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	79ba      	ldrb	r2, [r7, #6]
 8000952:	0052      	lsls	r2, r2, #1
 8000954:	2103      	movs	r1, #3
 8000956:	fa01 f202 	lsl.w	r2, r1, r2
 800095a:	43d2      	mvns	r2, r2
 800095c:	4611      	mov	r1, r2
 800095e:	4a3b      	ldr	r2, [pc, #236]	; (8000a4c <MGPIO_vSetOutputPinSpeed+0x168>)
 8000960:	400b      	ands	r3, r1
 8000962:	6093      	str	r3, [r2, #8]
		GPIOB->GPIO_OSPEEDR |= (copy_GPIO_OSpeed<<copy_eGPIO_Pin*2);
 8000964:	4b39      	ldr	r3, [pc, #228]	; (8000a4c <MGPIO_vSetOutputPinSpeed+0x168>)
 8000966:	689b      	ldr	r3, [r3, #8]
 8000968:	7979      	ldrb	r1, [r7, #5]
 800096a:	79ba      	ldrb	r2, [r7, #6]
 800096c:	0052      	lsls	r2, r2, #1
 800096e:	fa01 f202 	lsl.w	r2, r1, r2
 8000972:	4611      	mov	r1, r2
 8000974:	4a35      	ldr	r2, [pc, #212]	; (8000a4c <MGPIO_vSetOutputPinSpeed+0x168>)
 8000976:	430b      	orrs	r3, r1
 8000978:	6093      	str	r3, [r2, #8]
		break;
 800097a:	e05f      	b.n	8000a3c <MGPIO_vSetOutputPinSpeed+0x158>
	case PORTC:
		GPIOC->GPIO_OSPEEDR &= ~(0b11<<copy_eGPIO_Pin*2);
 800097c:	4b34      	ldr	r3, [pc, #208]	; (8000a50 <MGPIO_vSetOutputPinSpeed+0x16c>)
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	79ba      	ldrb	r2, [r7, #6]
 8000982:	0052      	lsls	r2, r2, #1
 8000984:	2103      	movs	r1, #3
 8000986:	fa01 f202 	lsl.w	r2, r1, r2
 800098a:	43d2      	mvns	r2, r2
 800098c:	4611      	mov	r1, r2
 800098e:	4a30      	ldr	r2, [pc, #192]	; (8000a50 <MGPIO_vSetOutputPinSpeed+0x16c>)
 8000990:	400b      	ands	r3, r1
 8000992:	6093      	str	r3, [r2, #8]
		GPIOC->GPIO_OSPEEDR |= (copy_GPIO_OSpeed<<copy_eGPIO_Pin*2);
 8000994:	4b2e      	ldr	r3, [pc, #184]	; (8000a50 <MGPIO_vSetOutputPinSpeed+0x16c>)
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	7979      	ldrb	r1, [r7, #5]
 800099a:	79ba      	ldrb	r2, [r7, #6]
 800099c:	0052      	lsls	r2, r2, #1
 800099e:	fa01 f202 	lsl.w	r2, r1, r2
 80009a2:	4611      	mov	r1, r2
 80009a4:	4a2a      	ldr	r2, [pc, #168]	; (8000a50 <MGPIO_vSetOutputPinSpeed+0x16c>)
 80009a6:	430b      	orrs	r3, r1
 80009a8:	6093      	str	r3, [r2, #8]
		break;
 80009aa:	e047      	b.n	8000a3c <MGPIO_vSetOutputPinSpeed+0x158>
	case PORTD:
		GPIOD->GPIO_OSPEEDR &= ~(0b11<<copy_eGPIO_Pin*2);
 80009ac:	4b29      	ldr	r3, [pc, #164]	; (8000a54 <MGPIO_vSetOutputPinSpeed+0x170>)
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	79ba      	ldrb	r2, [r7, #6]
 80009b2:	0052      	lsls	r2, r2, #1
 80009b4:	2103      	movs	r1, #3
 80009b6:	fa01 f202 	lsl.w	r2, r1, r2
 80009ba:	43d2      	mvns	r2, r2
 80009bc:	4611      	mov	r1, r2
 80009be:	4a25      	ldr	r2, [pc, #148]	; (8000a54 <MGPIO_vSetOutputPinSpeed+0x170>)
 80009c0:	400b      	ands	r3, r1
 80009c2:	6093      	str	r3, [r2, #8]
		GPIOD->GPIO_OSPEEDR |= (copy_GPIO_OSpeed<<copy_eGPIO_Pin*2);
 80009c4:	4b23      	ldr	r3, [pc, #140]	; (8000a54 <MGPIO_vSetOutputPinSpeed+0x170>)
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	7979      	ldrb	r1, [r7, #5]
 80009ca:	79ba      	ldrb	r2, [r7, #6]
 80009cc:	0052      	lsls	r2, r2, #1
 80009ce:	fa01 f202 	lsl.w	r2, r1, r2
 80009d2:	4611      	mov	r1, r2
 80009d4:	4a1f      	ldr	r2, [pc, #124]	; (8000a54 <MGPIO_vSetOutputPinSpeed+0x170>)
 80009d6:	430b      	orrs	r3, r1
 80009d8:	6093      	str	r3, [r2, #8]
		break;
 80009da:	e02f      	b.n	8000a3c <MGPIO_vSetOutputPinSpeed+0x158>
	case PORTE:
		GPIOE->GPIO_OSPEEDR &= ~(0b11<<copy_eGPIO_Pin*2);
 80009dc:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <MGPIO_vSetOutputPinSpeed+0x174>)
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	79ba      	ldrb	r2, [r7, #6]
 80009e2:	0052      	lsls	r2, r2, #1
 80009e4:	2103      	movs	r1, #3
 80009e6:	fa01 f202 	lsl.w	r2, r1, r2
 80009ea:	43d2      	mvns	r2, r2
 80009ec:	4611      	mov	r1, r2
 80009ee:	4a1a      	ldr	r2, [pc, #104]	; (8000a58 <MGPIO_vSetOutputPinSpeed+0x174>)
 80009f0:	400b      	ands	r3, r1
 80009f2:	6093      	str	r3, [r2, #8]
		GPIOE->GPIO_OSPEEDR |= (copy_GPIO_OSpeed<<copy_eGPIO_Pin*2);
 80009f4:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <MGPIO_vSetOutputPinSpeed+0x174>)
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	7979      	ldrb	r1, [r7, #5]
 80009fa:	79ba      	ldrb	r2, [r7, #6]
 80009fc:	0052      	lsls	r2, r2, #1
 80009fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000a02:	4611      	mov	r1, r2
 8000a04:	4a14      	ldr	r2, [pc, #80]	; (8000a58 <MGPIO_vSetOutputPinSpeed+0x174>)
 8000a06:	430b      	orrs	r3, r1
 8000a08:	6093      	str	r3, [r2, #8]
		break;
 8000a0a:	e017      	b.n	8000a3c <MGPIO_vSetOutputPinSpeed+0x158>
	case PORTH:
		GPIOH->GPIO_OSPEEDR &= ~(0b11<<copy_eGPIO_Pin*2);
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <MGPIO_vSetOutputPinSpeed+0x178>)
 8000a0e:	689b      	ldr	r3, [r3, #8]
 8000a10:	79ba      	ldrb	r2, [r7, #6]
 8000a12:	0052      	lsls	r2, r2, #1
 8000a14:	2103      	movs	r1, #3
 8000a16:	fa01 f202 	lsl.w	r2, r1, r2
 8000a1a:	43d2      	mvns	r2, r2
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	4a0f      	ldr	r2, [pc, #60]	; (8000a5c <MGPIO_vSetOutputPinSpeed+0x178>)
 8000a20:	400b      	ands	r3, r1
 8000a22:	6093      	str	r3, [r2, #8]
		GPIOH->GPIO_OSPEEDR |= (copy_GPIO_OSpeed<<copy_eGPIO_Pin*2);
 8000a24:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <MGPIO_vSetOutputPinSpeed+0x178>)
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	7979      	ldrb	r1, [r7, #5]
 8000a2a:	79ba      	ldrb	r2, [r7, #6]
 8000a2c:	0052      	lsls	r2, r2, #1
 8000a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a32:	4611      	mov	r1, r2
 8000a34:	4a09      	ldr	r2, [pc, #36]	; (8000a5c <MGPIO_vSetOutputPinSpeed+0x178>)
 8000a36:	430b      	orrs	r3, r1
 8000a38:	6093      	str	r3, [r2, #8]
		break;
 8000a3a:	bf00      	nop
	}

}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	40020400 	.word	0x40020400
 8000a50:	40020800 	.word	0x40020800
 8000a54:	40020c00 	.word	0x40020c00
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	40021c00 	.word	0x40021c00

08000a60 <MGPIO_vSetInputPinPullUpDown>:
void MGPIO_vSetInputPinPullUpDown(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_PUPD_t copy_GPIO_PUPD)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
 8000a6a:	460b      	mov	r3, r1
 8000a6c:	71bb      	strb	r3, [r7, #6]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	2b05      	cmp	r3, #5
 8000a76:	f200 809f 	bhi.w	8000bb8 <MGPIO_vSetInputPinPullUpDown+0x158>
 8000a7a:	a201      	add	r2, pc, #4	; (adr r2, 8000a80 <MGPIO_vSetInputPinPullUpDown+0x20>)
 8000a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a80:	08000a99 	.word	0x08000a99
 8000a84:	08000ac9 	.word	0x08000ac9
 8000a88:	08000af9 	.word	0x08000af9
 8000a8c:	08000b29 	.word	0x08000b29
 8000a90:	08000b59 	.word	0x08000b59
 8000a94:	08000b89 	.word	0x08000b89
	{
	case PORTA:
		GPIOA->GPIO_PUPDR &= ~(0b11<<copy_eGPIO_Pin*2);
 8000a98:	4b4a      	ldr	r3, [pc, #296]	; (8000bc4 <MGPIO_vSetInputPinPullUpDown+0x164>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	79ba      	ldrb	r2, [r7, #6]
 8000a9e:	0052      	lsls	r2, r2, #1
 8000aa0:	2103      	movs	r1, #3
 8000aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa6:	43d2      	mvns	r2, r2
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	4a46      	ldr	r2, [pc, #280]	; (8000bc4 <MGPIO_vSetInputPinPullUpDown+0x164>)
 8000aac:	400b      	ands	r3, r1
 8000aae:	60d3      	str	r3, [r2, #12]
		GPIOA->GPIO_PUPDR |= (copy_GPIO_PUPD<<copy_eGPIO_Pin*2);
 8000ab0:	4b44      	ldr	r3, [pc, #272]	; (8000bc4 <MGPIO_vSetInputPinPullUpDown+0x164>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	7979      	ldrb	r1, [r7, #5]
 8000ab6:	79ba      	ldrb	r2, [r7, #6]
 8000ab8:	0052      	lsls	r2, r2, #1
 8000aba:	fa01 f202 	lsl.w	r2, r1, r2
 8000abe:	4611      	mov	r1, r2
 8000ac0:	4a40      	ldr	r2, [pc, #256]	; (8000bc4 <MGPIO_vSetInputPinPullUpDown+0x164>)
 8000ac2:	430b      	orrs	r3, r1
 8000ac4:	60d3      	str	r3, [r2, #12]
		break;
 8000ac6:	e077      	b.n	8000bb8 <MGPIO_vSetInputPinPullUpDown+0x158>
	case PORTB:
		GPIOB->GPIO_PUPDR &= ~(0b11<<copy_eGPIO_Pin*2);
 8000ac8:	4b3f      	ldr	r3, [pc, #252]	; (8000bc8 <MGPIO_vSetInputPinPullUpDown+0x168>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	79ba      	ldrb	r2, [r7, #6]
 8000ace:	0052      	lsls	r2, r2, #1
 8000ad0:	2103      	movs	r1, #3
 8000ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad6:	43d2      	mvns	r2, r2
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4a3b      	ldr	r2, [pc, #236]	; (8000bc8 <MGPIO_vSetInputPinPullUpDown+0x168>)
 8000adc:	400b      	ands	r3, r1
 8000ade:	60d3      	str	r3, [r2, #12]
		GPIOB->GPIO_PUPDR |= (copy_GPIO_PUPD<<copy_eGPIO_Pin*2);
 8000ae0:	4b39      	ldr	r3, [pc, #228]	; (8000bc8 <MGPIO_vSetInputPinPullUpDown+0x168>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	7979      	ldrb	r1, [r7, #5]
 8000ae6:	79ba      	ldrb	r2, [r7, #6]
 8000ae8:	0052      	lsls	r2, r2, #1
 8000aea:	fa01 f202 	lsl.w	r2, r1, r2
 8000aee:	4611      	mov	r1, r2
 8000af0:	4a35      	ldr	r2, [pc, #212]	; (8000bc8 <MGPIO_vSetInputPinPullUpDown+0x168>)
 8000af2:	430b      	orrs	r3, r1
 8000af4:	60d3      	str	r3, [r2, #12]
		break;
 8000af6:	e05f      	b.n	8000bb8 <MGPIO_vSetInputPinPullUpDown+0x158>
	case PORTC:
		GPIOC->GPIO_PUPDR &= ~(0b11<<copy_eGPIO_Pin*2);
 8000af8:	4b34      	ldr	r3, [pc, #208]	; (8000bcc <MGPIO_vSetInputPinPullUpDown+0x16c>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	79ba      	ldrb	r2, [r7, #6]
 8000afe:	0052      	lsls	r2, r2, #1
 8000b00:	2103      	movs	r1, #3
 8000b02:	fa01 f202 	lsl.w	r2, r1, r2
 8000b06:	43d2      	mvns	r2, r2
 8000b08:	4611      	mov	r1, r2
 8000b0a:	4a30      	ldr	r2, [pc, #192]	; (8000bcc <MGPIO_vSetInputPinPullUpDown+0x16c>)
 8000b0c:	400b      	ands	r3, r1
 8000b0e:	60d3      	str	r3, [r2, #12]
		GPIOC->GPIO_PUPDR |= (copy_GPIO_PUPD<<copy_eGPIO_Pin*2);
 8000b10:	4b2e      	ldr	r3, [pc, #184]	; (8000bcc <MGPIO_vSetInputPinPullUpDown+0x16c>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	7979      	ldrb	r1, [r7, #5]
 8000b16:	79ba      	ldrb	r2, [r7, #6]
 8000b18:	0052      	lsls	r2, r2, #1
 8000b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b1e:	4611      	mov	r1, r2
 8000b20:	4a2a      	ldr	r2, [pc, #168]	; (8000bcc <MGPIO_vSetInputPinPullUpDown+0x16c>)
 8000b22:	430b      	orrs	r3, r1
 8000b24:	60d3      	str	r3, [r2, #12]
		break;
 8000b26:	e047      	b.n	8000bb8 <MGPIO_vSetInputPinPullUpDown+0x158>
	case PORTD:
		GPIOD->GPIO_PUPDR &= ~(0b11<<copy_eGPIO_Pin*2);
 8000b28:	4b29      	ldr	r3, [pc, #164]	; (8000bd0 <MGPIO_vSetInputPinPullUpDown+0x170>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	79ba      	ldrb	r2, [r7, #6]
 8000b2e:	0052      	lsls	r2, r2, #1
 8000b30:	2103      	movs	r1, #3
 8000b32:	fa01 f202 	lsl.w	r2, r1, r2
 8000b36:	43d2      	mvns	r2, r2
 8000b38:	4611      	mov	r1, r2
 8000b3a:	4a25      	ldr	r2, [pc, #148]	; (8000bd0 <MGPIO_vSetInputPinPullUpDown+0x170>)
 8000b3c:	400b      	ands	r3, r1
 8000b3e:	60d3      	str	r3, [r2, #12]
		GPIOD->GPIO_PUPDR |= (copy_GPIO_PUPD<<copy_eGPIO_Pin*2);
 8000b40:	4b23      	ldr	r3, [pc, #140]	; (8000bd0 <MGPIO_vSetInputPinPullUpDown+0x170>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	7979      	ldrb	r1, [r7, #5]
 8000b46:	79ba      	ldrb	r2, [r7, #6]
 8000b48:	0052      	lsls	r2, r2, #1
 8000b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b4e:	4611      	mov	r1, r2
 8000b50:	4a1f      	ldr	r2, [pc, #124]	; (8000bd0 <MGPIO_vSetInputPinPullUpDown+0x170>)
 8000b52:	430b      	orrs	r3, r1
 8000b54:	60d3      	str	r3, [r2, #12]
		break;
 8000b56:	e02f      	b.n	8000bb8 <MGPIO_vSetInputPinPullUpDown+0x158>
	case PORTE:
		GPIOE->GPIO_PUPDR &= ~(0b11<<copy_eGPIO_Pin*2);
 8000b58:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <MGPIO_vSetInputPinPullUpDown+0x174>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	79ba      	ldrb	r2, [r7, #6]
 8000b5e:	0052      	lsls	r2, r2, #1
 8000b60:	2103      	movs	r1, #3
 8000b62:	fa01 f202 	lsl.w	r2, r1, r2
 8000b66:	43d2      	mvns	r2, r2
 8000b68:	4611      	mov	r1, r2
 8000b6a:	4a1a      	ldr	r2, [pc, #104]	; (8000bd4 <MGPIO_vSetInputPinPullUpDown+0x174>)
 8000b6c:	400b      	ands	r3, r1
 8000b6e:	60d3      	str	r3, [r2, #12]
		GPIOE->GPIO_PUPDR |= (copy_GPIO_PUPD<<copy_eGPIO_Pin*2);
 8000b70:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <MGPIO_vSetInputPinPullUpDown+0x174>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	7979      	ldrb	r1, [r7, #5]
 8000b76:	79ba      	ldrb	r2, [r7, #6]
 8000b78:	0052      	lsls	r2, r2, #1
 8000b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b7e:	4611      	mov	r1, r2
 8000b80:	4a14      	ldr	r2, [pc, #80]	; (8000bd4 <MGPIO_vSetInputPinPullUpDown+0x174>)
 8000b82:	430b      	orrs	r3, r1
 8000b84:	60d3      	str	r3, [r2, #12]
		break;
 8000b86:	e017      	b.n	8000bb8 <MGPIO_vSetInputPinPullUpDown+0x158>
	case PORTH:
		GPIOH->GPIO_PUPDR &= ~(0b11<<copy_eGPIO_Pin*2);
 8000b88:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <MGPIO_vSetInputPinPullUpDown+0x178>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	79ba      	ldrb	r2, [r7, #6]
 8000b8e:	0052      	lsls	r2, r2, #1
 8000b90:	2103      	movs	r1, #3
 8000b92:	fa01 f202 	lsl.w	r2, r1, r2
 8000b96:	43d2      	mvns	r2, r2
 8000b98:	4611      	mov	r1, r2
 8000b9a:	4a0f      	ldr	r2, [pc, #60]	; (8000bd8 <MGPIO_vSetInputPinPullUpDown+0x178>)
 8000b9c:	400b      	ands	r3, r1
 8000b9e:	60d3      	str	r3, [r2, #12]
		GPIOH->GPIO_PUPDR |= (copy_GPIO_PUPD<<copy_eGPIO_Pin*2);
 8000ba0:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <MGPIO_vSetInputPinPullUpDown+0x178>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	7979      	ldrb	r1, [r7, #5]
 8000ba6:	79ba      	ldrb	r2, [r7, #6]
 8000ba8:	0052      	lsls	r2, r2, #1
 8000baa:	fa01 f202 	lsl.w	r2, r1, r2
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4a09      	ldr	r2, [pc, #36]	; (8000bd8 <MGPIO_vSetInputPinPullUpDown+0x178>)
 8000bb2:	430b      	orrs	r3, r1
 8000bb4:	60d3      	str	r3, [r2, #12]
		break;
 8000bb6:	bf00      	nop
	}

}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	40020000 	.word	0x40020000
 8000bc8:	40020400 	.word	0x40020400
 8000bcc:	40020800 	.word	0x40020800
 8000bd0:	40020c00 	.word	0x40020c00
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	40021c00 	.word	0x40021c00

08000bdc <MGPIO_vSetOutputPinValueBSR>:
	}

}

void MGPIO_vSetOutputPinValueBSR(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_BS_t copy_GPIO_BS)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
 8000be6:	460b      	mov	r3, r1
 8000be8:	71bb      	strb	r3, [r7, #6]
 8000bea:	4613      	mov	r3, r2
 8000bec:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b05      	cmp	r3, #5
 8000bf2:	f200 80ca 	bhi.w	8000d8a <MGPIO_vSetOutputPinValueBSR+0x1ae>
 8000bf6:	a201      	add	r2, pc, #4	; (adr r2, 8000bfc <MGPIO_vSetOutputPinValueBSR+0x20>)
 8000bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bfc:	08000c15 	.word	0x08000c15
 8000c00:	08000c51 	.word	0x08000c51
 8000c04:	08000c8d 	.word	0x08000c8d
 8000c08:	08000cc7 	.word	0x08000cc7
 8000c0c:	08000d01 	.word	0x08000d01
 8000c10:	08000d3b 	.word	0x08000d3b
	{
	case PORTA:
		if (copy_GPIO_BS == SET)
 8000c14:	797b      	ldrb	r3, [r7, #5]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d10a      	bne.n	8000c30 <MGPIO_vSetOutputPinValueBSR+0x54>
		{
			GPIOA->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8000c1a:	4b5f      	ldr	r3, [pc, #380]	; (8000d98 <MGPIO_vSetOutputPinValueBSR+0x1bc>)
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	79ba      	ldrb	r2, [r7, #6]
 8000c20:	2101      	movs	r1, #1
 8000c22:	fa01 f202 	lsl.w	r2, r1, r2
 8000c26:	4611      	mov	r1, r2
 8000c28:	4a5b      	ldr	r2, [pc, #364]	; (8000d98 <MGPIO_vSetOutputPinValueBSR+0x1bc>)
 8000c2a:	430b      	orrs	r3, r1
 8000c2c:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOA->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}
		break;
 8000c2e:	e0a1      	b.n	8000d74 <MGPIO_vSetOutputPinValueBSR+0x198>
		else if(copy_GPIO_BS == RESET)
 8000c30:	797b      	ldrb	r3, [r7, #5]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 809e 	bne.w	8000d74 <MGPIO_vSetOutputPinValueBSR+0x198>
			GPIOA->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000c38:	4b57      	ldr	r3, [pc, #348]	; (8000d98 <MGPIO_vSetOutputPinValueBSR+0x1bc>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	79ba      	ldrb	r2, [r7, #6]
 8000c3e:	3210      	adds	r2, #16
 8000c40:	2101      	movs	r1, #1
 8000c42:	fa01 f202 	lsl.w	r2, r1, r2
 8000c46:	4611      	mov	r1, r2
 8000c48:	4a53      	ldr	r2, [pc, #332]	; (8000d98 <MGPIO_vSetOutputPinValueBSR+0x1bc>)
 8000c4a:	430b      	orrs	r3, r1
 8000c4c:	6193      	str	r3, [r2, #24]
		break;
 8000c4e:	e091      	b.n	8000d74 <MGPIO_vSetOutputPinValueBSR+0x198>
	case PORTB:
		if (copy_GPIO_BS == SET)
 8000c50:	797b      	ldrb	r3, [r7, #5]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d10a      	bne.n	8000c6c <MGPIO_vSetOutputPinValueBSR+0x90>
		{
			GPIOB->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8000c56:	4b51      	ldr	r3, [pc, #324]	; (8000d9c <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	79ba      	ldrb	r2, [r7, #6]
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c62:	4611      	mov	r1, r2
 8000c64:	4a4d      	ldr	r2, [pc, #308]	; (8000d9c <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000c66:	430b      	orrs	r3, r1
 8000c68:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOB->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 8000c6a:	e085      	b.n	8000d78 <MGPIO_vSetOutputPinValueBSR+0x19c>
		else if(copy_GPIO_BS == RESET)
 8000c6c:	797b      	ldrb	r3, [r7, #5]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f040 8082 	bne.w	8000d78 <MGPIO_vSetOutputPinValueBSR+0x19c>
			GPIOB->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000c74:	4b49      	ldr	r3, [pc, #292]	; (8000d9c <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	79ba      	ldrb	r2, [r7, #6]
 8000c7a:	3210      	adds	r2, #16
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c82:	4611      	mov	r1, r2
 8000c84:	4a45      	ldr	r2, [pc, #276]	; (8000d9c <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000c86:	430b      	orrs	r3, r1
 8000c88:	6193      	str	r3, [r2, #24]
		}		break;
 8000c8a:	e075      	b.n	8000d78 <MGPIO_vSetOutputPinValueBSR+0x19c>
	case PORTC:
		if (copy_GPIO_BS == SET)
 8000c8c:	797b      	ldrb	r3, [r7, #5]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d10a      	bne.n	8000ca8 <MGPIO_vSetOutputPinValueBSR+0xcc>
		{
			GPIOB->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8000c92:	4b42      	ldr	r3, [pc, #264]	; (8000d9c <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	79ba      	ldrb	r2, [r7, #6]
 8000c98:	2101      	movs	r1, #1
 8000c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	4a3e      	ldr	r2, [pc, #248]	; (8000d9c <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000ca2:	430b      	orrs	r3, r1
 8000ca4:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOB->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 8000ca6:	e069      	b.n	8000d7c <MGPIO_vSetOutputPinValueBSR+0x1a0>
		else if(copy_GPIO_BS == RESET)
 8000ca8:	797b      	ldrb	r3, [r7, #5]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d166      	bne.n	8000d7c <MGPIO_vSetOutputPinValueBSR+0x1a0>
			GPIOB->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000cae:	4b3b      	ldr	r3, [pc, #236]	; (8000d9c <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	79ba      	ldrb	r2, [r7, #6]
 8000cb4:	3210      	adds	r2, #16
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cbc:	4611      	mov	r1, r2
 8000cbe:	4a37      	ldr	r2, [pc, #220]	; (8000d9c <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000cc0:	430b      	orrs	r3, r1
 8000cc2:	6193      	str	r3, [r2, #24]
		}		break;
 8000cc4:	e05a      	b.n	8000d7c <MGPIO_vSetOutputPinValueBSR+0x1a0>
	case PORTD:
		if (copy_GPIO_BS == SET)
 8000cc6:	797b      	ldrb	r3, [r7, #5]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d10a      	bne.n	8000ce2 <MGPIO_vSetOutputPinValueBSR+0x106>
		{
			GPIOD->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8000ccc:	4b34      	ldr	r3, [pc, #208]	; (8000da0 <MGPIO_vSetOutputPinValueBSR+0x1c4>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	79ba      	ldrb	r2, [r7, #6]
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cd8:	4611      	mov	r1, r2
 8000cda:	4a31      	ldr	r2, [pc, #196]	; (8000da0 <MGPIO_vSetOutputPinValueBSR+0x1c4>)
 8000cdc:	430b      	orrs	r3, r1
 8000cde:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOD->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 8000ce0:	e04e      	b.n	8000d80 <MGPIO_vSetOutputPinValueBSR+0x1a4>
		else if(copy_GPIO_BS == RESET)
 8000ce2:	797b      	ldrb	r3, [r7, #5]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14b      	bne.n	8000d80 <MGPIO_vSetOutputPinValueBSR+0x1a4>
			GPIOD->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000ce8:	4b2d      	ldr	r3, [pc, #180]	; (8000da0 <MGPIO_vSetOutputPinValueBSR+0x1c4>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	79ba      	ldrb	r2, [r7, #6]
 8000cee:	3210      	adds	r2, #16
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	4a29      	ldr	r2, [pc, #164]	; (8000da0 <MGPIO_vSetOutputPinValueBSR+0x1c4>)
 8000cfa:	430b      	orrs	r3, r1
 8000cfc:	6193      	str	r3, [r2, #24]
		}		break;
 8000cfe:	e03f      	b.n	8000d80 <MGPIO_vSetOutputPinValueBSR+0x1a4>
	case PORTE:
		if (copy_GPIO_BS == SET)
 8000d00:	797b      	ldrb	r3, [r7, #5]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d10a      	bne.n	8000d1c <MGPIO_vSetOutputPinValueBSR+0x140>
		{
			GPIOE->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8000d06:	4b27      	ldr	r3, [pc, #156]	; (8000da4 <MGPIO_vSetOutputPinValueBSR+0x1c8>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	79ba      	ldrb	r2, [r7, #6]
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d12:	4611      	mov	r1, r2
 8000d14:	4a23      	ldr	r2, [pc, #140]	; (8000da4 <MGPIO_vSetOutputPinValueBSR+0x1c8>)
 8000d16:	430b      	orrs	r3, r1
 8000d18:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOE->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 8000d1a:	e033      	b.n	8000d84 <MGPIO_vSetOutputPinValueBSR+0x1a8>
		else if(copy_GPIO_BS == RESET)
 8000d1c:	797b      	ldrb	r3, [r7, #5]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d130      	bne.n	8000d84 <MGPIO_vSetOutputPinValueBSR+0x1a8>
			GPIOE->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000d22:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <MGPIO_vSetOutputPinValueBSR+0x1c8>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	79ba      	ldrb	r2, [r7, #6]
 8000d28:	3210      	adds	r2, #16
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d30:	4611      	mov	r1, r2
 8000d32:	4a1c      	ldr	r2, [pc, #112]	; (8000da4 <MGPIO_vSetOutputPinValueBSR+0x1c8>)
 8000d34:	430b      	orrs	r3, r1
 8000d36:	6193      	str	r3, [r2, #24]
		}		break;
 8000d38:	e024      	b.n	8000d84 <MGPIO_vSetOutputPinValueBSR+0x1a8>
	case PORTH:
		if (copy_GPIO_BS == SET)
 8000d3a:	797b      	ldrb	r3, [r7, #5]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d10a      	bne.n	8000d56 <MGPIO_vSetOutputPinValueBSR+0x17a>
		{
			GPIOH->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8000d40:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <MGPIO_vSetOutputPinValueBSR+0x1cc>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	79ba      	ldrb	r2, [r7, #6]
 8000d46:	2101      	movs	r1, #1
 8000d48:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4a16      	ldr	r2, [pc, #88]	; (8000da8 <MGPIO_vSetOutputPinValueBSR+0x1cc>)
 8000d50:	430b      	orrs	r3, r1
 8000d52:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOH->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 8000d54:	e018      	b.n	8000d88 <MGPIO_vSetOutputPinValueBSR+0x1ac>
		else if(copy_GPIO_BS == RESET)
 8000d56:	797b      	ldrb	r3, [r7, #5]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d115      	bne.n	8000d88 <MGPIO_vSetOutputPinValueBSR+0x1ac>
			GPIOH->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <MGPIO_vSetOutputPinValueBSR+0x1cc>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	79ba      	ldrb	r2, [r7, #6]
 8000d62:	3210      	adds	r2, #16
 8000d64:	2101      	movs	r1, #1
 8000d66:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4a0e      	ldr	r2, [pc, #56]	; (8000da8 <MGPIO_vSetOutputPinValueBSR+0x1cc>)
 8000d6e:	430b      	orrs	r3, r1
 8000d70:	6193      	str	r3, [r2, #24]
		}		break;
 8000d72:	e009      	b.n	8000d88 <MGPIO_vSetOutputPinValueBSR+0x1ac>
		break;
 8000d74:	bf00      	nop
 8000d76:	e008      	b.n	8000d8a <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 8000d78:	bf00      	nop
 8000d7a:	e006      	b.n	8000d8a <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 8000d7c:	bf00      	nop
 8000d7e:	e004      	b.n	8000d8a <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 8000d80:	bf00      	nop
 8000d82:	e002      	b.n	8000d8a <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 8000d84:	bf00      	nop
 8000d86:	e000      	b.n	8000d8a <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 8000d88:	bf00      	nop
	}

}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	40020000 	.word	0x40020000
 8000d9c:	40020400 	.word	0x40020400
 8000da0:	40020c00 	.word	0x40020c00
 8000da4:	40021000 	.word	0x40021000
 8000da8:	40021c00 	.word	0x40021c00

08000dac <MGPIO_vSetPinLockSTS>:
void MGPIO_vSetPinLockSTS(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_LCK_t copy_GPIO_LCK)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
 8000db6:	460b      	mov	r3, r1
 8000db8:	71bb      	strb	r3, [r7, #6]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	2b05      	cmp	r3, #5
 8000dc2:	f200 8093 	bhi.w	8000eec <MGPIO_vSetPinLockSTS+0x140>
 8000dc6:	a201      	add	r2, pc, #4	; (adr r2, 8000dcc <MGPIO_vSetPinLockSTS+0x20>)
 8000dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dcc:	08000de5 	.word	0x08000de5
 8000dd0:	08000e11 	.word	0x08000e11
 8000dd4:	08000e3d 	.word	0x08000e3d
 8000dd8:	08000e69 	.word	0x08000e69
 8000ddc:	08000e95 	.word	0x08000e95
 8000de0:	08000ec1 	.word	0x08000ec1
	{
	case PORTA:
		GPIOA->GPIO_LCKR &= ~(0b1<<copy_eGPIO_Pin);
 8000de4:	4b44      	ldr	r3, [pc, #272]	; (8000ef8 <MGPIO_vSetPinLockSTS+0x14c>)
 8000de6:	69db      	ldr	r3, [r3, #28]
 8000de8:	79ba      	ldrb	r2, [r7, #6]
 8000dea:	2101      	movs	r1, #1
 8000dec:	fa01 f202 	lsl.w	r2, r1, r2
 8000df0:	43d2      	mvns	r2, r2
 8000df2:	4611      	mov	r1, r2
 8000df4:	4a40      	ldr	r2, [pc, #256]	; (8000ef8 <MGPIO_vSetPinLockSTS+0x14c>)
 8000df6:	400b      	ands	r3, r1
 8000df8:	61d3      	str	r3, [r2, #28]
		GPIOA->GPIO_LCKR |= (copy_GPIO_LCK<<copy_eGPIO_Pin);
 8000dfa:	4b3f      	ldr	r3, [pc, #252]	; (8000ef8 <MGPIO_vSetPinLockSTS+0x14c>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	7979      	ldrb	r1, [r7, #5]
 8000e00:	79ba      	ldrb	r2, [r7, #6]
 8000e02:	fa01 f202 	lsl.w	r2, r1, r2
 8000e06:	4611      	mov	r1, r2
 8000e08:	4a3b      	ldr	r2, [pc, #236]	; (8000ef8 <MGPIO_vSetPinLockSTS+0x14c>)
 8000e0a:	430b      	orrs	r3, r1
 8000e0c:	61d3      	str	r3, [r2, #28]
		break;
 8000e0e:	e06d      	b.n	8000eec <MGPIO_vSetPinLockSTS+0x140>
	case PORTB:
		GPIOB->GPIO_LCKR &= ~(0b1<<copy_eGPIO_Pin);
 8000e10:	4b3a      	ldr	r3, [pc, #232]	; (8000efc <MGPIO_vSetPinLockSTS+0x150>)
 8000e12:	69db      	ldr	r3, [r3, #28]
 8000e14:	79ba      	ldrb	r2, [r7, #6]
 8000e16:	2101      	movs	r1, #1
 8000e18:	fa01 f202 	lsl.w	r2, r1, r2
 8000e1c:	43d2      	mvns	r2, r2
 8000e1e:	4611      	mov	r1, r2
 8000e20:	4a36      	ldr	r2, [pc, #216]	; (8000efc <MGPIO_vSetPinLockSTS+0x150>)
 8000e22:	400b      	ands	r3, r1
 8000e24:	61d3      	str	r3, [r2, #28]
		GPIOB->GPIO_LCKR |= (copy_GPIO_LCK<<copy_eGPIO_Pin);
 8000e26:	4b35      	ldr	r3, [pc, #212]	; (8000efc <MGPIO_vSetPinLockSTS+0x150>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	7979      	ldrb	r1, [r7, #5]
 8000e2c:	79ba      	ldrb	r2, [r7, #6]
 8000e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e32:	4611      	mov	r1, r2
 8000e34:	4a31      	ldr	r2, [pc, #196]	; (8000efc <MGPIO_vSetPinLockSTS+0x150>)
 8000e36:	430b      	orrs	r3, r1
 8000e38:	61d3      	str	r3, [r2, #28]
		break;
 8000e3a:	e057      	b.n	8000eec <MGPIO_vSetPinLockSTS+0x140>
	case PORTC:
		GPIOC->GPIO_LCKR &= ~(0b1<<copy_eGPIO_Pin);
 8000e3c:	4b30      	ldr	r3, [pc, #192]	; (8000f00 <MGPIO_vSetPinLockSTS+0x154>)
 8000e3e:	69db      	ldr	r3, [r3, #28]
 8000e40:	79ba      	ldrb	r2, [r7, #6]
 8000e42:	2101      	movs	r1, #1
 8000e44:	fa01 f202 	lsl.w	r2, r1, r2
 8000e48:	43d2      	mvns	r2, r2
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4a2c      	ldr	r2, [pc, #176]	; (8000f00 <MGPIO_vSetPinLockSTS+0x154>)
 8000e4e:	400b      	ands	r3, r1
 8000e50:	61d3      	str	r3, [r2, #28]
		GPIOC->GPIO_LCKR |= (copy_GPIO_LCK<<copy_eGPIO_Pin);
 8000e52:	4b2b      	ldr	r3, [pc, #172]	; (8000f00 <MGPIO_vSetPinLockSTS+0x154>)
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	7979      	ldrb	r1, [r7, #5]
 8000e58:	79ba      	ldrb	r2, [r7, #6]
 8000e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4a27      	ldr	r2, [pc, #156]	; (8000f00 <MGPIO_vSetPinLockSTS+0x154>)
 8000e62:	430b      	orrs	r3, r1
 8000e64:	61d3      	str	r3, [r2, #28]
		break;
 8000e66:	e041      	b.n	8000eec <MGPIO_vSetPinLockSTS+0x140>
	case PORTD:
		GPIOD->GPIO_LCKR &= ~(0b1<<copy_eGPIO_Pin);
 8000e68:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <MGPIO_vSetPinLockSTS+0x158>)
 8000e6a:	69db      	ldr	r3, [r3, #28]
 8000e6c:	79ba      	ldrb	r2, [r7, #6]
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fa01 f202 	lsl.w	r2, r1, r2
 8000e74:	43d2      	mvns	r2, r2
 8000e76:	4611      	mov	r1, r2
 8000e78:	4a22      	ldr	r2, [pc, #136]	; (8000f04 <MGPIO_vSetPinLockSTS+0x158>)
 8000e7a:	400b      	ands	r3, r1
 8000e7c:	61d3      	str	r3, [r2, #28]
		GPIOD->GPIO_LCKR |= (copy_GPIO_LCK<<copy_eGPIO_Pin);
 8000e7e:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <MGPIO_vSetPinLockSTS+0x158>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	7979      	ldrb	r1, [r7, #5]
 8000e84:	79ba      	ldrb	r2, [r7, #6]
 8000e86:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	4a1d      	ldr	r2, [pc, #116]	; (8000f04 <MGPIO_vSetPinLockSTS+0x158>)
 8000e8e:	430b      	orrs	r3, r1
 8000e90:	61d3      	str	r3, [r2, #28]
		break;
 8000e92:	e02b      	b.n	8000eec <MGPIO_vSetPinLockSTS+0x140>
	case PORTE:
		GPIOE->GPIO_LCKR &= ~(0b1<<copy_eGPIO_Pin);
 8000e94:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <MGPIO_vSetPinLockSTS+0x15c>)
 8000e96:	69db      	ldr	r3, [r3, #28]
 8000e98:	79ba      	ldrb	r2, [r7, #6]
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea0:	43d2      	mvns	r2, r2
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4a18      	ldr	r2, [pc, #96]	; (8000f08 <MGPIO_vSetPinLockSTS+0x15c>)
 8000ea6:	400b      	ands	r3, r1
 8000ea8:	61d3      	str	r3, [r2, #28]
		GPIOE->GPIO_LCKR |= (copy_GPIO_LCK<<copy_eGPIO_Pin);
 8000eaa:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <MGPIO_vSetPinLockSTS+0x15c>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	7979      	ldrb	r1, [r7, #5]
 8000eb0:	79ba      	ldrb	r2, [r7, #6]
 8000eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	4a13      	ldr	r2, [pc, #76]	; (8000f08 <MGPIO_vSetPinLockSTS+0x15c>)
 8000eba:	430b      	orrs	r3, r1
 8000ebc:	61d3      	str	r3, [r2, #28]
		break;
 8000ebe:	e015      	b.n	8000eec <MGPIO_vSetPinLockSTS+0x140>
	case PORTH:
		GPIOH->GPIO_LCKR &= ~(0b1<<copy_eGPIO_Pin);
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <MGPIO_vSetPinLockSTS+0x160>)
 8000ec2:	69db      	ldr	r3, [r3, #28]
 8000ec4:	79ba      	ldrb	r2, [r7, #6]
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ecc:	43d2      	mvns	r2, r2
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <MGPIO_vSetPinLockSTS+0x160>)
 8000ed2:	400b      	ands	r3, r1
 8000ed4:	61d3      	str	r3, [r2, #28]
		GPIOH->GPIO_LCKR |= (copy_GPIO_LCK<<copy_eGPIO_Pin);
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <MGPIO_vSetPinLockSTS+0x160>)
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	7979      	ldrb	r1, [r7, #5]
 8000edc:	79ba      	ldrb	r2, [r7, #6]
 8000ede:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4a09      	ldr	r2, [pc, #36]	; (8000f0c <MGPIO_vSetPinLockSTS+0x160>)
 8000ee6:	430b      	orrs	r3, r1
 8000ee8:	61d3      	str	r3, [r2, #28]
		break;
 8000eea:	bf00      	nop
	}

}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	40020000 	.word	0x40020000
 8000efc:	40020400 	.word	0x40020400
 8000f00:	40020800 	.word	0x40020800
 8000f04:	40020c00 	.word	0x40020c00
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40021c00 	.word	0x40021c00

08000f10 <MGPIO_vSetPinAlternativeFunction>:
void MGPIO_vSetPinAlternativeFunction(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_AF_t copy_GPIO_AF)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	71bb      	strb	r3, [r7, #6]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b05      	cmp	r3, #5
 8000f26:	f200 8117 	bhi.w	8001158 <MGPIO_vSetPinAlternativeFunction+0x248>
 8000f2a:	a201      	add	r2, pc, #4	; (adr r2, 8000f30 <MGPIO_vSetPinAlternativeFunction+0x20>)
 8000f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f30:	08000f49 	.word	0x08000f49
 8000f34:	08000fa1 	.word	0x08000fa1
 8000f38:	08000ff9 	.word	0x08000ff9
 8000f3c:	08001051 	.word	0x08001051
 8000f40:	080010a9 	.word	0x080010a9
 8000f44:	08001101 	.word	0x08001101
	{
	case PORTA:
		GPIOA->GPIO_AFR[copy_eGPIO_Pin/8] &= ~(0b1111	   <<(copy_eGPIO_Pin %8)*4);
 8000f48:	4a86      	ldr	r2, [pc, #536]	; (8001164 <MGPIO_vSetPinAlternativeFunction+0x254>)
 8000f4a:	79bb      	ldrb	r3, [r7, #6]
 8000f4c:	08db      	lsrs	r3, r3, #3
 8000f4e:	b2d8      	uxtb	r0, r3
 8000f50:	4603      	mov	r3, r0
 8000f52:	3308      	adds	r3, #8
 8000f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f58:	79ba      	ldrb	r2, [r7, #6]
 8000f5a:	f002 0207 	and.w	r2, r2, #7
 8000f5e:	0092      	lsls	r2, r2, #2
 8000f60:	210f      	movs	r1, #15
 8000f62:	fa01 f202 	lsl.w	r2, r1, r2
 8000f66:	43d2      	mvns	r2, r2
 8000f68:	497e      	ldr	r1, [pc, #504]	; (8001164 <MGPIO_vSetPinAlternativeFunction+0x254>)
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	f100 0308 	add.w	r3, r0, #8
 8000f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		GPIOA->GPIO_AFR[copy_eGPIO_Pin/8] |= (copy_GPIO_AF <<(copy_eGPIO_Pin %8)*4);
 8000f74:	4a7b      	ldr	r2, [pc, #492]	; (8001164 <MGPIO_vSetPinAlternativeFunction+0x254>)
 8000f76:	79bb      	ldrb	r3, [r7, #6]
 8000f78:	08db      	lsrs	r3, r3, #3
 8000f7a:	b2d8      	uxtb	r0, r3
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	3308      	adds	r3, #8
 8000f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f84:	7979      	ldrb	r1, [r7, #5]
 8000f86:	79ba      	ldrb	r2, [r7, #6]
 8000f88:	f002 0207 	and.w	r2, r2, #7
 8000f8c:	0092      	lsls	r2, r2, #2
 8000f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f92:	4974      	ldr	r1, [pc, #464]	; (8001164 <MGPIO_vSetPinAlternativeFunction+0x254>)
 8000f94:	431a      	orrs	r2, r3
 8000f96:	f100 0308 	add.w	r3, r0, #8
 8000f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		break;
 8000f9e:	e0db      	b.n	8001158 <MGPIO_vSetPinAlternativeFunction+0x248>
	case PORTB:
		GPIOB->GPIO_AFR[copy_eGPIO_Pin/8] &= ~(0b1111	   <<(copy_eGPIO_Pin %8)*4);
 8000fa0:	4a71      	ldr	r2, [pc, #452]	; (8001168 <MGPIO_vSetPinAlternativeFunction+0x258>)
 8000fa2:	79bb      	ldrb	r3, [r7, #6]
 8000fa4:	08db      	lsrs	r3, r3, #3
 8000fa6:	b2d8      	uxtb	r0, r3
 8000fa8:	4603      	mov	r3, r0
 8000faa:	3308      	adds	r3, #8
 8000fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb0:	79ba      	ldrb	r2, [r7, #6]
 8000fb2:	f002 0207 	and.w	r2, r2, #7
 8000fb6:	0092      	lsls	r2, r2, #2
 8000fb8:	210f      	movs	r1, #15
 8000fba:	fa01 f202 	lsl.w	r2, r1, r2
 8000fbe:	43d2      	mvns	r2, r2
 8000fc0:	4969      	ldr	r1, [pc, #420]	; (8001168 <MGPIO_vSetPinAlternativeFunction+0x258>)
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	f100 0308 	add.w	r3, r0, #8
 8000fc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		GPIOB->GPIO_AFR[copy_eGPIO_Pin/8] |= (copy_GPIO_AF <<(copy_eGPIO_Pin %8)*4);
 8000fcc:	4a66      	ldr	r2, [pc, #408]	; (8001168 <MGPIO_vSetPinAlternativeFunction+0x258>)
 8000fce:	79bb      	ldrb	r3, [r7, #6]
 8000fd0:	08db      	lsrs	r3, r3, #3
 8000fd2:	b2d8      	uxtb	r0, r3
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	3308      	adds	r3, #8
 8000fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fdc:	7979      	ldrb	r1, [r7, #5]
 8000fde:	79ba      	ldrb	r2, [r7, #6]
 8000fe0:	f002 0207 	and.w	r2, r2, #7
 8000fe4:	0092      	lsls	r2, r2, #2
 8000fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fea:	495f      	ldr	r1, [pc, #380]	; (8001168 <MGPIO_vSetPinAlternativeFunction+0x258>)
 8000fec:	431a      	orrs	r2, r3
 8000fee:	f100 0308 	add.w	r3, r0, #8
 8000ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8000ff6:	e0af      	b.n	8001158 <MGPIO_vSetPinAlternativeFunction+0x248>
	case PORTC:
		GPIOC->GPIO_AFR[copy_eGPIO_Pin/8] &= ~(0b1111	   <<(copy_eGPIO_Pin %8)*4);
 8000ff8:	4a5c      	ldr	r2, [pc, #368]	; (800116c <MGPIO_vSetPinAlternativeFunction+0x25c>)
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	08db      	lsrs	r3, r3, #3
 8000ffe:	b2d8      	uxtb	r0, r3
 8001000:	4603      	mov	r3, r0
 8001002:	3308      	adds	r3, #8
 8001004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001008:	79ba      	ldrb	r2, [r7, #6]
 800100a:	f002 0207 	and.w	r2, r2, #7
 800100e:	0092      	lsls	r2, r2, #2
 8001010:	210f      	movs	r1, #15
 8001012:	fa01 f202 	lsl.w	r2, r1, r2
 8001016:	43d2      	mvns	r2, r2
 8001018:	4954      	ldr	r1, [pc, #336]	; (800116c <MGPIO_vSetPinAlternativeFunction+0x25c>)
 800101a:	401a      	ands	r2, r3
 800101c:	f100 0308 	add.w	r3, r0, #8
 8001020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		GPIOC->GPIO_AFR[copy_eGPIO_Pin/8] |= (copy_GPIO_AF <<(copy_eGPIO_Pin %8)*4);
 8001024:	4a51      	ldr	r2, [pc, #324]	; (800116c <MGPIO_vSetPinAlternativeFunction+0x25c>)
 8001026:	79bb      	ldrb	r3, [r7, #6]
 8001028:	08db      	lsrs	r3, r3, #3
 800102a:	b2d8      	uxtb	r0, r3
 800102c:	4603      	mov	r3, r0
 800102e:	3308      	adds	r3, #8
 8001030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001034:	7979      	ldrb	r1, [r7, #5]
 8001036:	79ba      	ldrb	r2, [r7, #6]
 8001038:	f002 0207 	and.w	r2, r2, #7
 800103c:	0092      	lsls	r2, r2, #2
 800103e:	fa01 f202 	lsl.w	r2, r1, r2
 8001042:	494a      	ldr	r1, [pc, #296]	; (800116c <MGPIO_vSetPinAlternativeFunction+0x25c>)
 8001044:	431a      	orrs	r2, r3
 8001046:	f100 0308 	add.w	r3, r0, #8
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 800104e:	e083      	b.n	8001158 <MGPIO_vSetPinAlternativeFunction+0x248>
	case PORTD:
		GPIOD->GPIO_AFR[copy_eGPIO_Pin/8] &= ~(0b1111	   <<(copy_eGPIO_Pin %8)*4);
 8001050:	4a47      	ldr	r2, [pc, #284]	; (8001170 <MGPIO_vSetPinAlternativeFunction+0x260>)
 8001052:	79bb      	ldrb	r3, [r7, #6]
 8001054:	08db      	lsrs	r3, r3, #3
 8001056:	b2d8      	uxtb	r0, r3
 8001058:	4603      	mov	r3, r0
 800105a:	3308      	adds	r3, #8
 800105c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001060:	79ba      	ldrb	r2, [r7, #6]
 8001062:	f002 0207 	and.w	r2, r2, #7
 8001066:	0092      	lsls	r2, r2, #2
 8001068:	210f      	movs	r1, #15
 800106a:	fa01 f202 	lsl.w	r2, r1, r2
 800106e:	43d2      	mvns	r2, r2
 8001070:	493f      	ldr	r1, [pc, #252]	; (8001170 <MGPIO_vSetPinAlternativeFunction+0x260>)
 8001072:	401a      	ands	r2, r3
 8001074:	f100 0308 	add.w	r3, r0, #8
 8001078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		GPIOD->GPIO_AFR[copy_eGPIO_Pin/8] |= (copy_GPIO_AF <<(copy_eGPIO_Pin %8)*4);
 800107c:	4a3c      	ldr	r2, [pc, #240]	; (8001170 <MGPIO_vSetPinAlternativeFunction+0x260>)
 800107e:	79bb      	ldrb	r3, [r7, #6]
 8001080:	08db      	lsrs	r3, r3, #3
 8001082:	b2d8      	uxtb	r0, r3
 8001084:	4603      	mov	r3, r0
 8001086:	3308      	adds	r3, #8
 8001088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108c:	7979      	ldrb	r1, [r7, #5]
 800108e:	79ba      	ldrb	r2, [r7, #6]
 8001090:	f002 0207 	and.w	r2, r2, #7
 8001094:	0092      	lsls	r2, r2, #2
 8001096:	fa01 f202 	lsl.w	r2, r1, r2
 800109a:	4935      	ldr	r1, [pc, #212]	; (8001170 <MGPIO_vSetPinAlternativeFunction+0x260>)
 800109c:	431a      	orrs	r2, r3
 800109e:	f100 0308 	add.w	r3, r0, #8
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 80010a6:	e057      	b.n	8001158 <MGPIO_vSetPinAlternativeFunction+0x248>
	case PORTE:
		GPIOE->GPIO_AFR[copy_eGPIO_Pin/8] &= ~(0b1111	   <<(copy_eGPIO_Pin %8)*4);
 80010a8:	4a32      	ldr	r2, [pc, #200]	; (8001174 <MGPIO_vSetPinAlternativeFunction+0x264>)
 80010aa:	79bb      	ldrb	r3, [r7, #6]
 80010ac:	08db      	lsrs	r3, r3, #3
 80010ae:	b2d8      	uxtb	r0, r3
 80010b0:	4603      	mov	r3, r0
 80010b2:	3308      	adds	r3, #8
 80010b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b8:	79ba      	ldrb	r2, [r7, #6]
 80010ba:	f002 0207 	and.w	r2, r2, #7
 80010be:	0092      	lsls	r2, r2, #2
 80010c0:	210f      	movs	r1, #15
 80010c2:	fa01 f202 	lsl.w	r2, r1, r2
 80010c6:	43d2      	mvns	r2, r2
 80010c8:	492a      	ldr	r1, [pc, #168]	; (8001174 <MGPIO_vSetPinAlternativeFunction+0x264>)
 80010ca:	401a      	ands	r2, r3
 80010cc:	f100 0308 	add.w	r3, r0, #8
 80010d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		GPIOE->GPIO_AFR[copy_eGPIO_Pin/8] |= (copy_GPIO_AF <<(copy_eGPIO_Pin %8)*4);
 80010d4:	4a27      	ldr	r2, [pc, #156]	; (8001174 <MGPIO_vSetPinAlternativeFunction+0x264>)
 80010d6:	79bb      	ldrb	r3, [r7, #6]
 80010d8:	08db      	lsrs	r3, r3, #3
 80010da:	b2d8      	uxtb	r0, r3
 80010dc:	4603      	mov	r3, r0
 80010de:	3308      	adds	r3, #8
 80010e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e4:	7979      	ldrb	r1, [r7, #5]
 80010e6:	79ba      	ldrb	r2, [r7, #6]
 80010e8:	f002 0207 	and.w	r2, r2, #7
 80010ec:	0092      	lsls	r2, r2, #2
 80010ee:	fa01 f202 	lsl.w	r2, r1, r2
 80010f2:	4920      	ldr	r1, [pc, #128]	; (8001174 <MGPIO_vSetPinAlternativeFunction+0x264>)
 80010f4:	431a      	orrs	r2, r3
 80010f6:	f100 0308 	add.w	r3, r0, #8
 80010fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 80010fe:	e02b      	b.n	8001158 <MGPIO_vSetPinAlternativeFunction+0x248>
	case PORTH:
		GPIOH->GPIO_AFR[copy_eGPIO_Pin/8] &= ~(0b1111	   <<(copy_eGPIO_Pin %8)*4);
 8001100:	4a1d      	ldr	r2, [pc, #116]	; (8001178 <MGPIO_vSetPinAlternativeFunction+0x268>)
 8001102:	79bb      	ldrb	r3, [r7, #6]
 8001104:	08db      	lsrs	r3, r3, #3
 8001106:	b2d8      	uxtb	r0, r3
 8001108:	4603      	mov	r3, r0
 800110a:	3308      	adds	r3, #8
 800110c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001110:	79ba      	ldrb	r2, [r7, #6]
 8001112:	f002 0207 	and.w	r2, r2, #7
 8001116:	0092      	lsls	r2, r2, #2
 8001118:	210f      	movs	r1, #15
 800111a:	fa01 f202 	lsl.w	r2, r1, r2
 800111e:	43d2      	mvns	r2, r2
 8001120:	4915      	ldr	r1, [pc, #84]	; (8001178 <MGPIO_vSetPinAlternativeFunction+0x268>)
 8001122:	401a      	ands	r2, r3
 8001124:	f100 0308 	add.w	r3, r0, #8
 8001128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		GPIOH->GPIO_AFR[copy_eGPIO_Pin/8] |= (copy_GPIO_AF <<(copy_eGPIO_Pin %8)*4);
 800112c:	4a12      	ldr	r2, [pc, #72]	; (8001178 <MGPIO_vSetPinAlternativeFunction+0x268>)
 800112e:	79bb      	ldrb	r3, [r7, #6]
 8001130:	08db      	lsrs	r3, r3, #3
 8001132:	b2d8      	uxtb	r0, r3
 8001134:	4603      	mov	r3, r0
 8001136:	3308      	adds	r3, #8
 8001138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113c:	7979      	ldrb	r1, [r7, #5]
 800113e:	79ba      	ldrb	r2, [r7, #6]
 8001140:	f002 0207 	and.w	r2, r2, #7
 8001144:	0092      	lsls	r2, r2, #2
 8001146:	fa01 f202 	lsl.w	r2, r1, r2
 800114a:	490b      	ldr	r1, [pc, #44]	; (8001178 <MGPIO_vSetPinAlternativeFunction+0x268>)
 800114c:	431a      	orrs	r2, r3
 800114e:	f100 0308 	add.w	r3, r0, #8
 8001152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8001156:	bf00      	nop
	}


}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	40020000 	.word	0x40020000
 8001168:	40020400 	.word	0x40020400
 800116c:	40020800 	.word	0x40020800
 8001170:	40020c00 	.word	0x40020c00
 8001174:	40021000 	.word	0x40021000
 8001178:	40021c00 	.word	0x40021c00

0800117c <RCC_AHB1EnableCLK>:
	RCC->RCC_CR&= ~(1<<CSSON);
	RCC->RCC_CR|=(copy_eClock_detector<<CSSON);
}

void RCC_AHB1EnableCLK(PeripheralAHB1_t peripheral)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
	SET_BIT(RCC->RCC_AHB1ENR,peripheral);
 8001186:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <RCC_AHB1EnableCLK+0x2c>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	79fa      	ldrb	r2, [r7, #7]
 800118c:	2101      	movs	r1, #1
 800118e:	fa01 f202 	lsl.w	r2, r1, r2
 8001192:	4611      	mov	r1, r2
 8001194:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <RCC_AHB1EnableCLK+0x2c>)
 8001196:	430b      	orrs	r3, r1
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800

080011ac <RCC_APB2EnableCLK>:
	CLEAR_BIT(RCC->RCC_APB1ENR,peripheral);

}

void RCC_APB2EnableCLK(PeripheralAPB2_t peripheral)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
	SET_BIT(RCC->RCC_APB2ENR,peripheral);
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <RCC_APB2EnableCLK+0x2c>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	79fa      	ldrb	r2, [r7, #7]
 80011bc:	2101      	movs	r1, #1
 80011be:	fa01 f202 	lsl.w	r2, r1, r2
 80011c2:	4611      	mov	r1, r2
 80011c4:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <RCC_APB2EnableCLK+0x2c>)
 80011c6:	430b      	orrs	r3, r1
 80011c8:	6453      	str	r3, [r2, #68]	; 0x44

}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800

080011dc <RCC_AHB1LPEnableCLK>:

}


void RCC_AHB1LPEnableCLK(PeripheralAHBLP1_t peripheral)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
	SET_BIT(RCC->RCC_AHB1LPENR,peripheral);
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <RCC_AHB1LPEnableCLK+0x2c>)
 80011e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011ea:	79fa      	ldrb	r2, [r7, #7]
 80011ec:	2101      	movs	r1, #1
 80011ee:	fa01 f202 	lsl.w	r2, r1, r2
 80011f2:	4611      	mov	r1, r2
 80011f4:	4a04      	ldr	r2, [pc, #16]	; (8001208 <RCC_AHB1LPEnableCLK+0x2c>)
 80011f6:	430b      	orrs	r3, r1
 80011f8:	6513      	str	r3, [r2, #80]	; 0x50
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800

0800120c <SysTick_Handler>:
#include "SysTick_Interface.h"
STK_Callback_t Global_SysTickCallback;
Interval_t Global_Interval;

void SysTick_Handler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	if (Global_Interval == Interval_Single)
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <SysTick_Handler+0x2c>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d105      	bne.n	8001224 <SysTick_Handler+0x18>
	{
		//disable counter
		CLEAR_BIT(MSTK->STK_CTRL,ENABLE);
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <SysTick_Handler+0x30>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a07      	ldr	r2, [pc, #28]	; (800123c <SysTick_Handler+0x30>)
 800121e:	f023 0301 	bic.w	r3, r3, #1
 8001222:	6013      	str	r3, [r2, #0]
	}
	if (Global_SysTickCallback != 0)
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <SysTick_Handler+0x34>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d002      	beq.n	8001232 <SysTick_Handler+0x26>
	{
		Global_SysTickCallback();
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <SysTick_Handler+0x34>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4798      	blx	r3
	}
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000128 	.word	0x20000128
 800123c:	e000e010 	.word	0xe000e010
 8001240:	20000124 	.word	0x20000124

08001244 <MSTK_vInit>:

void MSTK_vInit()
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
	/*1. CLK SRC*/
	CLEAR_BIT(MSTK->STK_CTRL,CLKSOURCE); // AHB/8 = 2 MHz
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <MSTK_vInit+0x28>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a07      	ldr	r2, [pc, #28]	; (800126c <MSTK_vInit+0x28>)
 800124e:	f023 0304 	bic.w	r3, r3, #4
 8001252:	6013      	str	r3, [r2, #0]

	/*2. interrupt enable  */
	SET_BIT(MSTK->STK_CTRL,TICKINT); // Enable INT
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <MSTK_vInit+0x28>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a04      	ldr	r2, [pc, #16]	; (800126c <MSTK_vInit+0x28>)
 800125a:	f043 0302 	orr.w	r3, r3, #2
 800125e:	6013      	str	r3, [r2, #0]


}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000e010 	.word	0xe000e010

08001270 <MSTK_vStopTimer>:
	MSTK->STK_LOAD=copy_u32Ticks;
	//Enable timer
	SET_BIT(MSTK->STK_CTRL,ENABLE);
}
void MSTK_vStopTimer()
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
	// reset timer value to clear count flag
	MSTK->STK_VAL = 0 ;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MSTK_vStopTimer+0x20>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]

	//disable counter
	CLEAR_BIT(MSTK->STK_CTRL,ENABLE);
 800127a:	4b05      	ldr	r3, [pc, #20]	; (8001290 <MSTK_vStopTimer+0x20>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a04      	ldr	r2, [pc, #16]	; (8001290 <MSTK_vStopTimer+0x20>)
 8001280:	f023 0301 	bic.w	r3, r3, #1
 8001284:	6013      	str	r3, [r2, #0]
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000e010 	.word	0xe000e010

08001294 <MSTK_vSetIntervalSingle>:
	// stop timer
	SET_BIT(MSTK->STK_CTRL,ENABLE);

}
void MSTK_vSetIntervalSingle(uint32_t copy_u32Ticks,STK_Callback_t copy_pSTK_Callback)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
	// callback
	Global_Interval=Interval_Single;
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <MSTK_vSetIntervalSingle+0x3c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
	Global_SysTickCallback=copy_pSTK_Callback;
 80012a4:	4a0b      	ldr	r2, [pc, #44]	; (80012d4 <MSTK_vSetIntervalSingle+0x40>)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	6013      	str	r3, [r2, #0]

	// reset timer value to clear count flag
	MSTK->STK_VAL = 0 ;
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <MSTK_vSetIntervalSingle+0x44>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]

	// load timer
	MSTK->STK_LOAD=copy_u32Ticks;
 80012b0:	4a09      	ldr	r2, [pc, #36]	; (80012d8 <MSTK_vSetIntervalSingle+0x44>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6053      	str	r3, [r2, #4]
	//Enable timer
	SET_BIT(MSTK->STK_CTRL,ENABLE);
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <MSTK_vSetIntervalSingle+0x44>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <MSTK_vSetIntervalSingle+0x44>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6013      	str	r3, [r2, #0]
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000128 	.word	0x20000128
 80012d4:	20000124 	.word	0x20000124
 80012d8:	e000e010 	.word	0xe000e010

080012dc <UART_vInit>:
 */

#include "UART_Interface.h"
#include "RCC_Interface.h"
void UART_vInit()
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	RCC_APB2EnableCLK(USART1EN);
 80012e0:	2004      	movs	r0, #4
 80012e2:	f7ff ff63 	bl	80011ac <RCC_APB2EnableCLK>
	// disable UART
	CLEAR_BIT(UART->CR1,13);
 80012e6:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <UART_vInit+0x74>)
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	4a19      	ldr	r2, [pc, #100]	; (8001350 <UART_vInit+0x74>)
 80012ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80012f0:	60d3      	str	r3, [r2, #12]
	//1 START 8 BIT N STOP
	CLEAR_BIT(UART->CR1,12);
 80012f2:	4b17      	ldr	r3, [pc, #92]	; (8001350 <UART_vInit+0x74>)
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	4a16      	ldr	r2, [pc, #88]	; (8001350 <UART_vInit+0x74>)
 80012f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012fc:	60d3      	str	r3, [r2, #12]
	//DISABLE PARITY
	CLEAR_BIT(UART->CR1,10);
 80012fe:	4b14      	ldr	r3, [pc, #80]	; (8001350 <UART_vInit+0x74>)
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	4a13      	ldr	r2, [pc, #76]	; (8001350 <UART_vInit+0x74>)
 8001304:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001308:	60d3      	str	r3, [r2, #12]
	//SET TRANSMITTER
	SET_BIT(UART->CR1,3);
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <UART_vInit+0x74>)
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	4a10      	ldr	r2, [pc, #64]	; (8001350 <UART_vInit+0x74>)
 8001310:	f043 0308 	orr.w	r3, r3, #8
 8001314:	60d3      	str	r3, [r2, #12]
	//SET RECEIVER
	SET_BIT(UART->CR1,2);
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <UART_vInit+0x74>)
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	4a0d      	ldr	r2, [pc, #52]	; (8001350 <UART_vInit+0x74>)
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	60d3      	str	r3, [r2, #12]
	// 1 STOP BIT
	UART->CR2 &= ~(0b11<<12);
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <UART_vInit+0x74>)
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <UART_vInit+0x74>)
 8001328:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800132c:	6113      	str	r3, [r2, #16]
	UART->CR2 |=  (0b00<<12);
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <UART_vInit+0x74>)
 8001330:	4a07      	ldr	r2, [pc, #28]	; (8001350 <UART_vInit+0x74>)
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	6113      	str	r3, [r2, #16]
	//  Set baud rate to 115200
	UART->BRR = 0x1117;
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <UART_vInit+0x74>)
 8001338:	f241 1217 	movw	r2, #4375	; 0x1117
 800133c:	609a      	str	r2, [r3, #8]
	//Enable UART
	SET_BIT(UART->CR1,13);
 800133e:	4b04      	ldr	r3, [pc, #16]	; (8001350 <UART_vInit+0x74>)
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	4a03      	ldr	r2, [pc, #12]	; (8001350 <UART_vInit+0x74>)
 8001344:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001348:	60d3      	str	r3, [r2, #12]
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40011000 	.word	0x40011000

08001354 <UART_ReceivePeriodicCheck>:

uint8_t UART_ReceivePeriodicCheck( char* copy_pu8Buffer)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	uint8_t Local_ReceivedFlag = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	73fb      	strb	r3, [r7, #15]
	if (READ_BIT(UART->SR,5))
 8001360:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <UART_ReceivePeriodicCheck+0x3c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	095b      	lsrs	r3, r3, #5
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b00      	cmp	r3, #0
 800136c:	d007      	beq.n	800137e <UART_ReceivePeriodicCheck+0x2a>
	{
		*copy_pu8Buffer=UART->DR;
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <UART_ReceivePeriodicCheck+0x3c>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	701a      	strb	r2, [r3, #0]
		Local_ReceivedFlag=1;
 8001378:	2301      	movs	r3, #1
 800137a:	73fb      	strb	r3, [r7, #15]
 800137c:	e001      	b.n	8001382 <UART_ReceivePeriodicCheck+0x2e>
	}
	else
	{
		Local_ReceivedFlag=0;
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]

	}
	return Local_ReceivedFlag;
 8001382:	7bfb      	ldrb	r3, [r7, #15]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	40011000 	.word	0x40011000

08001394 <UART_vSendString>:


void UART_vSendString( char* copy_pu8String)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	for (uint8_t i =0;copy_pu8String[i];i++)
 800139c:	2300      	movs	r3, #0
 800139e:	73fb      	strb	r3, [r7, #15]
 80013a0:	e010      	b.n	80013c4 <UART_vSendString+0x30>
	{
		while(READ_BIT(UART->SR,7)==0);
 80013a2:	bf00      	nop
 80013a4:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <UART_vSendString+0x4c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	09db      	lsrs	r3, r3, #7
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f8      	beq.n	80013a4 <UART_vSendString+0x10>
		UART->DR = copy_pu8String[i];
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	4413      	add	r3, r2
 80013b8:	781a      	ldrb	r2, [r3, #0]
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <UART_vSendString+0x4c>)
 80013bc:	605a      	str	r2, [r3, #4]
	for (uint8_t i =0;copy_pu8String[i];i++)
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	3301      	adds	r3, #1
 80013c2:	73fb      	strb	r3, [r7, #15]
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1e8      	bne.n	80013a2 <UART_vSendString+0xe>
	}
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40011000 	.word	0x40011000

080013e4 <SysTick_Func>:
char RX_Buffer[50] ;
uint8_t Global_UARTCounter = 0 ;
uint8_t Global_EraseFlag = 0 ;

void SysTick_Func()
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	TimeoutFlag = 1 ;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <SysTick_Func+0x20>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	701a      	strb	r2, [r3, #0]
	SCB_VTOR = 0x08004000 ; // first vector in BTLD Code
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <SysTick_Func+0x24>)
 80013f0:	4a06      	ldr	r2, [pc, #24]	; (800140c <SysTick_Func+0x28>)
 80013f2:	601a      	str	r2, [r3, #0]
	APP = (pFUNC_t) 0x08004004; // considered APP as a function
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <SysTick_Func+0x2c>)
 80013f6:	4a07      	ldr	r2, [pc, #28]	; (8001414 <SysTick_Func+0x30>)
 80013f8:	601a      	str	r2, [r3, #0]
	APP();
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <SysTick_Func+0x2c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4798      	blx	r3
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000130 	.word	0x20000130
 8001408:	e000ed08 	.word	0xe000ed08
 800140c:	08004000 	.word	0x08004000
 8001410:	2000012c 	.word	0x2000012c
 8001414:	08004004 	.word	0x08004004

08001418 <main>:
int main(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
	FMI_vInit();
 800141e:	f7fe ffcb 	bl	80003b8 <FMI_vInit>
	MSTK_vInit();
 8001422:	f7ff ff0f 	bl	8001244 <MSTK_vInit>
	MSTK_vSetIntervalSingle(30000000,SysTick_Func);
 8001426:	4935      	ldr	r1, [pc, #212]	; (80014fc <main+0xe4>)
 8001428:	4835      	ldr	r0, [pc, #212]	; (8001500 <main+0xe8>)
 800142a:	f7ff ff33 	bl	8001294 <MSTK_vSetIntervalSingle>
	GPIO_CFG_t UART_TX_pin = {.PIN_Port = PORTA,.PIN_Number=PIN9,.PIN_Type=ALTERNATE,.PIN_AF=AF7};
 800142e:	f107 030c 	add.w	r3, r7, #12
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	721a      	strb	r2, [r3, #8]
 800143a:	2309      	movs	r3, #9
 800143c:	737b      	strb	r3, [r7, #13]
 800143e:	2302      	movs	r3, #2
 8001440:	73bb      	strb	r3, [r7, #14]
 8001442:	2307      	movs	r3, #7
 8001444:	753b      	strb	r3, [r7, #20]
	GPIO_CFG_t UART_RX_pin = {.PIN_Port = PORTA,.PIN_Number=PIN10,.PIN_Type=ALTERNATE,.PIN_AF=AF7};
 8001446:	463b      	mov	r3, r7
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	721a      	strb	r2, [r3, #8]
 8001450:	230a      	movs	r3, #10
 8001452:	707b      	strb	r3, [r7, #1]
 8001454:	2302      	movs	r3, #2
 8001456:	70bb      	strb	r3, [r7, #2]
 8001458:	2307      	movs	r3, #7
 800145a:	723b      	strb	r3, [r7, #8]
	MGPIO_Init( &UART_TX_pin);
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff f87f 	bl	8000564 <MGPIO_Init>
	MGPIO_Init( &UART_RX_pin);
 8001466:	463b      	mov	r3, r7
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff f87b 	bl	8000564 <MGPIO_Init>
	UART_vInit();
 800146e:	f7ff ff35 	bl	80012dc <UART_vInit>
	//	FMI_vFlashWrite(0x08008000, arr, 3);
	//HexParser_vParseData(":10800000F9F989008093880002C0C0E0D0E00E9435");
	//	FMI_vFlashEraseSector(Sector3);

	/* Loop forever */
	while(TimeoutFlag == 0)
 8001472:	e039      	b.n	80014e8 <main+0xd0>
	{
		Global_UARTFlagStatus = UART_ReceivePeriodicCheck(&RX_Buffer[Global_UARTCounter]);
 8001474:	4b23      	ldr	r3, [pc, #140]	; (8001504 <main+0xec>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	4b23      	ldr	r3, [pc, #140]	; (8001508 <main+0xf0>)
 800147c:	4413      	add	r3, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff ff68 	bl	8001354 <UART_ReceivePeriodicCheck>
 8001484:	4603      	mov	r3, r0
 8001486:	461a      	mov	r2, r3
 8001488:	4b20      	ldr	r3, [pc, #128]	; (800150c <main+0xf4>)
 800148a:	701a      	strb	r2, [r3, #0]
		if (Global_UARTFlagStatus == 1)
 800148c:	4b1f      	ldr	r3, [pc, #124]	; (800150c <main+0xf4>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d129      	bne.n	80014e8 <main+0xd0>
		{
			if (Global_EraseFlag==0)
 8001494:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <main+0xf8>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d104      	bne.n	80014a6 <main+0x8e>
			{
				Global_EraseFlag=1;
 800149c:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <main+0xf8>)
 800149e:	2201      	movs	r2, #1
 80014a0:	701a      	strb	r2, [r3, #0]
				HexParser_vEraseAppArea();
 80014a2:	f7fe fe97 	bl	80001d4 <HexParser_vEraseAppArea>
			}
			// stop 15 second to jump APP
			MSTK_vStopTimer();
 80014a6:	f7ff fee3 	bl	8001270 <MSTK_vStopTimer>

			if (RX_Buffer[Global_UARTCounter] == '\n')
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <main+0xec>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b15      	ldr	r3, [pc, #84]	; (8001508 <main+0xf0>)
 80014b2:	5c9b      	ldrb	r3, [r3, r2]
 80014b4:	2b0a      	cmp	r3, #10
 80014b6:	d109      	bne.n	80014cc <main+0xb4>
			{
				HexParser_vParseData(RX_Buffer) ;
 80014b8:	4813      	ldr	r0, [pc, #76]	; (8001508 <main+0xf0>)
 80014ba:	f7fe feb3 	bl	8000224 <HexParser_vParseData>
				UART_vSendString("ok");
 80014be:	4815      	ldr	r0, [pc, #84]	; (8001514 <main+0xfc>)
 80014c0:	f7ff ff68 	bl	8001394 <UART_vSendString>
				Global_UARTCounter=0;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <main+0xec>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]
 80014ca:	e005      	b.n	80014d8 <main+0xc0>

			}
			else
			{
				Global_UARTCounter++;
 80014cc:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <main+0xec>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	3301      	adds	r3, #1
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <main+0xec>)
 80014d6:	701a      	strb	r2, [r3, #0]
			}
			//end of file
			if (RX_Buffer[8] == '1')
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <main+0xf0>)
 80014da:	7a1b      	ldrb	r3, [r3, #8]
 80014dc:	2b31      	cmp	r3, #49	; 0x31
 80014de:	d103      	bne.n	80014e8 <main+0xd0>
			{
				MSTK_vSetIntervalSingle(1000000,SysTick_Func);
 80014e0:	4906      	ldr	r1, [pc, #24]	; (80014fc <main+0xe4>)
 80014e2:	480d      	ldr	r0, [pc, #52]	; (8001518 <main+0x100>)
 80014e4:	f7ff fed6 	bl	8001294 <MSTK_vSetIntervalSingle>
	while(TimeoutFlag == 0)
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <main+0x104>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0c1      	beq.n	8001474 <main+0x5c>
 80014f0:	2300      	movs	r3, #0

			}

		}
	}
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	080013e5 	.word	0x080013e5
 8001500:	01c9c380 	.word	0x01c9c380
 8001504:	20000166 	.word	0x20000166
 8001508:	20000134 	.word	0x20000134
 800150c:	20000131 	.word	0x20000131
 8001510:	20000167 	.word	0x20000167
 8001514:	080015d4 	.word	0x080015d4
 8001518:	000f4240 	.word	0x000f4240
 800151c:	20000130 	.word	0x20000130

08001520 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001520:	480d      	ldr	r0, [pc, #52]	; (8001558 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001522:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001524:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001528:	480c      	ldr	r0, [pc, #48]	; (800155c <LoopForever+0x6>)
  ldr r1, =_edata
 800152a:	490d      	ldr	r1, [pc, #52]	; (8001560 <LoopForever+0xa>)
  ldr r2, =_sidata
 800152c:	4a0d      	ldr	r2, [pc, #52]	; (8001564 <LoopForever+0xe>)
  movs r3, #0
 800152e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001530:	e002      	b.n	8001538 <LoopCopyDataInit>

08001532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001536:	3304      	adds	r3, #4

08001538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800153c:	d3f9      	bcc.n	8001532 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800153e:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001540:	4c0a      	ldr	r4, [pc, #40]	; (800156c <LoopForever+0x16>)
  movs r3, #0
 8001542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001544:	e001      	b.n	800154a <LoopFillZerobss>

08001546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001548:	3204      	adds	r2, #4

0800154a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800154c:	d3fb      	bcc.n	8001546 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800154e:	f000 f811 	bl	8001574 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001552:	f7ff ff61 	bl	8001418 <main>

08001556 <LoopForever>:

LoopForever:
  b LoopForever
 8001556:	e7fe      	b.n	8001556 <LoopForever>
  ldr   r0, =_estack
 8001558:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800155c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001560:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001564:	080015e0 	.word	0x080015e0
  ldr r2, =_sbss
 8001568:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800156c:	20000168 	.word	0x20000168

08001570 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001570:	e7fe      	b.n	8001570 <ADC_IRQHandler>
	...

08001574 <__libc_init_array>:
 8001574:	b570      	push	{r4, r5, r6, lr}
 8001576:	4d0d      	ldr	r5, [pc, #52]	; (80015ac <__libc_init_array+0x38>)
 8001578:	4c0d      	ldr	r4, [pc, #52]	; (80015b0 <__libc_init_array+0x3c>)
 800157a:	1b64      	subs	r4, r4, r5
 800157c:	10a4      	asrs	r4, r4, #2
 800157e:	2600      	movs	r6, #0
 8001580:	42a6      	cmp	r6, r4
 8001582:	d109      	bne.n	8001598 <__libc_init_array+0x24>
 8001584:	4d0b      	ldr	r5, [pc, #44]	; (80015b4 <__libc_init_array+0x40>)
 8001586:	4c0c      	ldr	r4, [pc, #48]	; (80015b8 <__libc_init_array+0x44>)
 8001588:	f000 f818 	bl	80015bc <_init>
 800158c:	1b64      	subs	r4, r4, r5
 800158e:	10a4      	asrs	r4, r4, #2
 8001590:	2600      	movs	r6, #0
 8001592:	42a6      	cmp	r6, r4
 8001594:	d105      	bne.n	80015a2 <__libc_init_array+0x2e>
 8001596:	bd70      	pop	{r4, r5, r6, pc}
 8001598:	f855 3b04 	ldr.w	r3, [r5], #4
 800159c:	4798      	blx	r3
 800159e:	3601      	adds	r6, #1
 80015a0:	e7ee      	b.n	8001580 <__libc_init_array+0xc>
 80015a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80015a6:	4798      	blx	r3
 80015a8:	3601      	adds	r6, #1
 80015aa:	e7f2      	b.n	8001592 <__libc_init_array+0x1e>
 80015ac:	080015d8 	.word	0x080015d8
 80015b0:	080015d8 	.word	0x080015d8
 80015b4:	080015d8 	.word	0x080015d8
 80015b8:	080015dc 	.word	0x080015dc

080015bc <_init>:
 80015bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015be:	bf00      	nop
 80015c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015c2:	bc08      	pop	{r3}
 80015c4:	469e      	mov	lr, r3
 80015c6:	4770      	bx	lr

080015c8 <_fini>:
 80015c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ca:	bf00      	nop
 80015cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015ce:	bc08      	pop	{r3}
 80015d0:	469e      	mov	lr, r3
 80015d2:	4770      	bx	lr
