
14-Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000410  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080005a4  080005a4  000105a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080005d0  080005d0  000105d8  2**0
                  CONTENTS
  4 .ARM          00000000  080005d0  080005d0  000105d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005d0  080005d8  000105d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005d0  080005d0  000105d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005d4  080005d4  000105d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000000  080005d8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  080005d8  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000105d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001542  00000000  00000000  00010608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005cc  00000000  00000000  00011b4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f8  00000000  00000000  00012118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000190  00000000  00000000  00012310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002787  00000000  00000000  000124a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002ba3  00000000  00000000  00014c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008e55  00000000  00000000  000177ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002061f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000668  00000000  00000000  00020670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800058c 	.word	0x0800058c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800058c 	.word	0x0800058c

080001d4 <HexParser_u8ASCII2HEX>:

uint16_t DataBuffer[100] ;
#define FLASH_BASE_ADDR 0x08000000

uint8_t HexParser_u8ASCII2HEX(uint8_t copy_u8ASCII)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
	uint8_t copy_u8HexValue = 0;
 80001de:	2300      	movs	r3, #0
 80001e0:	73fb      	strb	r3, [r7, #15]
	if (copy_u8ASCII >='0' && copy_u8ASCII<= '9')
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	2b2f      	cmp	r3, #47	; 0x2f
 80001e6:	d906      	bls.n	80001f6 <HexParser_u8ASCII2HEX+0x22>
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	2b39      	cmp	r3, #57	; 0x39
 80001ec:	d803      	bhi.n	80001f6 <HexParser_u8ASCII2HEX+0x22>
	{
		copy_u8HexValue = copy_u8ASCII - '0';
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	3b30      	subs	r3, #48	; 0x30
 80001f2:	73fb      	strb	r3, [r7, #15]
 80001f4:	e008      	b.n	8000208 <HexParser_u8ASCII2HEX+0x34>
	}
	else if (copy_u8ASCII >='A' && copy_u8ASCII<= 'F')
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	2b40      	cmp	r3, #64	; 0x40
 80001fa:	d905      	bls.n	8000208 <HexParser_u8ASCII2HEX+0x34>
 80001fc:	79fb      	ldrb	r3, [r7, #7]
 80001fe:	2b46      	cmp	r3, #70	; 0x46
 8000200:	d802      	bhi.n	8000208 <HexParser_u8ASCII2HEX+0x34>
	{
		copy_u8HexValue = copy_u8ASCII - 'A'+10;
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	3b37      	subs	r3, #55	; 0x37
 8000206:	73fb      	strb	r3, [r7, #15]
	}
	return copy_u8HexValue;
 8000208:	7bfb      	ldrb	r3, [r7, #15]
}
 800020a:	4618      	mov	r0, r3
 800020c:	3714      	adds	r7, #20
 800020e:	46bd      	mov	sp, r7
 8000210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000214:	4770      	bx	lr
	...

08000218 <HexParser_vParseData>:

void HexParser_vParseData(char *  copy_u8Data)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	uint8_t digit0, digit1, digit2, digit3;
	/* Address variable */
	uint32_t address;

	/* 1- convert charachter count */
	CC_High  = HexParser_u8ASCII2HEX(copy_u8Data[1]);
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	3301      	adds	r3, #1
 8000224:	781b      	ldrb	r3, [r3, #0]
 8000226:	4618      	mov	r0, r3
 8000228:	f7ff ffd4 	bl	80001d4 <HexParser_u8ASCII2HEX>
 800022c:	4603      	mov	r3, r0
 800022e:	75bb      	strb	r3, [r7, #22]
	CC_Low = HexParser_u8ASCII2HEX(copy_u8Data[2]);
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	3302      	adds	r3, #2
 8000234:	781b      	ldrb	r3, [r3, #0]
 8000236:	4618      	mov	r0, r3
 8000238:	f7ff ffcc 	bl	80001d4 <HexParser_u8ASCII2HEX>
 800023c:	4603      	mov	r3, r0
 800023e:	757b      	strb	r3, [r7, #21]
	CC = CC_High << 4 | CC_Low;
 8000240:	7dbb      	ldrb	r3, [r7, #22]
 8000242:	011b      	lsls	r3, r3, #4
 8000244:	b25a      	sxtb	r2, r3
 8000246:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800024a:	4313      	orrs	r3, r2
 800024c:	b25b      	sxtb	r3, r3
 800024e:	753b      	strb	r3, [r7, #20]
	/* 2- convert Address */
	digit0 = HexParser_u8ASCII2HEX(copy_u8Data[3]);
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	3303      	adds	r3, #3
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	4618      	mov	r0, r3
 8000258:	f7ff ffbc 	bl	80001d4 <HexParser_u8ASCII2HEX>
 800025c:	4603      	mov	r3, r0
 800025e:	74fb      	strb	r3, [r7, #19]
	digit1 = HexParser_u8ASCII2HEX(copy_u8Data[4]);
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	3304      	adds	r3, #4
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	4618      	mov	r0, r3
 8000268:	f7ff ffb4 	bl	80001d4 <HexParser_u8ASCII2HEX>
 800026c:	4603      	mov	r3, r0
 800026e:	74bb      	strb	r3, [r7, #18]
	digit2 = HexParser_u8ASCII2HEX(copy_u8Data[5]);
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	3305      	adds	r3, #5
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	4618      	mov	r0, r3
 8000278:	f7ff ffac 	bl	80001d4 <HexParser_u8ASCII2HEX>
 800027c:	4603      	mov	r3, r0
 800027e:	747b      	strb	r3, [r7, #17]
	digit3 = HexParser_u8ASCII2HEX(copy_u8Data[6]);
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	3306      	adds	r3, #6
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	4618      	mov	r0, r3
 8000288:	f7ff ffa4 	bl	80001d4 <HexParser_u8ASCII2HEX>
 800028c:	4603      	mov	r3, r0
 800028e:	743b      	strb	r3, [r7, #16]
	address = (FLASH_BASE_ADDR) | digit0<<12 | digit1<<8 | digit2<<4 | digit3;
 8000290:	7cfb      	ldrb	r3, [r7, #19]
 8000292:	031b      	lsls	r3, r3, #12
 8000294:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8000298:	7cbb      	ldrb	r3, [r7, #18]
 800029a:	021b      	lsls	r3, r3, #8
 800029c:	431a      	orrs	r2, r3
 800029e:	7c7b      	ldrb	r3, [r7, #17]
 80002a0:	011b      	lsls	r3, r3, #4
 80002a2:	431a      	orrs	r2, r3
 80002a4:	7c3b      	ldrb	r3, [r7, #16]
 80002a6:	4313      	orrs	r3, r2
 80002a8:	60fb      	str	r3, [r7, #12]

	/* 3- convert Data */
	for(uint8_t i=0 ;i < CC/2 ; i++)
 80002aa:	2300      	movs	r3, #0
 80002ac:	75fb      	strb	r3, [r7, #23]
 80002ae:	e044      	b.n	800033a <HexParser_vParseData+0x122>
	{
		digit0 = HexParser_u8ASCII2HEX(copy_u8Data[(4*i)+9]);
 80002b0:	7dfb      	ldrb	r3, [r7, #23]
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	3309      	adds	r3, #9
 80002b6:	687a      	ldr	r2, [r7, #4]
 80002b8:	4413      	add	r3, r2
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	4618      	mov	r0, r3
 80002be:	f7ff ff89 	bl	80001d4 <HexParser_u8ASCII2HEX>
 80002c2:	4603      	mov	r3, r0
 80002c4:	74fb      	strb	r3, [r7, #19]
		digit1 = HexParser_u8ASCII2HEX(copy_u8Data[(4*i)+10]);
 80002c6:	7dfb      	ldrb	r3, [r7, #23]
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	330a      	adds	r3, #10
 80002cc:	687a      	ldr	r2, [r7, #4]
 80002ce:	4413      	add	r3, r2
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	4618      	mov	r0, r3
 80002d4:	f7ff ff7e 	bl	80001d4 <HexParser_u8ASCII2HEX>
 80002d8:	4603      	mov	r3, r0
 80002da:	74bb      	strb	r3, [r7, #18]
		digit2 = HexParser_u8ASCII2HEX(copy_u8Data[(4*i)+11]);
 80002dc:	7dfb      	ldrb	r3, [r7, #23]
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	330b      	adds	r3, #11
 80002e2:	687a      	ldr	r2, [r7, #4]
 80002e4:	4413      	add	r3, r2
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f7ff ff73 	bl	80001d4 <HexParser_u8ASCII2HEX>
 80002ee:	4603      	mov	r3, r0
 80002f0:	747b      	strb	r3, [r7, #17]
		digit3 = HexParser_u8ASCII2HEX(copy_u8Data[(4*i)+12]);
 80002f2:	7dfb      	ldrb	r3, [r7, #23]
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	330c      	adds	r3, #12
 80002f8:	687a      	ldr	r2, [r7, #4]
 80002fa:	4413      	add	r3, r2
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	4618      	mov	r0, r3
 8000300:	f7ff ff68 	bl	80001d4 <HexParser_u8ASCII2HEX>
 8000304:	4603      	mov	r3, r0
 8000306:	743b      	strb	r3, [r7, #16]
		DataBuffer[i] = digit0<<12 | digit1<<8 | digit2<<4 | digit3;
 8000308:	7cfb      	ldrb	r3, [r7, #19]
 800030a:	031b      	lsls	r3, r3, #12
 800030c:	b21a      	sxth	r2, r3
 800030e:	7cbb      	ldrb	r3, [r7, #18]
 8000310:	021b      	lsls	r3, r3, #8
 8000312:	b21b      	sxth	r3, r3
 8000314:	4313      	orrs	r3, r2
 8000316:	b21a      	sxth	r2, r3
 8000318:	7c7b      	ldrb	r3, [r7, #17]
 800031a:	011b      	lsls	r3, r3, #4
 800031c:	b21b      	sxth	r3, r3
 800031e:	4313      	orrs	r3, r2
 8000320:	b21a      	sxth	r2, r3
 8000322:	7c3b      	ldrb	r3, [r7, #16]
 8000324:	b21b      	sxth	r3, r3
 8000326:	4313      	orrs	r3, r2
 8000328:	b21a      	sxth	r2, r3
 800032a:	7dfb      	ldrb	r3, [r7, #23]
 800032c:	b291      	uxth	r1, r2
 800032e:	4a0c      	ldr	r2, [pc, #48]	; (8000360 <HexParser_vParseData+0x148>)
 8000330:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0 ;i < CC/2 ; i++)
 8000334:	7dfb      	ldrb	r3, [r7, #23]
 8000336:	3301      	adds	r3, #1
 8000338:	75fb      	strb	r3, [r7, #23]
 800033a:	7d3b      	ldrb	r3, [r7, #20]
 800033c:	085b      	lsrs	r3, r3, #1
 800033e:	b2db      	uxtb	r3, r3
 8000340:	7dfa      	ldrb	r2, [r7, #23]
 8000342:	429a      	cmp	r2, r3
 8000344:	d3b4      	bcc.n	80002b0 <HexParser_vParseData+0x98>
	}

	 FMI_vFlashWrite(address, DataBuffer,  CC/2);
 8000346:	7d3b      	ldrb	r3, [r7, #20]
 8000348:	085b      	lsrs	r3, r3, #1
 800034a:	b2db      	uxtb	r3, r3
 800034c:	461a      	mov	r2, r3
 800034e:	4904      	ldr	r1, [pc, #16]	; (8000360 <HexParser_vParseData+0x148>)
 8000350:	68f8      	ldr	r0, [r7, #12]
 8000352:	f000 f82b 	bl	80003ac <FMI_vFlashWrite>
}
 8000356:	bf00      	nop
 8000358:	3718      	adds	r7, #24
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	2000001c 	.word	0x2000001c

08000364 <EXTI0_IRQHandler>:
#include "RCC_Interface.h"

EXTI_Callback_t Global_EXTICallBack[16];

void EXTI0_IRQHandler(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	//if (Global_EXTICallBack[0] != NULL)
	Global_EXTICallBack[0]();
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <EXTI0_IRQHandler+0x1c>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4798      	blx	r3
	SET_BIT(MEXTI->EXTI_PR,EXTI_LINE_0);
 800036e:	4b05      	ldr	r3, [pc, #20]	; (8000384 <EXTI0_IRQHandler+0x20>)
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	4a04      	ldr	r2, [pc, #16]	; (8000384 <EXTI0_IRQHandler+0x20>)
 8000374:	f043 0301 	orr.w	r3, r3, #1
 8000378:	6153      	str	r3, [r2, #20]
}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	200000e4 	.word	0x200000e4
 8000384:	40013c00 	.word	0x40013c00

08000388 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
//	if (Global_EXTICallBack[1] != NULL)
	Global_EXTICallBack[1]();
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <EXTI1_IRQHandler+0x1c>)
 800038e:	685b      	ldr	r3, [r3, #4]
 8000390:	4798      	blx	r3
	SET_BIT(MEXTI->EXTI_PR,EXTI_LINE_1);
 8000392:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <EXTI1_IRQHandler+0x20>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	4a04      	ldr	r2, [pc, #16]	; (80003a8 <EXTI1_IRQHandler+0x20>)
 8000398:	f043 0302 	orr.w	r3, r3, #2
 800039c:	6153      	str	r3, [r2, #20]

}
 800039e:	bf00      	nop
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	200000e4 	.word	0x200000e4
 80003a8:	40013c00 	.word	0x40013c00

080003ac <FMI_vFlashWrite>:

	/* 6- DeSelect Erase Operation (reverse of step 2) */
	CLEAR_BIT(FMI->FLASH_CR, CR_SER);
}
void FMI_vFlashWrite(uint32_t copy_u32Address, uint16_t* copy_pu16Data, uint32_t copy_u32Size)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b087      	sub	sp, #28
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	60f8      	str	r0, [r7, #12]
 80003b4:	60b9      	str	r1, [r7, #8]
 80003b6:	607a      	str	r2, [r7, #4]
	/* 0. unlock control register in FLASH_KEYR */
	if(READ_BIT(FMI->FLASH_CR, CR_LOCK) )
 80003b8:	4b2a      	ldr	r3, [pc, #168]	; (8000464 <FMI_vFlashWrite+0xb8>)
 80003ba:	691b      	ldr	r3, [r3, #16]
 80003bc:	0fdb      	lsrs	r3, r3, #31
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d005      	beq.n	80003d2 <FMI_vFlashWrite+0x26>
	{
		FMI->FLASH_KEYR = FMI_KEY1;
 80003c6:	4b27      	ldr	r3, [pc, #156]	; (8000464 <FMI_vFlashWrite+0xb8>)
 80003c8:	4a27      	ldr	r2, [pc, #156]	; (8000468 <FMI_vFlashWrite+0xbc>)
 80003ca:	605a      	str	r2, [r3, #4]
		FMI->FLASH_KEYR = FMI_KEY2;
 80003cc:	4b25      	ldr	r3, [pc, #148]	; (8000464 <FMI_vFlashWrite+0xb8>)
 80003ce:	4a27      	ldr	r2, [pc, #156]	; (800046c <FMI_vFlashWrite+0xc0>)
 80003d0:	605a      	str	r2, [r3, #4]
	}
	/* 1. check busy bit */
	while(READ_BIT(FMI->FLASH_SR,SR_BSY));
 80003d2:	bf00      	nop
 80003d4:	4b23      	ldr	r3, [pc, #140]	; (8000464 <FMI_vFlashWrite+0xb8>)
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	0c1b      	lsrs	r3, r3, #16
 80003da:	f003 0301 	and.w	r3, r3, #1
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d1f8      	bne.n	80003d4 <FMI_vFlashWrite+0x28>
	/* 2. Set the PG bit */
	SET_BIT(FMI->FLASH_CR,CR_PG);
 80003e2:	4b20      	ldr	r3, [pc, #128]	; (8000464 <FMI_vFlashWrite+0xb8>)
 80003e4:	691b      	ldr	r3, [r3, #16]
 80003e6:	4a1f      	ldr	r2, [pc, #124]	; (8000464 <FMI_vFlashWrite+0xb8>)
 80003e8:	f043 0301 	orr.w	r3, r3, #1
 80003ec:	6113      	str	r3, [r2, #16]
	/* 3. Select PSIZEt */
	FMI->FLASH_CR &= ~ (0b11 << CR_PSIZE0);
 80003ee:	4b1d      	ldr	r3, [pc, #116]	; (8000464 <FMI_vFlashWrite+0xb8>)
 80003f0:	691b      	ldr	r3, [r3, #16]
 80003f2:	4a1c      	ldr	r2, [pc, #112]	; (8000464 <FMI_vFlashWrite+0xb8>)
 80003f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80003f8:	6113      	str	r3, [r2, #16]
	FMI->FLASH_CR |= 0b01 << CR_PSIZE0;
 80003fa:	4b1a      	ldr	r3, [pc, #104]	; (8000464 <FMI_vFlashWrite+0xb8>)
 80003fc:	691b      	ldr	r3, [r3, #16]
 80003fe:	4a19      	ldr	r2, [pc, #100]	; (8000464 <FMI_vFlashWrite+0xb8>)
 8000400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000404:	6113      	str	r3, [r2, #16]

	/* 4. Assign data*/
	for(uint32_t Local_u32counter=0;Local_u32counter<copy_u32Size;Local_u32counter++)
 8000406:	2300      	movs	r3, #0
 8000408:	617b      	str	r3, [r7, #20]
 800040a:	e01a      	b.n	8000442 <FMI_vFlashWrite+0x96>
	{
		*((volatile uint16_t*)copy_u32Address) = copy_pu16Data[Local_u32counter];
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	005b      	lsls	r3, r3, #1
 8000410:	68ba      	ldr	r2, [r7, #8]
 8000412:	441a      	add	r2, r3
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	8812      	ldrh	r2, [r2, #0]
 8000418:	801a      	strh	r2, [r3, #0]
		/* 5. Wait for the BSY bit to be cleared */
		while(READ_BIT(FMI->FLASH_SR,SR_BSY));
 800041a:	bf00      	nop
 800041c:	4b11      	ldr	r3, [pc, #68]	; (8000464 <FMI_vFlashWrite+0xb8>)
 800041e:	68db      	ldr	r3, [r3, #12]
 8000420:	0c1b      	lsrs	r3, r3, #16
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	2b00      	cmp	r3, #0
 8000428:	d1f8      	bne.n	800041c <FMI_vFlashWrite+0x70>
		/* 6- Clear EOP flag   */
		SET_BIT(FMI->FLASH_SR, SR_EOP);
 800042a:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <FMI_vFlashWrite+0xb8>)
 800042c:	68db      	ldr	r3, [r3, #12]
 800042e:	4a0d      	ldr	r2, [pc, #52]	; (8000464 <FMI_vFlashWrite+0xb8>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	60d3      	str	r3, [r2, #12]
		copy_u32Address += 2;
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	3302      	adds	r3, #2
 800043a:	60fb      	str	r3, [r7, #12]
	for(uint32_t Local_u32counter=0;Local_u32counter<copy_u32Size;Local_u32counter++)
 800043c:	697b      	ldr	r3, [r7, #20]
 800043e:	3301      	adds	r3, #1
 8000440:	617b      	str	r3, [r7, #20]
 8000442:	697a      	ldr	r2, [r7, #20]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	429a      	cmp	r2, r3
 8000448:	d3e0      	bcc.n	800040c <FMI_vFlashWrite+0x60>
	}
	/* 7 - deactivate programming mode */
	CLEAR_BIT(FMI->FLASH_CR,CR_PG);
 800044a:	4b06      	ldr	r3, [pc, #24]	; (8000464 <FMI_vFlashWrite+0xb8>)
 800044c:	691b      	ldr	r3, [r3, #16]
 800044e:	4a05      	ldr	r2, [pc, #20]	; (8000464 <FMI_vFlashWrite+0xb8>)
 8000450:	f023 0301 	bic.w	r3, r3, #1
 8000454:	6113      	str	r3, [r2, #16]
//	}
//	/* 8- deactivate programming mode */
//	READ_BIT(FMI->FLASH_CR, 0);


}
 8000456:	bf00      	nop
 8000458:	371c      	adds	r7, #28
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40023c00 	.word	0x40023c00
 8000468:	45670123 	.word	0x45670123
 800046c:	cdef89ab 	.word	0xcdef89ab

08000470 <RCC_AHB1LPEnableCLK>:

}


void RCC_AHB1LPEnableCLK(PeripheralAHBLP1_t peripheral)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	71fb      	strb	r3, [r7, #7]
	SET_BIT(RCC->RCC_AHB1LPENR,peripheral);
 800047a:	4b08      	ldr	r3, [pc, #32]	; (800049c <RCC_AHB1LPEnableCLK+0x2c>)
 800047c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800047e:	79fa      	ldrb	r2, [r7, #7]
 8000480:	2101      	movs	r1, #1
 8000482:	fa01 f202 	lsl.w	r2, r1, r2
 8000486:	4611      	mov	r1, r2
 8000488:	4a04      	ldr	r2, [pc, #16]	; (800049c <RCC_AHB1LPEnableCLK+0x2c>)
 800048a:	430b      	orrs	r3, r1
 800048c:	6513      	str	r3, [r2, #80]	; 0x50
}
 800048e:	bf00      	nop
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	40023800 	.word	0x40023800

080004a0 <SysTick_Handler>:
#include "SysTick_Interface.h"
STK_Callback_t Global_SysTickCallback;
Interval_t Global_Interval;

void SysTick_Handler(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
	if (Global_Interval == Interval_Single)
 80004a4:	4b09      	ldr	r3, [pc, #36]	; (80004cc <SysTick_Handler+0x2c>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d105      	bne.n	80004b8 <SysTick_Handler+0x18>
	{
		//disable counter
		CLEAR_BIT(MSTK->STK_CTRL,ENABLE);
 80004ac:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <SysTick_Handler+0x30>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a07      	ldr	r2, [pc, #28]	; (80004d0 <SysTick_Handler+0x30>)
 80004b2:	f023 0301 	bic.w	r3, r3, #1
 80004b6:	6013      	str	r3, [r2, #0]
	}
	if (Global_SysTickCallback != 0)
 80004b8:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <SysTick_Handler+0x34>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d002      	beq.n	80004c6 <SysTick_Handler+0x26>
	{
		Global_SysTickCallback();
 80004c0:	4b04      	ldr	r3, [pc, #16]	; (80004d4 <SysTick_Handler+0x34>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4798      	blx	r3
	}
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20000128 	.word	0x20000128
 80004d0:	e000e010 	.word	0xe000e010
 80004d4:	20000124 	.word	0x20000124

080004d8 <main>:
#include "HexParser_Interface.h"
#include "FMI_Interface.h"
#include "RCC_Interface.h"

int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	RCC_AHB1LPEnableCLK(FLITFLPEN);
 80004dc:	200f      	movs	r0, #15
 80004de:	f7ff ffc7 	bl	8000470 <RCC_AHB1LPEnableCLK>

	HexParser_vParseData(":10800000909389008093880002C0C0E0D0E00E9435");
 80004e2:	4802      	ldr	r0, [pc, #8]	; (80004ec <main+0x14>)
 80004e4:	f7ff fe98 	bl	8000218 <HexParser_vParseData>
    /* Loop forever */
	for(;;);
 80004e8:	e7fe      	b.n	80004e8 <main+0x10>
 80004ea:	bf00      	nop
 80004ec:	080005a4 	.word	0x080005a4

080004f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004f0:	480d      	ldr	r0, [pc, #52]	; (8000528 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f8:	480c      	ldr	r0, [pc, #48]	; (800052c <LoopForever+0x6>)
  ldr r1, =_edata
 80004fa:	490d      	ldr	r1, [pc, #52]	; (8000530 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004fc:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <LoopForever+0xe>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000500:	e002      	b.n	8000508 <LoopCopyDataInit>

08000502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000506:	3304      	adds	r3, #4

08000508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800050a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800050c:	d3f9      	bcc.n	8000502 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800050e:	4a0a      	ldr	r2, [pc, #40]	; (8000538 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000510:	4c0a      	ldr	r4, [pc, #40]	; (800053c <LoopForever+0x16>)
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000514:	e001      	b.n	800051a <LoopFillZerobss>

08000516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000518:	3204      	adds	r2, #4

0800051a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800051a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800051c:	d3fb      	bcc.n	8000516 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800051e:	f000 f811 	bl	8000544 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000522:	f7ff ffd9 	bl	80004d8 <main>

08000526 <LoopForever>:

LoopForever:
  b LoopForever
 8000526:	e7fe      	b.n	8000526 <LoopForever>
  ldr   r0, =_estack
 8000528:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800052c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000530:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000534:	080005d8 	.word	0x080005d8
  ldr r2, =_sbss
 8000538:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800053c:	2000012c 	.word	0x2000012c

08000540 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000540:	e7fe      	b.n	8000540 <ADC_IRQHandler>
	...

08000544 <__libc_init_array>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	4d0d      	ldr	r5, [pc, #52]	; (800057c <__libc_init_array+0x38>)
 8000548:	4c0d      	ldr	r4, [pc, #52]	; (8000580 <__libc_init_array+0x3c>)
 800054a:	1b64      	subs	r4, r4, r5
 800054c:	10a4      	asrs	r4, r4, #2
 800054e:	2600      	movs	r6, #0
 8000550:	42a6      	cmp	r6, r4
 8000552:	d109      	bne.n	8000568 <__libc_init_array+0x24>
 8000554:	4d0b      	ldr	r5, [pc, #44]	; (8000584 <__libc_init_array+0x40>)
 8000556:	4c0c      	ldr	r4, [pc, #48]	; (8000588 <__libc_init_array+0x44>)
 8000558:	f000 f818 	bl	800058c <_init>
 800055c:	1b64      	subs	r4, r4, r5
 800055e:	10a4      	asrs	r4, r4, #2
 8000560:	2600      	movs	r6, #0
 8000562:	42a6      	cmp	r6, r4
 8000564:	d105      	bne.n	8000572 <__libc_init_array+0x2e>
 8000566:	bd70      	pop	{r4, r5, r6, pc}
 8000568:	f855 3b04 	ldr.w	r3, [r5], #4
 800056c:	4798      	blx	r3
 800056e:	3601      	adds	r6, #1
 8000570:	e7ee      	b.n	8000550 <__libc_init_array+0xc>
 8000572:	f855 3b04 	ldr.w	r3, [r5], #4
 8000576:	4798      	blx	r3
 8000578:	3601      	adds	r6, #1
 800057a:	e7f2      	b.n	8000562 <__libc_init_array+0x1e>
 800057c:	080005d0 	.word	0x080005d0
 8000580:	080005d0 	.word	0x080005d0
 8000584:	080005d0 	.word	0x080005d0
 8000588:	080005d4 	.word	0x080005d4

0800058c <_init>:
 800058c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800058e:	bf00      	nop
 8000590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000592:	bc08      	pop	{r3}
 8000594:	469e      	mov	lr, r3
 8000596:	4770      	bx	lr

08000598 <_fini>:
 8000598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800059a:	bf00      	nop
 800059c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800059e:	bc08      	pop	{r3}
 80005a0:	469e      	mov	lr, r3
 80005a2:	4770      	bx	lr
