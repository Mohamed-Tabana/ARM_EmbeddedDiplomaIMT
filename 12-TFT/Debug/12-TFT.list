
12-TFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001324  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080014b8  080014b8  0002a018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080014b8  080014b8  0002a018  2**0
                  CONTENTS
  4 .ARM          00000000  080014b8  080014b8  0002a018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080014b8  080014b8  0002a018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014b8  080014b8  000114b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080014bc  080014bc  000114bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000a018  20000000  080014c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000a018  0800b4d8  0002a018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a07c  0800b4d8  0002a07c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002a018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000027a9  00000000  00000000  0002a048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000095c  00000000  00000000  0002c7f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002c0  00000000  00000000  0002d150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000014fe  00000000  00000000  0002d410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000045dc  00000000  00000000  0002e90e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00009362  00000000  00000000  00032eea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0003c24c  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000218  00000000  00000000  0003c2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000008d8  00000000  00000000  0003c4b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000a018 	.word	0x2000a018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080014a0 	.word	0x080014a0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000a01c 	.word	0x2000a01c
 80001d0:	080014a0 	.word	0x080014a0

080001d4 <TFT_vWriteCommand>:
#include "SPI_int.h"
#include "GPIO_Interface.h"
#include "SysTick_Interface.h"

void TFT_vWriteCommand(uint8_t copy_u8Command)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
	MGPIO_vSetOutputPinValue(Control_Pin.PIN_Port,Control_Pin.PIN_Number,OUTPUT_LOW);
 80001de:	4b08      	ldr	r3, [pc, #32]	; (8000200 <TFT_vWriteCommand+0x2c>)
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	4a07      	ldr	r2, [pc, #28]	; (8000200 <TFT_vWriteCommand+0x2c>)
 80001e4:	7851      	ldrb	r1, [r2, #1]
 80001e6:	2200      	movs	r2, #0
 80001e8:	4618      	mov	r0, r3
 80001ea:	f000 fc2f 	bl	8000a4c <MGPIO_vSetOutputPinValue>
	SPI_Transceiving( copy_u8Command);
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	4618      	mov	r0, r3
 80001f2:	f001 f857 	bl	80012a4 <SPI_Transceiving>


}
 80001f6:	bf00      	nop
 80001f8:	3708      	adds	r7, #8
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	2000a00c 	.word	0x2000a00c

08000204 <TFT_vWriteData>:
void TFT_vWriteData(uint8_t copy_u8Data)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
	MGPIO_vSetOutputPinValue(Control_Pin.PIN_Port,Control_Pin.PIN_Number,OUTPUT_HIGH);
 800020e:	4b08      	ldr	r3, [pc, #32]	; (8000230 <TFT_vWriteData+0x2c>)
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	4a07      	ldr	r2, [pc, #28]	; (8000230 <TFT_vWriteData+0x2c>)
 8000214:	7851      	ldrb	r1, [r2, #1]
 8000216:	2201      	movs	r2, #1
 8000218:	4618      	mov	r0, r3
 800021a:	f000 fc17 	bl	8000a4c <MGPIO_vSetOutputPinValue>
	SPI_Transceiving( copy_u8Data);
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	4618      	mov	r0, r3
 8000222:	f001 f83f 	bl	80012a4 <SPI_Transceiving>

}
 8000226:	bf00      	nop
 8000228:	3708      	adds	r7, #8
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	2000a00c 	.word	0x2000a00c

08000234 <TFT_vTFTSequense>:
void TFT_vTFTSequense()
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0

	MGPIO_vSetOutputPinValue(Reset_Pin.PIN_Port,Reset_Pin.PIN_Number,OUTPUT_HIGH);
 8000238:	4b1c      	ldr	r3, [pc, #112]	; (80002ac <TFT_vTFTSequense+0x78>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	4a1b      	ldr	r2, [pc, #108]	; (80002ac <TFT_vTFTSequense+0x78>)
 800023e:	7851      	ldrb	r1, [r2, #1]
 8000240:	2201      	movs	r2, #1
 8000242:	4618      	mov	r0, r3
 8000244:	f000 fc02 	bl	8000a4c <MGPIO_vSetOutputPinValue>
	MSTK_vSetBusyWaitus(100);
 8000248:	2064      	movs	r0, #100	; 0x64
 800024a:	f001 f8a7 	bl	800139c <MSTK_vSetBusyWaitus>
	MGPIO_vSetOutputPinValue(Reset_Pin.PIN_Port,Reset_Pin.PIN_Number,OUTPUT_LOW);
 800024e:	4b17      	ldr	r3, [pc, #92]	; (80002ac <TFT_vTFTSequense+0x78>)
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	4a16      	ldr	r2, [pc, #88]	; (80002ac <TFT_vTFTSequense+0x78>)
 8000254:	7851      	ldrb	r1, [r2, #1]
 8000256:	2200      	movs	r2, #0
 8000258:	4618      	mov	r0, r3
 800025a:	f000 fbf7 	bl	8000a4c <MGPIO_vSetOutputPinValue>
	MSTK_vSetBusyWaitus(1);
 800025e:	2001      	movs	r0, #1
 8000260:	f001 f89c 	bl	800139c <MSTK_vSetBusyWaitus>
	MGPIO_vSetOutputPinValue(Reset_Pin.PIN_Port,Reset_Pin.PIN_Number,OUTPUT_HIGH);
 8000264:	4b11      	ldr	r3, [pc, #68]	; (80002ac <TFT_vTFTSequense+0x78>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	4a10      	ldr	r2, [pc, #64]	; (80002ac <TFT_vTFTSequense+0x78>)
 800026a:	7851      	ldrb	r1, [r2, #1]
 800026c:	2201      	movs	r2, #1
 800026e:	4618      	mov	r0, r3
 8000270:	f000 fbec 	bl	8000a4c <MGPIO_vSetOutputPinValue>
	MSTK_vSetBusyWaitus(100);
 8000274:	2064      	movs	r0, #100	; 0x64
 8000276:	f001 f891 	bl	800139c <MSTK_vSetBusyWaitus>
	MGPIO_vSetOutputPinValue(Reset_Pin.PIN_Port,Reset_Pin.PIN_Number,OUTPUT_LOW);
 800027a:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <TFT_vTFTSequense+0x78>)
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	4a0b      	ldr	r2, [pc, #44]	; (80002ac <TFT_vTFTSequense+0x78>)
 8000280:	7851      	ldrb	r1, [r2, #1]
 8000282:	2200      	movs	r2, #0
 8000284:	4618      	mov	r0, r3
 8000286:	f000 fbe1 	bl	8000a4c <MGPIO_vSetOutputPinValue>
	MSTK_vSetBusyWaitus(100);
 800028a:	2064      	movs	r0, #100	; 0x64
 800028c:	f001 f886 	bl	800139c <MSTK_vSetBusyWaitus>
	MGPIO_vSetOutputPinValue(Reset_Pin.PIN_Port,Reset_Pin.PIN_Number,OUTPUT_HIGH);
 8000290:	4b06      	ldr	r3, [pc, #24]	; (80002ac <TFT_vTFTSequense+0x78>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	4a05      	ldr	r2, [pc, #20]	; (80002ac <TFT_vTFTSequense+0x78>)
 8000296:	7851      	ldrb	r1, [r2, #1]
 8000298:	2201      	movs	r2, #1
 800029a:	4618      	mov	r0, r3
 800029c:	f000 fbd6 	bl	8000a4c <MGPIO_vSetOutputPinValue>
	MSTK_vSetBusyWaitms(120);
 80002a0:	2078      	movs	r0, #120	; 0x78
 80002a2:	f001 f851 	bl	8001348 <MSTK_vSetBusyWaitms>



}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	2000a000 	.word	0x2000a000

080002b0 <TFT_vInit>:
void TFT_vInit()
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	MGPIO_Init( &Reset_Pin);
 80002b4:	480e      	ldr	r0, [pc, #56]	; (80002f0 <TFT_vInit+0x40>)
 80002b6:	f000 f88d 	bl	80003d4 <MGPIO_Init>
	MGPIO_Init( &Control_Pin);
 80002ba:	480e      	ldr	r0, [pc, #56]	; (80002f4 <TFT_vInit+0x44>)
 80002bc:	f000 f88a 	bl	80003d4 <MGPIO_Init>
	SPI_vInit();
 80002c0:	f000 ff76 	bl	80011b0 <SPI_vInit>
	MSTK_vInit();
 80002c4:	f001 f82a 	bl	800131c <MSTK_vInit>
	TFT_vTFTSequense();
 80002c8:	f7ff ffb4 	bl	8000234 <TFT_vTFTSequense>
	TFT_vWriteCommand(0x11); // SLeepPOUT
 80002cc:	2011      	movs	r0, #17
 80002ce:	f7ff ff81 	bl	80001d4 <TFT_vWriteCommand>
	MSTK_vSetBusyWaitms(15);
 80002d2:	200f      	movs	r0, #15
 80002d4:	f001 f838 	bl	8001348 <MSTK_vSetBusyWaitms>
	TFT_vWriteCommand(0x3A); // color mode
 80002d8:	203a      	movs	r0, #58	; 0x3a
 80002da:	f7ff ff7b 	bl	80001d4 <TFT_vWriteCommand>
	TFT_vWriteData(0x05); // RGB 565
 80002de:	2005      	movs	r0, #5
 80002e0:	f7ff ff90 	bl	8000204 <TFT_vWriteData>
	TFT_vWriteCommand(0x29); // display on
 80002e4:	2029      	movs	r0, #41	; 0x29
 80002e6:	f7ff ff75 	bl	80001d4 <TFT_vWriteCommand>

}
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	2000a000 	.word	0x2000a000
 80002f4:	2000a00c 	.word	0x2000a00c

080002f8 <TFT_vDisplay>:
void TFT_vDisplay(uint16_t* copy_pu16ArrayImage)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	/* 1- Set X */
	TFT_vWriteCommand(0x2A);
 8000300:	202a      	movs	r0, #42	; 0x2a
 8000302:	f7ff ff67 	bl	80001d4 <TFT_vWriteCommand>
	TFT_vWriteData(0x00);
 8000306:	2000      	movs	r0, #0
 8000308:	f7ff ff7c 	bl	8000204 <TFT_vWriteData>
	TFT_vWriteData(0x00);
 800030c:	2000      	movs	r0, #0
 800030e:	f7ff ff79 	bl	8000204 <TFT_vWriteData>
	TFT_vWriteData(0x00);
 8000312:	2000      	movs	r0, #0
 8000314:	f7ff ff76 	bl	8000204 <TFT_vWriteData>
	TFT_vWriteData(127);
 8000318:	207f      	movs	r0, #127	; 0x7f
 800031a:	f7ff ff73 	bl	8000204 <TFT_vWriteData>
	/* 1- Set Y */
	TFT_vWriteCommand(0x2B);
 800031e:	202b      	movs	r0, #43	; 0x2b
 8000320:	f7ff ff58 	bl	80001d4 <TFT_vWriteCommand>
	TFT_vWriteData(0x00);
 8000324:	2000      	movs	r0, #0
 8000326:	f7ff ff6d 	bl	8000204 <TFT_vWriteData>
	TFT_vWriteData(0x00);
 800032a:	2000      	movs	r0, #0
 800032c:	f7ff ff6a 	bl	8000204 <TFT_vWriteData>
	TFT_vWriteData(0x00);
 8000330:	2000      	movs	r0, #0
 8000332:	f7ff ff67 	bl	8000204 <TFT_vWriteData>
	TFT_vWriteData(159);
 8000336:	209f      	movs	r0, #159	; 0x9f
 8000338:	f7ff ff64 	bl	8000204 <TFT_vWriteData>
	TFT_vWriteCommand(0x2C);
 800033c:	202c      	movs	r0, #44	; 0x2c
 800033e:	f7ff ff49 	bl	80001d4 <TFT_vWriteCommand>

	for(uint16_t i =0 ; i < 20480 ; i++)
 8000342:	2300      	movs	r3, #0
 8000344:	81fb      	strh	r3, [r7, #14]
 8000346:	e018      	b.n	800037a <TFT_vDisplay+0x82>
	{
		uint8_t LowByte= (uint8_t)copy_pu16ArrayImage[i];
 8000348:	89fb      	ldrh	r3, [r7, #14]
 800034a:	005b      	lsls	r3, r3, #1
 800034c:	687a      	ldr	r2, [r7, #4]
 800034e:	4413      	add	r3, r2
 8000350:	881b      	ldrh	r3, [r3, #0]
 8000352:	737b      	strb	r3, [r7, #13]
		uint8_t HighByte= (uint8_t)(copy_pu16ArrayImage[i]>>8);
 8000354:	89fb      	ldrh	r3, [r7, #14]
 8000356:	005b      	lsls	r3, r3, #1
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	4413      	add	r3, r2
 800035c:	881b      	ldrh	r3, [r3, #0]
 800035e:	0a1b      	lsrs	r3, r3, #8
 8000360:	b29b      	uxth	r3, r3
 8000362:	733b      	strb	r3, [r7, #12]

		TFT_vWriteData(HighByte);
 8000364:	7b3b      	ldrb	r3, [r7, #12]
 8000366:	4618      	mov	r0, r3
 8000368:	f7ff ff4c 	bl	8000204 <TFT_vWriteData>
		TFT_vWriteData(LowByte);
 800036c:	7b7b      	ldrb	r3, [r7, #13]
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff ff48 	bl	8000204 <TFT_vWriteData>
	for(uint16_t i =0 ; i < 20480 ; i++)
 8000374:	89fb      	ldrh	r3, [r7, #14]
 8000376:	3301      	adds	r3, #1
 8000378:	81fb      	strh	r3, [r7, #14]
 800037a:	89fb      	ldrh	r3, [r7, #14]
 800037c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000380:	d3e2      	bcc.n	8000348 <TFT_vDisplay+0x50>

	}

}
 8000382:	bf00      	nop
 8000384:	bf00      	nop
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}

0800038c <EXTI0_IRQHandler>:
#include "RCC_Interface.h"

EXTI_Callback_t Global_EXTICallBack[16];

void EXTI0_IRQHandler(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
	//if (Global_EXTICallBack[0] != NULL)
	Global_EXTICallBack[0]();
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <EXTI0_IRQHandler+0x1c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4798      	blx	r3
	SET_BIT(MEXTI->EXTI_PR,EXTI_LINE_0);
 8000396:	4b05      	ldr	r3, [pc, #20]	; (80003ac <EXTI0_IRQHandler+0x20>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	4a04      	ldr	r2, [pc, #16]	; (80003ac <EXTI0_IRQHandler+0x20>)
 800039c:	f043 0301 	orr.w	r3, r3, #1
 80003a0:	6153      	str	r3, [r2, #20]
}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	2000a034 	.word	0x2000a034
 80003ac:	40013c00 	.word	0x40013c00

080003b0 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
//	if (Global_EXTICallBack[1] != NULL)
	Global_EXTICallBack[1]();
 80003b4:	4b05      	ldr	r3, [pc, #20]	; (80003cc <EXTI1_IRQHandler+0x1c>)
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	4798      	blx	r3
	SET_BIT(MEXTI->EXTI_PR,EXTI_LINE_1);
 80003ba:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <EXTI1_IRQHandler+0x20>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	4a04      	ldr	r2, [pc, #16]	; (80003d0 <EXTI1_IRQHandler+0x20>)
 80003c0:	f043 0302 	orr.w	r3, r3, #2
 80003c4:	6153      	str	r3, [r2, #20]

}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	2000a034 	.word	0x2000a034
 80003d0:	40013c00 	.word	0x40013c00

080003d4 <MGPIO_Init>:
#include "GPIO_Interface.h"
#include "RCC_Interface.h"
#include "Utils.h"

void MGPIO_Init(GPIO_CFG_t* copy_GPIO_pCFG)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	RCC_AHB1EnableCLK(GPIOAEN);
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 feb7 	bl	8001150 <RCC_AHB1EnableCLK>
	RCC_AHB1EnableCLK(GPIOBEN);
 80003e2:	2001      	movs	r0, #1
 80003e4:	f000 feb4 	bl	8001150 <RCC_AHB1EnableCLK>

	MGPIO_vSetPinType(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_Type);
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	7818      	ldrb	r0, [r3, #0]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	7859      	ldrb	r1, [r3, #1]
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	789b      	ldrb	r3, [r3, #2]
 80003f4:	461a      	mov	r2, r3
 80003f6:	f000 f83b 	bl	8000470 <MGPIO_vSetPinType>
	MGPIO_vSetOutputPinType(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_OType);
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	7818      	ldrb	r0, [r3, #0]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	7859      	ldrb	r1, [r3, #1]
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	791b      	ldrb	r3, [r3, #4]
 8000406:	461a      	mov	r2, r3
 8000408:	f000 f8f0 	bl	80005ec <MGPIO_vSetOutputPinType>
	MGPIO_vSetOutputPinSpeed(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_OSpeed);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	7818      	ldrb	r0, [r3, #0]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	7859      	ldrb	r1, [r3, #1]
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	795b      	ldrb	r3, [r3, #5]
 8000418:	461a      	mov	r2, r3
 800041a:	f000 f99b 	bl	8000754 <MGPIO_vSetOutputPinSpeed>
	MGPIO_vSetInputPinPullUpDown(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_IPullUpDown);
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	7818      	ldrb	r0, [r3, #0]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	7859      	ldrb	r1, [r3, #1]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	799b      	ldrb	r3, [r3, #6]
 800042a:	461a      	mov	r2, r3
 800042c:	f000 fa50 	bl	80008d0 <MGPIO_vSetInputPinPullUpDown>
	MGPIO_vSetOutputPinValueBSR(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_OValue);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	7818      	ldrb	r0, [r3, #0]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	7859      	ldrb	r1, [r3, #1]
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	78db      	ldrb	r3, [r3, #3]
 800043c:	461a      	mov	r2, r3
 800043e:	f000 fbb7 	bl	8000bb0 <MGPIO_vSetOutputPinValueBSR>
	MGPIO_vSetPinLockSTS(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_LCKSTS);
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	7818      	ldrb	r0, [r3, #0]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	7859      	ldrb	r1, [r3, #1]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	79db      	ldrb	r3, [r3, #7]
 800044e:	461a      	mov	r2, r3
 8000450:	f000 fc96 	bl	8000d80 <MGPIO_vSetPinLockSTS>
	MGPIO_vSetPinAlternativeFunction(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_AF);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	7818      	ldrb	r0, [r3, #0]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	7859      	ldrb	r1, [r3, #1]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	7a1b      	ldrb	r3, [r3, #8]
 8000460:	461a      	mov	r2, r3
 8000462:	f000 fd3f 	bl	8000ee4 <MGPIO_vSetPinAlternativeFunction>


}
 8000466:	bf00      	nop
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <MGPIO_vSetPinType>:

void MGPIO_vSetPinType(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_PinType_t copy_eGPIO_PinType)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	71fb      	strb	r3, [r7, #7]
 800047a:	460b      	mov	r3, r1
 800047c:	71bb      	strb	r3, [r7, #6]
 800047e:	4613      	mov	r3, r2
 8000480:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	2b05      	cmp	r3, #5
 8000486:	f200 809f 	bhi.w	80005c8 <MGPIO_vSetPinType+0x158>
 800048a:	a201      	add	r2, pc, #4	; (adr r2, 8000490 <MGPIO_vSetPinType+0x20>)
 800048c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000490:	080004a9 	.word	0x080004a9
 8000494:	080004d9 	.word	0x080004d9
 8000498:	08000509 	.word	0x08000509
 800049c:	08000539 	.word	0x08000539
 80004a0:	08000569 	.word	0x08000569
 80004a4:	08000599 	.word	0x08000599
	{
	case PORTA:
		GPIOA->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 80004a8:	4b4a      	ldr	r3, [pc, #296]	; (80005d4 <MGPIO_vSetPinType+0x164>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	79ba      	ldrb	r2, [r7, #6]
 80004ae:	0052      	lsls	r2, r2, #1
 80004b0:	2103      	movs	r1, #3
 80004b2:	fa01 f202 	lsl.w	r2, r1, r2
 80004b6:	43d2      	mvns	r2, r2
 80004b8:	4611      	mov	r1, r2
 80004ba:	4a46      	ldr	r2, [pc, #280]	; (80005d4 <MGPIO_vSetPinType+0x164>)
 80004bc:	400b      	ands	r3, r1
 80004be:	6013      	str	r3, [r2, #0]
		GPIOA->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 80004c0:	4b44      	ldr	r3, [pc, #272]	; (80005d4 <MGPIO_vSetPinType+0x164>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	7979      	ldrb	r1, [r7, #5]
 80004c6:	79ba      	ldrb	r2, [r7, #6]
 80004c8:	0052      	lsls	r2, r2, #1
 80004ca:	fa01 f202 	lsl.w	r2, r1, r2
 80004ce:	4611      	mov	r1, r2
 80004d0:	4a40      	ldr	r2, [pc, #256]	; (80005d4 <MGPIO_vSetPinType+0x164>)
 80004d2:	430b      	orrs	r3, r1
 80004d4:	6013      	str	r3, [r2, #0]
		break;
 80004d6:	e077      	b.n	80005c8 <MGPIO_vSetPinType+0x158>
	case PORTB:
		GPIOB->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 80004d8:	4b3f      	ldr	r3, [pc, #252]	; (80005d8 <MGPIO_vSetPinType+0x168>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	79ba      	ldrb	r2, [r7, #6]
 80004de:	0052      	lsls	r2, r2, #1
 80004e0:	2103      	movs	r1, #3
 80004e2:	fa01 f202 	lsl.w	r2, r1, r2
 80004e6:	43d2      	mvns	r2, r2
 80004e8:	4611      	mov	r1, r2
 80004ea:	4a3b      	ldr	r2, [pc, #236]	; (80005d8 <MGPIO_vSetPinType+0x168>)
 80004ec:	400b      	ands	r3, r1
 80004ee:	6013      	str	r3, [r2, #0]
		GPIOB->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 80004f0:	4b39      	ldr	r3, [pc, #228]	; (80005d8 <MGPIO_vSetPinType+0x168>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	7979      	ldrb	r1, [r7, #5]
 80004f6:	79ba      	ldrb	r2, [r7, #6]
 80004f8:	0052      	lsls	r2, r2, #1
 80004fa:	fa01 f202 	lsl.w	r2, r1, r2
 80004fe:	4611      	mov	r1, r2
 8000500:	4a35      	ldr	r2, [pc, #212]	; (80005d8 <MGPIO_vSetPinType+0x168>)
 8000502:	430b      	orrs	r3, r1
 8000504:	6013      	str	r3, [r2, #0]
		break;
 8000506:	e05f      	b.n	80005c8 <MGPIO_vSetPinType+0x158>
	case PORTC:
		GPIOC->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 8000508:	4b34      	ldr	r3, [pc, #208]	; (80005dc <MGPIO_vSetPinType+0x16c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	79ba      	ldrb	r2, [r7, #6]
 800050e:	0052      	lsls	r2, r2, #1
 8000510:	2103      	movs	r1, #3
 8000512:	fa01 f202 	lsl.w	r2, r1, r2
 8000516:	43d2      	mvns	r2, r2
 8000518:	4611      	mov	r1, r2
 800051a:	4a30      	ldr	r2, [pc, #192]	; (80005dc <MGPIO_vSetPinType+0x16c>)
 800051c:	400b      	ands	r3, r1
 800051e:	6013      	str	r3, [r2, #0]
		GPIOC->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 8000520:	4b2e      	ldr	r3, [pc, #184]	; (80005dc <MGPIO_vSetPinType+0x16c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	7979      	ldrb	r1, [r7, #5]
 8000526:	79ba      	ldrb	r2, [r7, #6]
 8000528:	0052      	lsls	r2, r2, #1
 800052a:	fa01 f202 	lsl.w	r2, r1, r2
 800052e:	4611      	mov	r1, r2
 8000530:	4a2a      	ldr	r2, [pc, #168]	; (80005dc <MGPIO_vSetPinType+0x16c>)
 8000532:	430b      	orrs	r3, r1
 8000534:	6013      	str	r3, [r2, #0]
		break;
 8000536:	e047      	b.n	80005c8 <MGPIO_vSetPinType+0x158>
	case PORTD:
		GPIOD->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 8000538:	4b29      	ldr	r3, [pc, #164]	; (80005e0 <MGPIO_vSetPinType+0x170>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	79ba      	ldrb	r2, [r7, #6]
 800053e:	0052      	lsls	r2, r2, #1
 8000540:	2103      	movs	r1, #3
 8000542:	fa01 f202 	lsl.w	r2, r1, r2
 8000546:	43d2      	mvns	r2, r2
 8000548:	4611      	mov	r1, r2
 800054a:	4a25      	ldr	r2, [pc, #148]	; (80005e0 <MGPIO_vSetPinType+0x170>)
 800054c:	400b      	ands	r3, r1
 800054e:	6013      	str	r3, [r2, #0]
		GPIOD->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 8000550:	4b23      	ldr	r3, [pc, #140]	; (80005e0 <MGPIO_vSetPinType+0x170>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	7979      	ldrb	r1, [r7, #5]
 8000556:	79ba      	ldrb	r2, [r7, #6]
 8000558:	0052      	lsls	r2, r2, #1
 800055a:	fa01 f202 	lsl.w	r2, r1, r2
 800055e:	4611      	mov	r1, r2
 8000560:	4a1f      	ldr	r2, [pc, #124]	; (80005e0 <MGPIO_vSetPinType+0x170>)
 8000562:	430b      	orrs	r3, r1
 8000564:	6013      	str	r3, [r2, #0]
		break;
 8000566:	e02f      	b.n	80005c8 <MGPIO_vSetPinType+0x158>
	case PORTE:
		GPIOE->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 8000568:	4b1e      	ldr	r3, [pc, #120]	; (80005e4 <MGPIO_vSetPinType+0x174>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	79ba      	ldrb	r2, [r7, #6]
 800056e:	0052      	lsls	r2, r2, #1
 8000570:	2103      	movs	r1, #3
 8000572:	fa01 f202 	lsl.w	r2, r1, r2
 8000576:	43d2      	mvns	r2, r2
 8000578:	4611      	mov	r1, r2
 800057a:	4a1a      	ldr	r2, [pc, #104]	; (80005e4 <MGPIO_vSetPinType+0x174>)
 800057c:	400b      	ands	r3, r1
 800057e:	6013      	str	r3, [r2, #0]
		GPIOE->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 8000580:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <MGPIO_vSetPinType+0x174>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	7979      	ldrb	r1, [r7, #5]
 8000586:	79ba      	ldrb	r2, [r7, #6]
 8000588:	0052      	lsls	r2, r2, #1
 800058a:	fa01 f202 	lsl.w	r2, r1, r2
 800058e:	4611      	mov	r1, r2
 8000590:	4a14      	ldr	r2, [pc, #80]	; (80005e4 <MGPIO_vSetPinType+0x174>)
 8000592:	430b      	orrs	r3, r1
 8000594:	6013      	str	r3, [r2, #0]
		break;
 8000596:	e017      	b.n	80005c8 <MGPIO_vSetPinType+0x158>
	case PORTH:
		GPIOH->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 8000598:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <MGPIO_vSetPinType+0x178>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	79ba      	ldrb	r2, [r7, #6]
 800059e:	0052      	lsls	r2, r2, #1
 80005a0:	2103      	movs	r1, #3
 80005a2:	fa01 f202 	lsl.w	r2, r1, r2
 80005a6:	43d2      	mvns	r2, r2
 80005a8:	4611      	mov	r1, r2
 80005aa:	4a0f      	ldr	r2, [pc, #60]	; (80005e8 <MGPIO_vSetPinType+0x178>)
 80005ac:	400b      	ands	r3, r1
 80005ae:	6013      	str	r3, [r2, #0]
		GPIOH->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 80005b0:	4b0d      	ldr	r3, [pc, #52]	; (80005e8 <MGPIO_vSetPinType+0x178>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	7979      	ldrb	r1, [r7, #5]
 80005b6:	79ba      	ldrb	r2, [r7, #6]
 80005b8:	0052      	lsls	r2, r2, #1
 80005ba:	fa01 f202 	lsl.w	r2, r1, r2
 80005be:	4611      	mov	r1, r2
 80005c0:	4a09      	ldr	r2, [pc, #36]	; (80005e8 <MGPIO_vSetPinType+0x178>)
 80005c2:	430b      	orrs	r3, r1
 80005c4:	6013      	str	r3, [r2, #0]
		break;
 80005c6:	bf00      	nop
	}
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	40020000 	.word	0x40020000
 80005d8:	40020400 	.word	0x40020400
 80005dc:	40020800 	.word	0x40020800
 80005e0:	40020c00 	.word	0x40020c00
 80005e4:	40021000 	.word	0x40021000
 80005e8:	40021c00 	.word	0x40021c00

080005ec <MGPIO_vSetOutputPinType>:
void MGPIO_vSetOutputPinType(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_OType_t copy_GPIO_OType)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
 80005f6:	460b      	mov	r3, r1
 80005f8:	71bb      	strb	r3, [r7, #6]
 80005fa:	4613      	mov	r3, r2
 80005fc:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	2b05      	cmp	r3, #5
 8000602:	f200 8095 	bhi.w	8000730 <MGPIO_vSetOutputPinType+0x144>
 8000606:	a201      	add	r2, pc, #4	; (adr r2, 800060c <MGPIO_vSetOutputPinType+0x20>)
 8000608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800060c:	08000625 	.word	0x08000625
 8000610:	08000653 	.word	0x08000653
 8000614:	08000681 	.word	0x08000681
 8000618:	080006ad 	.word	0x080006ad
 800061c:	080006d9 	.word	0x080006d9
 8000620:	08000705 	.word	0x08000705
	{
	case PORTA:
		GPIOA->GPIO_OTYPER &= ~(0b1<<copy_eGPIO_Pin*2);
 8000624:	4b45      	ldr	r3, [pc, #276]	; (800073c <MGPIO_vSetOutputPinType+0x150>)
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	79ba      	ldrb	r2, [r7, #6]
 800062a:	0052      	lsls	r2, r2, #1
 800062c:	2101      	movs	r1, #1
 800062e:	fa01 f202 	lsl.w	r2, r1, r2
 8000632:	43d2      	mvns	r2, r2
 8000634:	4611      	mov	r1, r2
 8000636:	4a41      	ldr	r2, [pc, #260]	; (800073c <MGPIO_vSetOutputPinType+0x150>)
 8000638:	400b      	ands	r3, r1
 800063a:	6053      	str	r3, [r2, #4]
		GPIOA->GPIO_OTYPER |= (copy_GPIO_OType<<copy_eGPIO_Pin);
 800063c:	4b3f      	ldr	r3, [pc, #252]	; (800073c <MGPIO_vSetOutputPinType+0x150>)
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	7979      	ldrb	r1, [r7, #5]
 8000642:	79ba      	ldrb	r2, [r7, #6]
 8000644:	fa01 f202 	lsl.w	r2, r1, r2
 8000648:	4611      	mov	r1, r2
 800064a:	4a3c      	ldr	r2, [pc, #240]	; (800073c <MGPIO_vSetOutputPinType+0x150>)
 800064c:	430b      	orrs	r3, r1
 800064e:	6053      	str	r3, [r2, #4]
		break;
 8000650:	e06e      	b.n	8000730 <MGPIO_vSetOutputPinType+0x144>
	case PORTB:
		GPIOB->GPIO_OTYPER &= ~(0b1<<copy_eGPIO_Pin*2);
 8000652:	4b3b      	ldr	r3, [pc, #236]	; (8000740 <MGPIO_vSetOutputPinType+0x154>)
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	79ba      	ldrb	r2, [r7, #6]
 8000658:	0052      	lsls	r2, r2, #1
 800065a:	2101      	movs	r1, #1
 800065c:	fa01 f202 	lsl.w	r2, r1, r2
 8000660:	43d2      	mvns	r2, r2
 8000662:	4611      	mov	r1, r2
 8000664:	4a36      	ldr	r2, [pc, #216]	; (8000740 <MGPIO_vSetOutputPinType+0x154>)
 8000666:	400b      	ands	r3, r1
 8000668:	6053      	str	r3, [r2, #4]
		GPIOB->GPIO_OTYPER |= (copy_GPIO_OType<<copy_eGPIO_Pin);
 800066a:	4b35      	ldr	r3, [pc, #212]	; (8000740 <MGPIO_vSetOutputPinType+0x154>)
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	7979      	ldrb	r1, [r7, #5]
 8000670:	79ba      	ldrb	r2, [r7, #6]
 8000672:	fa01 f202 	lsl.w	r2, r1, r2
 8000676:	4611      	mov	r1, r2
 8000678:	4a31      	ldr	r2, [pc, #196]	; (8000740 <MGPIO_vSetOutputPinType+0x154>)
 800067a:	430b      	orrs	r3, r1
 800067c:	6053      	str	r3, [r2, #4]
		break;
 800067e:	e057      	b.n	8000730 <MGPIO_vSetOutputPinType+0x144>
	case PORTC:
		GPIOC->GPIO_OTYPER &= ~(0b1<<copy_eGPIO_Pin);
 8000680:	4b30      	ldr	r3, [pc, #192]	; (8000744 <MGPIO_vSetOutputPinType+0x158>)
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	79ba      	ldrb	r2, [r7, #6]
 8000686:	2101      	movs	r1, #1
 8000688:	fa01 f202 	lsl.w	r2, r1, r2
 800068c:	43d2      	mvns	r2, r2
 800068e:	4611      	mov	r1, r2
 8000690:	4a2c      	ldr	r2, [pc, #176]	; (8000744 <MGPIO_vSetOutputPinType+0x158>)
 8000692:	400b      	ands	r3, r1
 8000694:	6053      	str	r3, [r2, #4]
		GPIOC->GPIO_OTYPER |= (copy_GPIO_OType<<copy_eGPIO_Pin);
 8000696:	4b2b      	ldr	r3, [pc, #172]	; (8000744 <MGPIO_vSetOutputPinType+0x158>)
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	7979      	ldrb	r1, [r7, #5]
 800069c:	79ba      	ldrb	r2, [r7, #6]
 800069e:	fa01 f202 	lsl.w	r2, r1, r2
 80006a2:	4611      	mov	r1, r2
 80006a4:	4a27      	ldr	r2, [pc, #156]	; (8000744 <MGPIO_vSetOutputPinType+0x158>)
 80006a6:	430b      	orrs	r3, r1
 80006a8:	6053      	str	r3, [r2, #4]
		break;
 80006aa:	e041      	b.n	8000730 <MGPIO_vSetOutputPinType+0x144>
	case PORTD:
		GPIOD->GPIO_OTYPER &= ~(0b1<<copy_eGPIO_Pin);
 80006ac:	4b26      	ldr	r3, [pc, #152]	; (8000748 <MGPIO_vSetOutputPinType+0x15c>)
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	79ba      	ldrb	r2, [r7, #6]
 80006b2:	2101      	movs	r1, #1
 80006b4:	fa01 f202 	lsl.w	r2, r1, r2
 80006b8:	43d2      	mvns	r2, r2
 80006ba:	4611      	mov	r1, r2
 80006bc:	4a22      	ldr	r2, [pc, #136]	; (8000748 <MGPIO_vSetOutputPinType+0x15c>)
 80006be:	400b      	ands	r3, r1
 80006c0:	6053      	str	r3, [r2, #4]
		GPIOD->GPIO_OTYPER |= (copy_GPIO_OType<<copy_eGPIO_Pin);
 80006c2:	4b21      	ldr	r3, [pc, #132]	; (8000748 <MGPIO_vSetOutputPinType+0x15c>)
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	7979      	ldrb	r1, [r7, #5]
 80006c8:	79ba      	ldrb	r2, [r7, #6]
 80006ca:	fa01 f202 	lsl.w	r2, r1, r2
 80006ce:	4611      	mov	r1, r2
 80006d0:	4a1d      	ldr	r2, [pc, #116]	; (8000748 <MGPIO_vSetOutputPinType+0x15c>)
 80006d2:	430b      	orrs	r3, r1
 80006d4:	6053      	str	r3, [r2, #4]
		break;
 80006d6:	e02b      	b.n	8000730 <MGPIO_vSetOutputPinType+0x144>
	case PORTE:
		GPIOE->GPIO_OTYPER &= ~(0b1<<copy_eGPIO_Pin);
 80006d8:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MGPIO_vSetOutputPinType+0x160>)
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	79ba      	ldrb	r2, [r7, #6]
 80006de:	2101      	movs	r1, #1
 80006e0:	fa01 f202 	lsl.w	r2, r1, r2
 80006e4:	43d2      	mvns	r2, r2
 80006e6:	4611      	mov	r1, r2
 80006e8:	4a18      	ldr	r2, [pc, #96]	; (800074c <MGPIO_vSetOutputPinType+0x160>)
 80006ea:	400b      	ands	r3, r1
 80006ec:	6053      	str	r3, [r2, #4]
		GPIOE->GPIO_OTYPER |= (copy_GPIO_OType<<copy_eGPIO_Pin);
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <MGPIO_vSetOutputPinType+0x160>)
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	7979      	ldrb	r1, [r7, #5]
 80006f4:	79ba      	ldrb	r2, [r7, #6]
 80006f6:	fa01 f202 	lsl.w	r2, r1, r2
 80006fa:	4611      	mov	r1, r2
 80006fc:	4a13      	ldr	r2, [pc, #76]	; (800074c <MGPIO_vSetOutputPinType+0x160>)
 80006fe:	430b      	orrs	r3, r1
 8000700:	6053      	str	r3, [r2, #4]
		break;
 8000702:	e015      	b.n	8000730 <MGPIO_vSetOutputPinType+0x144>
	case PORTH:
		GPIOH->GPIO_OTYPER &= ~(0b1<<copy_eGPIO_Pin);
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MGPIO_vSetOutputPinType+0x164>)
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	79ba      	ldrb	r2, [r7, #6]
 800070a:	2101      	movs	r1, #1
 800070c:	fa01 f202 	lsl.w	r2, r1, r2
 8000710:	43d2      	mvns	r2, r2
 8000712:	4611      	mov	r1, r2
 8000714:	4a0e      	ldr	r2, [pc, #56]	; (8000750 <MGPIO_vSetOutputPinType+0x164>)
 8000716:	400b      	ands	r3, r1
 8000718:	6053      	str	r3, [r2, #4]
		GPIOH->GPIO_OTYPER |= (copy_GPIO_OType<<copy_eGPIO_Pin);
 800071a:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <MGPIO_vSetOutputPinType+0x164>)
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	7979      	ldrb	r1, [r7, #5]
 8000720:	79ba      	ldrb	r2, [r7, #6]
 8000722:	fa01 f202 	lsl.w	r2, r1, r2
 8000726:	4611      	mov	r1, r2
 8000728:	4a09      	ldr	r2, [pc, #36]	; (8000750 <MGPIO_vSetOutputPinType+0x164>)
 800072a:	430b      	orrs	r3, r1
 800072c:	6053      	str	r3, [r2, #4]
		break;
 800072e:	bf00      	nop
	}
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	40020000 	.word	0x40020000
 8000740:	40020400 	.word	0x40020400
 8000744:	40020800 	.word	0x40020800
 8000748:	40020c00 	.word	0x40020c00
 800074c:	40021000 	.word	0x40021000
 8000750:	40021c00 	.word	0x40021c00

08000754 <MGPIO_vSetOutputPinSpeed>:
void MGPIO_vSetOutputPinSpeed(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_OSpeed_t copy_GPIO_OSpeed)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
 800075e:	460b      	mov	r3, r1
 8000760:	71bb      	strb	r3, [r7, #6]
 8000762:	4613      	mov	r3, r2
 8000764:	717b      	strb	r3, [r7, #5]

	switch (copy_eGPIO_Port)
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	2b05      	cmp	r3, #5
 800076a:	f200 809f 	bhi.w	80008ac <MGPIO_vSetOutputPinSpeed+0x158>
 800076e:	a201      	add	r2, pc, #4	; (adr r2, 8000774 <MGPIO_vSetOutputPinSpeed+0x20>)
 8000770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000774:	0800078d 	.word	0x0800078d
 8000778:	080007bd 	.word	0x080007bd
 800077c:	080007ed 	.word	0x080007ed
 8000780:	0800081d 	.word	0x0800081d
 8000784:	0800084d 	.word	0x0800084d
 8000788:	0800087d 	.word	0x0800087d
	{
	case PORTA:
		GPIOA->GPIO_OSPEEDR &= ~(0b11<<copy_eGPIO_Pin*2);
 800078c:	4b4a      	ldr	r3, [pc, #296]	; (80008b8 <MGPIO_vSetOutputPinSpeed+0x164>)
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	79ba      	ldrb	r2, [r7, #6]
 8000792:	0052      	lsls	r2, r2, #1
 8000794:	2103      	movs	r1, #3
 8000796:	fa01 f202 	lsl.w	r2, r1, r2
 800079a:	43d2      	mvns	r2, r2
 800079c:	4611      	mov	r1, r2
 800079e:	4a46      	ldr	r2, [pc, #280]	; (80008b8 <MGPIO_vSetOutputPinSpeed+0x164>)
 80007a0:	400b      	ands	r3, r1
 80007a2:	6093      	str	r3, [r2, #8]
		GPIOA->GPIO_OSPEEDR |= (copy_GPIO_OSpeed<<copy_eGPIO_Pin*2);
 80007a4:	4b44      	ldr	r3, [pc, #272]	; (80008b8 <MGPIO_vSetOutputPinSpeed+0x164>)
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	7979      	ldrb	r1, [r7, #5]
 80007aa:	79ba      	ldrb	r2, [r7, #6]
 80007ac:	0052      	lsls	r2, r2, #1
 80007ae:	fa01 f202 	lsl.w	r2, r1, r2
 80007b2:	4611      	mov	r1, r2
 80007b4:	4a40      	ldr	r2, [pc, #256]	; (80008b8 <MGPIO_vSetOutputPinSpeed+0x164>)
 80007b6:	430b      	orrs	r3, r1
 80007b8:	6093      	str	r3, [r2, #8]
		break;
 80007ba:	e077      	b.n	80008ac <MGPIO_vSetOutputPinSpeed+0x158>
	case PORTB:
		GPIOB->GPIO_OSPEEDR &= ~(0b11<<copy_eGPIO_Pin*2);
 80007bc:	4b3f      	ldr	r3, [pc, #252]	; (80008bc <MGPIO_vSetOutputPinSpeed+0x168>)
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	79ba      	ldrb	r2, [r7, #6]
 80007c2:	0052      	lsls	r2, r2, #1
 80007c4:	2103      	movs	r1, #3
 80007c6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ca:	43d2      	mvns	r2, r2
 80007cc:	4611      	mov	r1, r2
 80007ce:	4a3b      	ldr	r2, [pc, #236]	; (80008bc <MGPIO_vSetOutputPinSpeed+0x168>)
 80007d0:	400b      	ands	r3, r1
 80007d2:	6093      	str	r3, [r2, #8]
		GPIOB->GPIO_OSPEEDR |= (copy_GPIO_OSpeed<<copy_eGPIO_Pin*2);
 80007d4:	4b39      	ldr	r3, [pc, #228]	; (80008bc <MGPIO_vSetOutputPinSpeed+0x168>)
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	7979      	ldrb	r1, [r7, #5]
 80007da:	79ba      	ldrb	r2, [r7, #6]
 80007dc:	0052      	lsls	r2, r2, #1
 80007de:	fa01 f202 	lsl.w	r2, r1, r2
 80007e2:	4611      	mov	r1, r2
 80007e4:	4a35      	ldr	r2, [pc, #212]	; (80008bc <MGPIO_vSetOutputPinSpeed+0x168>)
 80007e6:	430b      	orrs	r3, r1
 80007e8:	6093      	str	r3, [r2, #8]
		break;
 80007ea:	e05f      	b.n	80008ac <MGPIO_vSetOutputPinSpeed+0x158>
	case PORTC:
		GPIOC->GPIO_OSPEEDR &= ~(0b11<<copy_eGPIO_Pin*2);
 80007ec:	4b34      	ldr	r3, [pc, #208]	; (80008c0 <MGPIO_vSetOutputPinSpeed+0x16c>)
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	79ba      	ldrb	r2, [r7, #6]
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	2103      	movs	r1, #3
 80007f6:	fa01 f202 	lsl.w	r2, r1, r2
 80007fa:	43d2      	mvns	r2, r2
 80007fc:	4611      	mov	r1, r2
 80007fe:	4a30      	ldr	r2, [pc, #192]	; (80008c0 <MGPIO_vSetOutputPinSpeed+0x16c>)
 8000800:	400b      	ands	r3, r1
 8000802:	6093      	str	r3, [r2, #8]
		GPIOC->GPIO_OSPEEDR |= (copy_GPIO_OSpeed<<copy_eGPIO_Pin*2);
 8000804:	4b2e      	ldr	r3, [pc, #184]	; (80008c0 <MGPIO_vSetOutputPinSpeed+0x16c>)
 8000806:	689b      	ldr	r3, [r3, #8]
 8000808:	7979      	ldrb	r1, [r7, #5]
 800080a:	79ba      	ldrb	r2, [r7, #6]
 800080c:	0052      	lsls	r2, r2, #1
 800080e:	fa01 f202 	lsl.w	r2, r1, r2
 8000812:	4611      	mov	r1, r2
 8000814:	4a2a      	ldr	r2, [pc, #168]	; (80008c0 <MGPIO_vSetOutputPinSpeed+0x16c>)
 8000816:	430b      	orrs	r3, r1
 8000818:	6093      	str	r3, [r2, #8]
		break;
 800081a:	e047      	b.n	80008ac <MGPIO_vSetOutputPinSpeed+0x158>
	case PORTD:
		GPIOD->GPIO_OSPEEDR &= ~(0b11<<copy_eGPIO_Pin*2);
 800081c:	4b29      	ldr	r3, [pc, #164]	; (80008c4 <MGPIO_vSetOutputPinSpeed+0x170>)
 800081e:	689b      	ldr	r3, [r3, #8]
 8000820:	79ba      	ldrb	r2, [r7, #6]
 8000822:	0052      	lsls	r2, r2, #1
 8000824:	2103      	movs	r1, #3
 8000826:	fa01 f202 	lsl.w	r2, r1, r2
 800082a:	43d2      	mvns	r2, r2
 800082c:	4611      	mov	r1, r2
 800082e:	4a25      	ldr	r2, [pc, #148]	; (80008c4 <MGPIO_vSetOutputPinSpeed+0x170>)
 8000830:	400b      	ands	r3, r1
 8000832:	6093      	str	r3, [r2, #8]
		GPIOD->GPIO_OSPEEDR |= (copy_GPIO_OSpeed<<copy_eGPIO_Pin*2);
 8000834:	4b23      	ldr	r3, [pc, #140]	; (80008c4 <MGPIO_vSetOutputPinSpeed+0x170>)
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	7979      	ldrb	r1, [r7, #5]
 800083a:	79ba      	ldrb	r2, [r7, #6]
 800083c:	0052      	lsls	r2, r2, #1
 800083e:	fa01 f202 	lsl.w	r2, r1, r2
 8000842:	4611      	mov	r1, r2
 8000844:	4a1f      	ldr	r2, [pc, #124]	; (80008c4 <MGPIO_vSetOutputPinSpeed+0x170>)
 8000846:	430b      	orrs	r3, r1
 8000848:	6093      	str	r3, [r2, #8]
		break;
 800084a:	e02f      	b.n	80008ac <MGPIO_vSetOutputPinSpeed+0x158>
	case PORTE:
		GPIOE->GPIO_OSPEEDR &= ~(0b11<<copy_eGPIO_Pin*2);
 800084c:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <MGPIO_vSetOutputPinSpeed+0x174>)
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	79ba      	ldrb	r2, [r7, #6]
 8000852:	0052      	lsls	r2, r2, #1
 8000854:	2103      	movs	r1, #3
 8000856:	fa01 f202 	lsl.w	r2, r1, r2
 800085a:	43d2      	mvns	r2, r2
 800085c:	4611      	mov	r1, r2
 800085e:	4a1a      	ldr	r2, [pc, #104]	; (80008c8 <MGPIO_vSetOutputPinSpeed+0x174>)
 8000860:	400b      	ands	r3, r1
 8000862:	6093      	str	r3, [r2, #8]
		GPIOE->GPIO_OSPEEDR |= (copy_GPIO_OSpeed<<copy_eGPIO_Pin*2);
 8000864:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MGPIO_vSetOutputPinSpeed+0x174>)
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	7979      	ldrb	r1, [r7, #5]
 800086a:	79ba      	ldrb	r2, [r7, #6]
 800086c:	0052      	lsls	r2, r2, #1
 800086e:	fa01 f202 	lsl.w	r2, r1, r2
 8000872:	4611      	mov	r1, r2
 8000874:	4a14      	ldr	r2, [pc, #80]	; (80008c8 <MGPIO_vSetOutputPinSpeed+0x174>)
 8000876:	430b      	orrs	r3, r1
 8000878:	6093      	str	r3, [r2, #8]
		break;
 800087a:	e017      	b.n	80008ac <MGPIO_vSetOutputPinSpeed+0x158>
	case PORTH:
		GPIOH->GPIO_OSPEEDR &= ~(0b11<<copy_eGPIO_Pin*2);
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MGPIO_vSetOutputPinSpeed+0x178>)
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	79ba      	ldrb	r2, [r7, #6]
 8000882:	0052      	lsls	r2, r2, #1
 8000884:	2103      	movs	r1, #3
 8000886:	fa01 f202 	lsl.w	r2, r1, r2
 800088a:	43d2      	mvns	r2, r2
 800088c:	4611      	mov	r1, r2
 800088e:	4a0f      	ldr	r2, [pc, #60]	; (80008cc <MGPIO_vSetOutputPinSpeed+0x178>)
 8000890:	400b      	ands	r3, r1
 8000892:	6093      	str	r3, [r2, #8]
		GPIOH->GPIO_OSPEEDR |= (copy_GPIO_OSpeed<<copy_eGPIO_Pin*2);
 8000894:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <MGPIO_vSetOutputPinSpeed+0x178>)
 8000896:	689b      	ldr	r3, [r3, #8]
 8000898:	7979      	ldrb	r1, [r7, #5]
 800089a:	79ba      	ldrb	r2, [r7, #6]
 800089c:	0052      	lsls	r2, r2, #1
 800089e:	fa01 f202 	lsl.w	r2, r1, r2
 80008a2:	4611      	mov	r1, r2
 80008a4:	4a09      	ldr	r2, [pc, #36]	; (80008cc <MGPIO_vSetOutputPinSpeed+0x178>)
 80008a6:	430b      	orrs	r3, r1
 80008a8:	6093      	str	r3, [r2, #8]
		break;
 80008aa:	bf00      	nop
	}

}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	40020000 	.word	0x40020000
 80008bc:	40020400 	.word	0x40020400
 80008c0:	40020800 	.word	0x40020800
 80008c4:	40020c00 	.word	0x40020c00
 80008c8:	40021000 	.word	0x40021000
 80008cc:	40021c00 	.word	0x40021c00

080008d0 <MGPIO_vSetInputPinPullUpDown>:
void MGPIO_vSetInputPinPullUpDown(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_PUPD_t copy_GPIO_PUPD)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
 80008da:	460b      	mov	r3, r1
 80008dc:	71bb      	strb	r3, [r7, #6]
 80008de:	4613      	mov	r3, r2
 80008e0:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	2b05      	cmp	r3, #5
 80008e6:	f200 809f 	bhi.w	8000a28 <MGPIO_vSetInputPinPullUpDown+0x158>
 80008ea:	a201      	add	r2, pc, #4	; (adr r2, 80008f0 <MGPIO_vSetInputPinPullUpDown+0x20>)
 80008ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f0:	08000909 	.word	0x08000909
 80008f4:	08000939 	.word	0x08000939
 80008f8:	08000969 	.word	0x08000969
 80008fc:	08000999 	.word	0x08000999
 8000900:	080009c9 	.word	0x080009c9
 8000904:	080009f9 	.word	0x080009f9
	{
	case PORTA:
		GPIOA->GPIO_PUPDR &= ~(0b11<<copy_eGPIO_Pin*2);
 8000908:	4b4a      	ldr	r3, [pc, #296]	; (8000a34 <MGPIO_vSetInputPinPullUpDown+0x164>)
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	79ba      	ldrb	r2, [r7, #6]
 800090e:	0052      	lsls	r2, r2, #1
 8000910:	2103      	movs	r1, #3
 8000912:	fa01 f202 	lsl.w	r2, r1, r2
 8000916:	43d2      	mvns	r2, r2
 8000918:	4611      	mov	r1, r2
 800091a:	4a46      	ldr	r2, [pc, #280]	; (8000a34 <MGPIO_vSetInputPinPullUpDown+0x164>)
 800091c:	400b      	ands	r3, r1
 800091e:	60d3      	str	r3, [r2, #12]
		GPIOA->GPIO_PUPDR |= (copy_GPIO_PUPD<<copy_eGPIO_Pin*2);
 8000920:	4b44      	ldr	r3, [pc, #272]	; (8000a34 <MGPIO_vSetInputPinPullUpDown+0x164>)
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	7979      	ldrb	r1, [r7, #5]
 8000926:	79ba      	ldrb	r2, [r7, #6]
 8000928:	0052      	lsls	r2, r2, #1
 800092a:	fa01 f202 	lsl.w	r2, r1, r2
 800092e:	4611      	mov	r1, r2
 8000930:	4a40      	ldr	r2, [pc, #256]	; (8000a34 <MGPIO_vSetInputPinPullUpDown+0x164>)
 8000932:	430b      	orrs	r3, r1
 8000934:	60d3      	str	r3, [r2, #12]
		break;
 8000936:	e077      	b.n	8000a28 <MGPIO_vSetInputPinPullUpDown+0x158>
	case PORTB:
		GPIOB->GPIO_PUPDR &= ~(0b11<<copy_eGPIO_Pin*2);
 8000938:	4b3f      	ldr	r3, [pc, #252]	; (8000a38 <MGPIO_vSetInputPinPullUpDown+0x168>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	79ba      	ldrb	r2, [r7, #6]
 800093e:	0052      	lsls	r2, r2, #1
 8000940:	2103      	movs	r1, #3
 8000942:	fa01 f202 	lsl.w	r2, r1, r2
 8000946:	43d2      	mvns	r2, r2
 8000948:	4611      	mov	r1, r2
 800094a:	4a3b      	ldr	r2, [pc, #236]	; (8000a38 <MGPIO_vSetInputPinPullUpDown+0x168>)
 800094c:	400b      	ands	r3, r1
 800094e:	60d3      	str	r3, [r2, #12]
		GPIOB->GPIO_PUPDR |= (copy_GPIO_PUPD<<copy_eGPIO_Pin*2);
 8000950:	4b39      	ldr	r3, [pc, #228]	; (8000a38 <MGPIO_vSetInputPinPullUpDown+0x168>)
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	7979      	ldrb	r1, [r7, #5]
 8000956:	79ba      	ldrb	r2, [r7, #6]
 8000958:	0052      	lsls	r2, r2, #1
 800095a:	fa01 f202 	lsl.w	r2, r1, r2
 800095e:	4611      	mov	r1, r2
 8000960:	4a35      	ldr	r2, [pc, #212]	; (8000a38 <MGPIO_vSetInputPinPullUpDown+0x168>)
 8000962:	430b      	orrs	r3, r1
 8000964:	60d3      	str	r3, [r2, #12]
		break;
 8000966:	e05f      	b.n	8000a28 <MGPIO_vSetInputPinPullUpDown+0x158>
	case PORTC:
		GPIOC->GPIO_PUPDR &= ~(0b11<<copy_eGPIO_Pin*2);
 8000968:	4b34      	ldr	r3, [pc, #208]	; (8000a3c <MGPIO_vSetInputPinPullUpDown+0x16c>)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	79ba      	ldrb	r2, [r7, #6]
 800096e:	0052      	lsls	r2, r2, #1
 8000970:	2103      	movs	r1, #3
 8000972:	fa01 f202 	lsl.w	r2, r1, r2
 8000976:	43d2      	mvns	r2, r2
 8000978:	4611      	mov	r1, r2
 800097a:	4a30      	ldr	r2, [pc, #192]	; (8000a3c <MGPIO_vSetInputPinPullUpDown+0x16c>)
 800097c:	400b      	ands	r3, r1
 800097e:	60d3      	str	r3, [r2, #12]
		GPIOC->GPIO_PUPDR |= (copy_GPIO_PUPD<<copy_eGPIO_Pin*2);
 8000980:	4b2e      	ldr	r3, [pc, #184]	; (8000a3c <MGPIO_vSetInputPinPullUpDown+0x16c>)
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	7979      	ldrb	r1, [r7, #5]
 8000986:	79ba      	ldrb	r2, [r7, #6]
 8000988:	0052      	lsls	r2, r2, #1
 800098a:	fa01 f202 	lsl.w	r2, r1, r2
 800098e:	4611      	mov	r1, r2
 8000990:	4a2a      	ldr	r2, [pc, #168]	; (8000a3c <MGPIO_vSetInputPinPullUpDown+0x16c>)
 8000992:	430b      	orrs	r3, r1
 8000994:	60d3      	str	r3, [r2, #12]
		break;
 8000996:	e047      	b.n	8000a28 <MGPIO_vSetInputPinPullUpDown+0x158>
	case PORTD:
		GPIOD->GPIO_PUPDR &= ~(0b11<<copy_eGPIO_Pin*2);
 8000998:	4b29      	ldr	r3, [pc, #164]	; (8000a40 <MGPIO_vSetInputPinPullUpDown+0x170>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	79ba      	ldrb	r2, [r7, #6]
 800099e:	0052      	lsls	r2, r2, #1
 80009a0:	2103      	movs	r1, #3
 80009a2:	fa01 f202 	lsl.w	r2, r1, r2
 80009a6:	43d2      	mvns	r2, r2
 80009a8:	4611      	mov	r1, r2
 80009aa:	4a25      	ldr	r2, [pc, #148]	; (8000a40 <MGPIO_vSetInputPinPullUpDown+0x170>)
 80009ac:	400b      	ands	r3, r1
 80009ae:	60d3      	str	r3, [r2, #12]
		GPIOD->GPIO_PUPDR |= (copy_GPIO_PUPD<<copy_eGPIO_Pin*2);
 80009b0:	4b23      	ldr	r3, [pc, #140]	; (8000a40 <MGPIO_vSetInputPinPullUpDown+0x170>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	7979      	ldrb	r1, [r7, #5]
 80009b6:	79ba      	ldrb	r2, [r7, #6]
 80009b8:	0052      	lsls	r2, r2, #1
 80009ba:	fa01 f202 	lsl.w	r2, r1, r2
 80009be:	4611      	mov	r1, r2
 80009c0:	4a1f      	ldr	r2, [pc, #124]	; (8000a40 <MGPIO_vSetInputPinPullUpDown+0x170>)
 80009c2:	430b      	orrs	r3, r1
 80009c4:	60d3      	str	r3, [r2, #12]
		break;
 80009c6:	e02f      	b.n	8000a28 <MGPIO_vSetInputPinPullUpDown+0x158>
	case PORTE:
		GPIOE->GPIO_PUPDR &= ~(0b11<<copy_eGPIO_Pin*2);
 80009c8:	4b1e      	ldr	r3, [pc, #120]	; (8000a44 <MGPIO_vSetInputPinPullUpDown+0x174>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	79ba      	ldrb	r2, [r7, #6]
 80009ce:	0052      	lsls	r2, r2, #1
 80009d0:	2103      	movs	r1, #3
 80009d2:	fa01 f202 	lsl.w	r2, r1, r2
 80009d6:	43d2      	mvns	r2, r2
 80009d8:	4611      	mov	r1, r2
 80009da:	4a1a      	ldr	r2, [pc, #104]	; (8000a44 <MGPIO_vSetInputPinPullUpDown+0x174>)
 80009dc:	400b      	ands	r3, r1
 80009de:	60d3      	str	r3, [r2, #12]
		GPIOE->GPIO_PUPDR |= (copy_GPIO_PUPD<<copy_eGPIO_Pin*2);
 80009e0:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <MGPIO_vSetInputPinPullUpDown+0x174>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	7979      	ldrb	r1, [r7, #5]
 80009e6:	79ba      	ldrb	r2, [r7, #6]
 80009e8:	0052      	lsls	r2, r2, #1
 80009ea:	fa01 f202 	lsl.w	r2, r1, r2
 80009ee:	4611      	mov	r1, r2
 80009f0:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <MGPIO_vSetInputPinPullUpDown+0x174>)
 80009f2:	430b      	orrs	r3, r1
 80009f4:	60d3      	str	r3, [r2, #12]
		break;
 80009f6:	e017      	b.n	8000a28 <MGPIO_vSetInputPinPullUpDown+0x158>
	case PORTH:
		GPIOH->GPIO_PUPDR &= ~(0b11<<copy_eGPIO_Pin*2);
 80009f8:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <MGPIO_vSetInputPinPullUpDown+0x178>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	79ba      	ldrb	r2, [r7, #6]
 80009fe:	0052      	lsls	r2, r2, #1
 8000a00:	2103      	movs	r1, #3
 8000a02:	fa01 f202 	lsl.w	r2, r1, r2
 8000a06:	43d2      	mvns	r2, r2
 8000a08:	4611      	mov	r1, r2
 8000a0a:	4a0f      	ldr	r2, [pc, #60]	; (8000a48 <MGPIO_vSetInputPinPullUpDown+0x178>)
 8000a0c:	400b      	ands	r3, r1
 8000a0e:	60d3      	str	r3, [r2, #12]
		GPIOH->GPIO_PUPDR |= (copy_GPIO_PUPD<<copy_eGPIO_Pin*2);
 8000a10:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <MGPIO_vSetInputPinPullUpDown+0x178>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	7979      	ldrb	r1, [r7, #5]
 8000a16:	79ba      	ldrb	r2, [r7, #6]
 8000a18:	0052      	lsls	r2, r2, #1
 8000a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4a09      	ldr	r2, [pc, #36]	; (8000a48 <MGPIO_vSetInputPinPullUpDown+0x178>)
 8000a22:	430b      	orrs	r3, r1
 8000a24:	60d3      	str	r3, [r2, #12]
		break;
 8000a26:	bf00      	nop
	}

}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	40020000 	.word	0x40020000
 8000a38:	40020400 	.word	0x40020400
 8000a3c:	40020800 	.word	0x40020800
 8000a40:	40020c00 	.word	0x40020c00
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40021c00 	.word	0x40021c00

08000a4c <MGPIO_vSetOutputPinValue>:
		break;
	}
	return 1;
}
void MGPIO_vSetOutputPinValue(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_ODR_t copy_GPIO_ODR)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
 8000a56:	460b      	mov	r3, r1
 8000a58:	71bb      	strb	r3, [r7, #6]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	2b05      	cmp	r3, #5
 8000a62:	f200 8093 	bhi.w	8000b8c <MGPIO_vSetOutputPinValue+0x140>
 8000a66:	a201      	add	r2, pc, #4	; (adr r2, 8000a6c <MGPIO_vSetOutputPinValue+0x20>)
 8000a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6c:	08000a85 	.word	0x08000a85
 8000a70:	08000ab1 	.word	0x08000ab1
 8000a74:	08000add 	.word	0x08000add
 8000a78:	08000b09 	.word	0x08000b09
 8000a7c:	08000b35 	.word	0x08000b35
 8000a80:	08000b61 	.word	0x08000b61
	{
	case PORTA:
		GPIOA->GPIO_ODR &= ~(0b1<<copy_eGPIO_Pin);
 8000a84:	4b44      	ldr	r3, [pc, #272]	; (8000b98 <MGPIO_vSetOutputPinValue+0x14c>)
 8000a86:	695b      	ldr	r3, [r3, #20]
 8000a88:	79ba      	ldrb	r2, [r7, #6]
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a90:	43d2      	mvns	r2, r2
 8000a92:	4611      	mov	r1, r2
 8000a94:	4a40      	ldr	r2, [pc, #256]	; (8000b98 <MGPIO_vSetOutputPinValue+0x14c>)
 8000a96:	400b      	ands	r3, r1
 8000a98:	6153      	str	r3, [r2, #20]
		GPIOA->GPIO_ODR |= (copy_GPIO_ODR<<copy_eGPIO_Pin);
 8000a9a:	4b3f      	ldr	r3, [pc, #252]	; (8000b98 <MGPIO_vSetOutputPinValue+0x14c>)
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	7979      	ldrb	r1, [r7, #5]
 8000aa0:	79ba      	ldrb	r2, [r7, #6]
 8000aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	4a3b      	ldr	r2, [pc, #236]	; (8000b98 <MGPIO_vSetOutputPinValue+0x14c>)
 8000aaa:	430b      	orrs	r3, r1
 8000aac:	6153      	str	r3, [r2, #20]
		break;
 8000aae:	e06d      	b.n	8000b8c <MGPIO_vSetOutputPinValue+0x140>
	case PORTB:
		GPIOB->GPIO_ODR &= ~(0b1<<copy_eGPIO_Pin);
 8000ab0:	4b3a      	ldr	r3, [pc, #232]	; (8000b9c <MGPIO_vSetOutputPinValue+0x150>)
 8000ab2:	695b      	ldr	r3, [r3, #20]
 8000ab4:	79ba      	ldrb	r2, [r7, #6]
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8000abc:	43d2      	mvns	r2, r2
 8000abe:	4611      	mov	r1, r2
 8000ac0:	4a36      	ldr	r2, [pc, #216]	; (8000b9c <MGPIO_vSetOutputPinValue+0x150>)
 8000ac2:	400b      	ands	r3, r1
 8000ac4:	6153      	str	r3, [r2, #20]
		GPIOB->GPIO_ODR |= (copy_GPIO_ODR<<copy_eGPIO_Pin);
 8000ac6:	4b35      	ldr	r3, [pc, #212]	; (8000b9c <MGPIO_vSetOutputPinValue+0x150>)
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	7979      	ldrb	r1, [r7, #5]
 8000acc:	79ba      	ldrb	r2, [r7, #6]
 8000ace:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	4a31      	ldr	r2, [pc, #196]	; (8000b9c <MGPIO_vSetOutputPinValue+0x150>)
 8000ad6:	430b      	orrs	r3, r1
 8000ad8:	6153      	str	r3, [r2, #20]
		break;
 8000ada:	e057      	b.n	8000b8c <MGPIO_vSetOutputPinValue+0x140>
	case PORTC:
		GPIOC->GPIO_ODR &= ~(0b1<<copy_eGPIO_Pin);
 8000adc:	4b30      	ldr	r3, [pc, #192]	; (8000ba0 <MGPIO_vSetOutputPinValue+0x154>)
 8000ade:	695b      	ldr	r3, [r3, #20]
 8000ae0:	79ba      	ldrb	r2, [r7, #6]
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae8:	43d2      	mvns	r2, r2
 8000aea:	4611      	mov	r1, r2
 8000aec:	4a2c      	ldr	r2, [pc, #176]	; (8000ba0 <MGPIO_vSetOutputPinValue+0x154>)
 8000aee:	400b      	ands	r3, r1
 8000af0:	6153      	str	r3, [r2, #20]
		GPIOC->GPIO_ODR |= (copy_GPIO_ODR<<copy_eGPIO_Pin);
 8000af2:	4b2b      	ldr	r3, [pc, #172]	; (8000ba0 <MGPIO_vSetOutputPinValue+0x154>)
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	7979      	ldrb	r1, [r7, #5]
 8000af8:	79ba      	ldrb	r2, [r7, #6]
 8000afa:	fa01 f202 	lsl.w	r2, r1, r2
 8000afe:	4611      	mov	r1, r2
 8000b00:	4a27      	ldr	r2, [pc, #156]	; (8000ba0 <MGPIO_vSetOutputPinValue+0x154>)
 8000b02:	430b      	orrs	r3, r1
 8000b04:	6153      	str	r3, [r2, #20]
		break;
 8000b06:	e041      	b.n	8000b8c <MGPIO_vSetOutputPinValue+0x140>
	case PORTD:
		GPIOD->GPIO_ODR &= ~(0b1<<copy_eGPIO_Pin);
 8000b08:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <MGPIO_vSetOutputPinValue+0x158>)
 8000b0a:	695b      	ldr	r3, [r3, #20]
 8000b0c:	79ba      	ldrb	r2, [r7, #6]
 8000b0e:	2101      	movs	r1, #1
 8000b10:	fa01 f202 	lsl.w	r2, r1, r2
 8000b14:	43d2      	mvns	r2, r2
 8000b16:	4611      	mov	r1, r2
 8000b18:	4a22      	ldr	r2, [pc, #136]	; (8000ba4 <MGPIO_vSetOutputPinValue+0x158>)
 8000b1a:	400b      	ands	r3, r1
 8000b1c:	6153      	str	r3, [r2, #20]
		GPIOD->GPIO_ODR |= (copy_GPIO_ODR<<copy_eGPIO_Pin);
 8000b1e:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <MGPIO_vSetOutputPinValue+0x158>)
 8000b20:	695b      	ldr	r3, [r3, #20]
 8000b22:	7979      	ldrb	r1, [r7, #5]
 8000b24:	79ba      	ldrb	r2, [r7, #6]
 8000b26:	fa01 f202 	lsl.w	r2, r1, r2
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ba4 <MGPIO_vSetOutputPinValue+0x158>)
 8000b2e:	430b      	orrs	r3, r1
 8000b30:	6153      	str	r3, [r2, #20]
		break;
 8000b32:	e02b      	b.n	8000b8c <MGPIO_vSetOutputPinValue+0x140>
	case PORTE:
		GPIOE->GPIO_ODR &= ~(0b1<<copy_eGPIO_Pin);
 8000b34:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <MGPIO_vSetOutputPinValue+0x15c>)
 8000b36:	695b      	ldr	r3, [r3, #20]
 8000b38:	79ba      	ldrb	r2, [r7, #6]
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b40:	43d2      	mvns	r2, r2
 8000b42:	4611      	mov	r1, r2
 8000b44:	4a18      	ldr	r2, [pc, #96]	; (8000ba8 <MGPIO_vSetOutputPinValue+0x15c>)
 8000b46:	400b      	ands	r3, r1
 8000b48:	6153      	str	r3, [r2, #20]
		GPIOE->GPIO_ODR |= (copy_GPIO_ODR<<copy_eGPIO_Pin);
 8000b4a:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <MGPIO_vSetOutputPinValue+0x15c>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	7979      	ldrb	r1, [r7, #5]
 8000b50:	79ba      	ldrb	r2, [r7, #6]
 8000b52:	fa01 f202 	lsl.w	r2, r1, r2
 8000b56:	4611      	mov	r1, r2
 8000b58:	4a13      	ldr	r2, [pc, #76]	; (8000ba8 <MGPIO_vSetOutputPinValue+0x15c>)
 8000b5a:	430b      	orrs	r3, r1
 8000b5c:	6153      	str	r3, [r2, #20]
		break;
 8000b5e:	e015      	b.n	8000b8c <MGPIO_vSetOutputPinValue+0x140>
	case PORTH:
		GPIOH->GPIO_ODR &= ~(0b1<<copy_eGPIO_Pin);
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <MGPIO_vSetOutputPinValue+0x160>)
 8000b62:	695b      	ldr	r3, [r3, #20]
 8000b64:	79ba      	ldrb	r2, [r7, #6]
 8000b66:	2101      	movs	r1, #1
 8000b68:	fa01 f202 	lsl.w	r2, r1, r2
 8000b6c:	43d2      	mvns	r2, r2
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <MGPIO_vSetOutputPinValue+0x160>)
 8000b72:	400b      	ands	r3, r1
 8000b74:	6153      	str	r3, [r2, #20]
		GPIOH->GPIO_ODR |= (copy_GPIO_ODR<<copy_eGPIO_Pin);
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <MGPIO_vSetOutputPinValue+0x160>)
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	7979      	ldrb	r1, [r7, #5]
 8000b7c:	79ba      	ldrb	r2, [r7, #6]
 8000b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b82:	4611      	mov	r1, r2
 8000b84:	4a09      	ldr	r2, [pc, #36]	; (8000bac <MGPIO_vSetOutputPinValue+0x160>)
 8000b86:	430b      	orrs	r3, r1
 8000b88:	6153      	str	r3, [r2, #20]
		break;
 8000b8a:	bf00      	nop
	}

}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	40020000 	.word	0x40020000
 8000b9c:	40020400 	.word	0x40020400
 8000ba0:	40020800 	.word	0x40020800
 8000ba4:	40020c00 	.word	0x40020c00
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40021c00 	.word	0x40021c00

08000bb0 <MGPIO_vSetOutputPinValueBSR>:
	}

}

void MGPIO_vSetOutputPinValueBSR(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_BS_t copy_GPIO_BS)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
 8000bba:	460b      	mov	r3, r1
 8000bbc:	71bb      	strb	r3, [r7, #6]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	2b05      	cmp	r3, #5
 8000bc6:	f200 80ca 	bhi.w	8000d5e <MGPIO_vSetOutputPinValueBSR+0x1ae>
 8000bca:	a201      	add	r2, pc, #4	; (adr r2, 8000bd0 <MGPIO_vSetOutputPinValueBSR+0x20>)
 8000bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd0:	08000be9 	.word	0x08000be9
 8000bd4:	08000c25 	.word	0x08000c25
 8000bd8:	08000c61 	.word	0x08000c61
 8000bdc:	08000c9b 	.word	0x08000c9b
 8000be0:	08000cd5 	.word	0x08000cd5
 8000be4:	08000d0f 	.word	0x08000d0f
	{
	case PORTA:
		if (copy_GPIO_BS == SET)
 8000be8:	797b      	ldrb	r3, [r7, #5]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d10a      	bne.n	8000c04 <MGPIO_vSetOutputPinValueBSR+0x54>
		{
			GPIOA->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8000bee:	4b5f      	ldr	r3, [pc, #380]	; (8000d6c <MGPIO_vSetOutputPinValueBSR+0x1bc>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	79ba      	ldrb	r2, [r7, #6]
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	4a5b      	ldr	r2, [pc, #364]	; (8000d6c <MGPIO_vSetOutputPinValueBSR+0x1bc>)
 8000bfe:	430b      	orrs	r3, r1
 8000c00:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOA->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}
		break;
 8000c02:	e0a1      	b.n	8000d48 <MGPIO_vSetOutputPinValueBSR+0x198>
		else if(copy_GPIO_BS == RESET)
 8000c04:	797b      	ldrb	r3, [r7, #5]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f040 809e 	bne.w	8000d48 <MGPIO_vSetOutputPinValueBSR+0x198>
			GPIOA->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000c0c:	4b57      	ldr	r3, [pc, #348]	; (8000d6c <MGPIO_vSetOutputPinValueBSR+0x1bc>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	79ba      	ldrb	r2, [r7, #6]
 8000c12:	3210      	adds	r2, #16
 8000c14:	2101      	movs	r1, #1
 8000c16:	fa01 f202 	lsl.w	r2, r1, r2
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	4a53      	ldr	r2, [pc, #332]	; (8000d6c <MGPIO_vSetOutputPinValueBSR+0x1bc>)
 8000c1e:	430b      	orrs	r3, r1
 8000c20:	6193      	str	r3, [r2, #24]
		break;
 8000c22:	e091      	b.n	8000d48 <MGPIO_vSetOutputPinValueBSR+0x198>
	case PORTB:
		if (copy_GPIO_BS == SET)
 8000c24:	797b      	ldrb	r3, [r7, #5]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d10a      	bne.n	8000c40 <MGPIO_vSetOutputPinValueBSR+0x90>
		{
			GPIOB->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8000c2a:	4b51      	ldr	r3, [pc, #324]	; (8000d70 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000c2c:	699b      	ldr	r3, [r3, #24]
 8000c2e:	79ba      	ldrb	r2, [r7, #6]
 8000c30:	2101      	movs	r1, #1
 8000c32:	fa01 f202 	lsl.w	r2, r1, r2
 8000c36:	4611      	mov	r1, r2
 8000c38:	4a4d      	ldr	r2, [pc, #308]	; (8000d70 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000c3a:	430b      	orrs	r3, r1
 8000c3c:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOB->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 8000c3e:	e085      	b.n	8000d4c <MGPIO_vSetOutputPinValueBSR+0x19c>
		else if(copy_GPIO_BS == RESET)
 8000c40:	797b      	ldrb	r3, [r7, #5]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f040 8082 	bne.w	8000d4c <MGPIO_vSetOutputPinValueBSR+0x19c>
			GPIOB->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000c48:	4b49      	ldr	r3, [pc, #292]	; (8000d70 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	79ba      	ldrb	r2, [r7, #6]
 8000c4e:	3210      	adds	r2, #16
 8000c50:	2101      	movs	r1, #1
 8000c52:	fa01 f202 	lsl.w	r2, r1, r2
 8000c56:	4611      	mov	r1, r2
 8000c58:	4a45      	ldr	r2, [pc, #276]	; (8000d70 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000c5a:	430b      	orrs	r3, r1
 8000c5c:	6193      	str	r3, [r2, #24]
		}		break;
 8000c5e:	e075      	b.n	8000d4c <MGPIO_vSetOutputPinValueBSR+0x19c>
	case PORTC:
		if (copy_GPIO_BS == SET)
 8000c60:	797b      	ldrb	r3, [r7, #5]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d10a      	bne.n	8000c7c <MGPIO_vSetOutputPinValueBSR+0xcc>
		{
			GPIOB->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8000c66:	4b42      	ldr	r3, [pc, #264]	; (8000d70 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	79ba      	ldrb	r2, [r7, #6]
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c72:	4611      	mov	r1, r2
 8000c74:	4a3e      	ldr	r2, [pc, #248]	; (8000d70 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000c76:	430b      	orrs	r3, r1
 8000c78:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOB->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 8000c7a:	e069      	b.n	8000d50 <MGPIO_vSetOutputPinValueBSR+0x1a0>
		else if(copy_GPIO_BS == RESET)
 8000c7c:	797b      	ldrb	r3, [r7, #5]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d166      	bne.n	8000d50 <MGPIO_vSetOutputPinValueBSR+0x1a0>
			GPIOB->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000c82:	4b3b      	ldr	r3, [pc, #236]	; (8000d70 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	79ba      	ldrb	r2, [r7, #6]
 8000c88:	3210      	adds	r2, #16
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c90:	4611      	mov	r1, r2
 8000c92:	4a37      	ldr	r2, [pc, #220]	; (8000d70 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000c94:	430b      	orrs	r3, r1
 8000c96:	6193      	str	r3, [r2, #24]
		}		break;
 8000c98:	e05a      	b.n	8000d50 <MGPIO_vSetOutputPinValueBSR+0x1a0>
	case PORTD:
		if (copy_GPIO_BS == SET)
 8000c9a:	797b      	ldrb	r3, [r7, #5]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d10a      	bne.n	8000cb6 <MGPIO_vSetOutputPinValueBSR+0x106>
		{
			GPIOD->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8000ca0:	4b34      	ldr	r3, [pc, #208]	; (8000d74 <MGPIO_vSetOutputPinValueBSR+0x1c4>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	79ba      	ldrb	r2, [r7, #6]
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cac:	4611      	mov	r1, r2
 8000cae:	4a31      	ldr	r2, [pc, #196]	; (8000d74 <MGPIO_vSetOutputPinValueBSR+0x1c4>)
 8000cb0:	430b      	orrs	r3, r1
 8000cb2:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOD->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 8000cb4:	e04e      	b.n	8000d54 <MGPIO_vSetOutputPinValueBSR+0x1a4>
		else if(copy_GPIO_BS == RESET)
 8000cb6:	797b      	ldrb	r3, [r7, #5]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d14b      	bne.n	8000d54 <MGPIO_vSetOutputPinValueBSR+0x1a4>
			GPIOD->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000cbc:	4b2d      	ldr	r3, [pc, #180]	; (8000d74 <MGPIO_vSetOutputPinValueBSR+0x1c4>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	79ba      	ldrb	r2, [r7, #6]
 8000cc2:	3210      	adds	r2, #16
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cca:	4611      	mov	r1, r2
 8000ccc:	4a29      	ldr	r2, [pc, #164]	; (8000d74 <MGPIO_vSetOutputPinValueBSR+0x1c4>)
 8000cce:	430b      	orrs	r3, r1
 8000cd0:	6193      	str	r3, [r2, #24]
		}		break;
 8000cd2:	e03f      	b.n	8000d54 <MGPIO_vSetOutputPinValueBSR+0x1a4>
	case PORTE:
		if (copy_GPIO_BS == SET)
 8000cd4:	797b      	ldrb	r3, [r7, #5]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d10a      	bne.n	8000cf0 <MGPIO_vSetOutputPinValueBSR+0x140>
		{
			GPIOE->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8000cda:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <MGPIO_vSetOutputPinValueBSR+0x1c8>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	79ba      	ldrb	r2, [r7, #6]
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	4a23      	ldr	r2, [pc, #140]	; (8000d78 <MGPIO_vSetOutputPinValueBSR+0x1c8>)
 8000cea:	430b      	orrs	r3, r1
 8000cec:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOE->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 8000cee:	e033      	b.n	8000d58 <MGPIO_vSetOutputPinValueBSR+0x1a8>
		else if(copy_GPIO_BS == RESET)
 8000cf0:	797b      	ldrb	r3, [r7, #5]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d130      	bne.n	8000d58 <MGPIO_vSetOutputPinValueBSR+0x1a8>
			GPIOE->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000cf6:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <MGPIO_vSetOutputPinValueBSR+0x1c8>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	79ba      	ldrb	r2, [r7, #6]
 8000cfc:	3210      	adds	r2, #16
 8000cfe:	2101      	movs	r1, #1
 8000d00:	fa01 f202 	lsl.w	r2, r1, r2
 8000d04:	4611      	mov	r1, r2
 8000d06:	4a1c      	ldr	r2, [pc, #112]	; (8000d78 <MGPIO_vSetOutputPinValueBSR+0x1c8>)
 8000d08:	430b      	orrs	r3, r1
 8000d0a:	6193      	str	r3, [r2, #24]
		}		break;
 8000d0c:	e024      	b.n	8000d58 <MGPIO_vSetOutputPinValueBSR+0x1a8>
	case PORTH:
		if (copy_GPIO_BS == SET)
 8000d0e:	797b      	ldrb	r3, [r7, #5]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d10a      	bne.n	8000d2a <MGPIO_vSetOutputPinValueBSR+0x17a>
		{
			GPIOH->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8000d14:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <MGPIO_vSetOutputPinValueBSR+0x1cc>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	79ba      	ldrb	r2, [r7, #6]
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d20:	4611      	mov	r1, r2
 8000d22:	4a16      	ldr	r2, [pc, #88]	; (8000d7c <MGPIO_vSetOutputPinValueBSR+0x1cc>)
 8000d24:	430b      	orrs	r3, r1
 8000d26:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOH->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 8000d28:	e018      	b.n	8000d5c <MGPIO_vSetOutputPinValueBSR+0x1ac>
		else if(copy_GPIO_BS == RESET)
 8000d2a:	797b      	ldrb	r3, [r7, #5]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d115      	bne.n	8000d5c <MGPIO_vSetOutputPinValueBSR+0x1ac>
			GPIOH->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <MGPIO_vSetOutputPinValueBSR+0x1cc>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	79ba      	ldrb	r2, [r7, #6]
 8000d36:	3210      	adds	r2, #16
 8000d38:	2101      	movs	r1, #1
 8000d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d3e:	4611      	mov	r1, r2
 8000d40:	4a0e      	ldr	r2, [pc, #56]	; (8000d7c <MGPIO_vSetOutputPinValueBSR+0x1cc>)
 8000d42:	430b      	orrs	r3, r1
 8000d44:	6193      	str	r3, [r2, #24]
		}		break;
 8000d46:	e009      	b.n	8000d5c <MGPIO_vSetOutputPinValueBSR+0x1ac>
		break;
 8000d48:	bf00      	nop
 8000d4a:	e008      	b.n	8000d5e <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 8000d4c:	bf00      	nop
 8000d4e:	e006      	b.n	8000d5e <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 8000d50:	bf00      	nop
 8000d52:	e004      	b.n	8000d5e <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 8000d54:	bf00      	nop
 8000d56:	e002      	b.n	8000d5e <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 8000d58:	bf00      	nop
 8000d5a:	e000      	b.n	8000d5e <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 8000d5c:	bf00      	nop
	}

}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	40020000 	.word	0x40020000
 8000d70:	40020400 	.word	0x40020400
 8000d74:	40020c00 	.word	0x40020c00
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40021c00 	.word	0x40021c00

08000d80 <MGPIO_vSetPinLockSTS>:
void MGPIO_vSetPinLockSTS(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_LCK_t copy_GPIO_LCK)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	71bb      	strb	r3, [r7, #6]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	2b05      	cmp	r3, #5
 8000d96:	f200 8093 	bhi.w	8000ec0 <MGPIO_vSetPinLockSTS+0x140>
 8000d9a:	a201      	add	r2, pc, #4	; (adr r2, 8000da0 <MGPIO_vSetPinLockSTS+0x20>)
 8000d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da0:	08000db9 	.word	0x08000db9
 8000da4:	08000de5 	.word	0x08000de5
 8000da8:	08000e11 	.word	0x08000e11
 8000dac:	08000e3d 	.word	0x08000e3d
 8000db0:	08000e69 	.word	0x08000e69
 8000db4:	08000e95 	.word	0x08000e95
	{
	case PORTA:
		GPIOA->GPIO_LCKR &= ~(0b1<<copy_eGPIO_Pin);
 8000db8:	4b44      	ldr	r3, [pc, #272]	; (8000ecc <MGPIO_vSetPinLockSTS+0x14c>)
 8000dba:	69db      	ldr	r3, [r3, #28]
 8000dbc:	79ba      	ldrb	r2, [r7, #6]
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc4:	43d2      	mvns	r2, r2
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	4a40      	ldr	r2, [pc, #256]	; (8000ecc <MGPIO_vSetPinLockSTS+0x14c>)
 8000dca:	400b      	ands	r3, r1
 8000dcc:	61d3      	str	r3, [r2, #28]
		GPIOA->GPIO_LCKR |= (copy_GPIO_LCK<<copy_eGPIO_Pin);
 8000dce:	4b3f      	ldr	r3, [pc, #252]	; (8000ecc <MGPIO_vSetPinLockSTS+0x14c>)
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	7979      	ldrb	r1, [r7, #5]
 8000dd4:	79ba      	ldrb	r2, [r7, #6]
 8000dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dda:	4611      	mov	r1, r2
 8000ddc:	4a3b      	ldr	r2, [pc, #236]	; (8000ecc <MGPIO_vSetPinLockSTS+0x14c>)
 8000dde:	430b      	orrs	r3, r1
 8000de0:	61d3      	str	r3, [r2, #28]
		break;
 8000de2:	e06d      	b.n	8000ec0 <MGPIO_vSetPinLockSTS+0x140>
	case PORTB:
		GPIOB->GPIO_LCKR &= ~(0b1<<copy_eGPIO_Pin);
 8000de4:	4b3a      	ldr	r3, [pc, #232]	; (8000ed0 <MGPIO_vSetPinLockSTS+0x150>)
 8000de6:	69db      	ldr	r3, [r3, #28]
 8000de8:	79ba      	ldrb	r2, [r7, #6]
 8000dea:	2101      	movs	r1, #1
 8000dec:	fa01 f202 	lsl.w	r2, r1, r2
 8000df0:	43d2      	mvns	r2, r2
 8000df2:	4611      	mov	r1, r2
 8000df4:	4a36      	ldr	r2, [pc, #216]	; (8000ed0 <MGPIO_vSetPinLockSTS+0x150>)
 8000df6:	400b      	ands	r3, r1
 8000df8:	61d3      	str	r3, [r2, #28]
		GPIOB->GPIO_LCKR |= (copy_GPIO_LCK<<copy_eGPIO_Pin);
 8000dfa:	4b35      	ldr	r3, [pc, #212]	; (8000ed0 <MGPIO_vSetPinLockSTS+0x150>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	7979      	ldrb	r1, [r7, #5]
 8000e00:	79ba      	ldrb	r2, [r7, #6]
 8000e02:	fa01 f202 	lsl.w	r2, r1, r2
 8000e06:	4611      	mov	r1, r2
 8000e08:	4a31      	ldr	r2, [pc, #196]	; (8000ed0 <MGPIO_vSetPinLockSTS+0x150>)
 8000e0a:	430b      	orrs	r3, r1
 8000e0c:	61d3      	str	r3, [r2, #28]
		break;
 8000e0e:	e057      	b.n	8000ec0 <MGPIO_vSetPinLockSTS+0x140>
	case PORTC:
		GPIOC->GPIO_LCKR &= ~(0b1<<copy_eGPIO_Pin);
 8000e10:	4b30      	ldr	r3, [pc, #192]	; (8000ed4 <MGPIO_vSetPinLockSTS+0x154>)
 8000e12:	69db      	ldr	r3, [r3, #28]
 8000e14:	79ba      	ldrb	r2, [r7, #6]
 8000e16:	2101      	movs	r1, #1
 8000e18:	fa01 f202 	lsl.w	r2, r1, r2
 8000e1c:	43d2      	mvns	r2, r2
 8000e1e:	4611      	mov	r1, r2
 8000e20:	4a2c      	ldr	r2, [pc, #176]	; (8000ed4 <MGPIO_vSetPinLockSTS+0x154>)
 8000e22:	400b      	ands	r3, r1
 8000e24:	61d3      	str	r3, [r2, #28]
		GPIOC->GPIO_LCKR |= (copy_GPIO_LCK<<copy_eGPIO_Pin);
 8000e26:	4b2b      	ldr	r3, [pc, #172]	; (8000ed4 <MGPIO_vSetPinLockSTS+0x154>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	7979      	ldrb	r1, [r7, #5]
 8000e2c:	79ba      	ldrb	r2, [r7, #6]
 8000e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e32:	4611      	mov	r1, r2
 8000e34:	4a27      	ldr	r2, [pc, #156]	; (8000ed4 <MGPIO_vSetPinLockSTS+0x154>)
 8000e36:	430b      	orrs	r3, r1
 8000e38:	61d3      	str	r3, [r2, #28]
		break;
 8000e3a:	e041      	b.n	8000ec0 <MGPIO_vSetPinLockSTS+0x140>
	case PORTD:
		GPIOD->GPIO_LCKR &= ~(0b1<<copy_eGPIO_Pin);
 8000e3c:	4b26      	ldr	r3, [pc, #152]	; (8000ed8 <MGPIO_vSetPinLockSTS+0x158>)
 8000e3e:	69db      	ldr	r3, [r3, #28]
 8000e40:	79ba      	ldrb	r2, [r7, #6]
 8000e42:	2101      	movs	r1, #1
 8000e44:	fa01 f202 	lsl.w	r2, r1, r2
 8000e48:	43d2      	mvns	r2, r2
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4a22      	ldr	r2, [pc, #136]	; (8000ed8 <MGPIO_vSetPinLockSTS+0x158>)
 8000e4e:	400b      	ands	r3, r1
 8000e50:	61d3      	str	r3, [r2, #28]
		GPIOD->GPIO_LCKR |= (copy_GPIO_LCK<<copy_eGPIO_Pin);
 8000e52:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <MGPIO_vSetPinLockSTS+0x158>)
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	7979      	ldrb	r1, [r7, #5]
 8000e58:	79ba      	ldrb	r2, [r7, #6]
 8000e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4a1d      	ldr	r2, [pc, #116]	; (8000ed8 <MGPIO_vSetPinLockSTS+0x158>)
 8000e62:	430b      	orrs	r3, r1
 8000e64:	61d3      	str	r3, [r2, #28]
		break;
 8000e66:	e02b      	b.n	8000ec0 <MGPIO_vSetPinLockSTS+0x140>
	case PORTE:
		GPIOE->GPIO_LCKR &= ~(0b1<<copy_eGPIO_Pin);
 8000e68:	4b1c      	ldr	r3, [pc, #112]	; (8000edc <MGPIO_vSetPinLockSTS+0x15c>)
 8000e6a:	69db      	ldr	r3, [r3, #28]
 8000e6c:	79ba      	ldrb	r2, [r7, #6]
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fa01 f202 	lsl.w	r2, r1, r2
 8000e74:	43d2      	mvns	r2, r2
 8000e76:	4611      	mov	r1, r2
 8000e78:	4a18      	ldr	r2, [pc, #96]	; (8000edc <MGPIO_vSetPinLockSTS+0x15c>)
 8000e7a:	400b      	ands	r3, r1
 8000e7c:	61d3      	str	r3, [r2, #28]
		GPIOE->GPIO_LCKR |= (copy_GPIO_LCK<<copy_eGPIO_Pin);
 8000e7e:	4b17      	ldr	r3, [pc, #92]	; (8000edc <MGPIO_vSetPinLockSTS+0x15c>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	7979      	ldrb	r1, [r7, #5]
 8000e84:	79ba      	ldrb	r2, [r7, #6]
 8000e86:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	4a13      	ldr	r2, [pc, #76]	; (8000edc <MGPIO_vSetPinLockSTS+0x15c>)
 8000e8e:	430b      	orrs	r3, r1
 8000e90:	61d3      	str	r3, [r2, #28]
		break;
 8000e92:	e015      	b.n	8000ec0 <MGPIO_vSetPinLockSTS+0x140>
	case PORTH:
		GPIOH->GPIO_LCKR &= ~(0b1<<copy_eGPIO_Pin);
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <MGPIO_vSetPinLockSTS+0x160>)
 8000e96:	69db      	ldr	r3, [r3, #28]
 8000e98:	79ba      	ldrb	r2, [r7, #6]
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea0:	43d2      	mvns	r2, r2
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <MGPIO_vSetPinLockSTS+0x160>)
 8000ea6:	400b      	ands	r3, r1
 8000ea8:	61d3      	str	r3, [r2, #28]
		GPIOH->GPIO_LCKR |= (copy_GPIO_LCK<<copy_eGPIO_Pin);
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <MGPIO_vSetPinLockSTS+0x160>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	7979      	ldrb	r1, [r7, #5]
 8000eb0:	79ba      	ldrb	r2, [r7, #6]
 8000eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <MGPIO_vSetPinLockSTS+0x160>)
 8000eba:	430b      	orrs	r3, r1
 8000ebc:	61d3      	str	r3, [r2, #28]
		break;
 8000ebe:	bf00      	nop
	}

}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	40020000 	.word	0x40020000
 8000ed0:	40020400 	.word	0x40020400
 8000ed4:	40020800 	.word	0x40020800
 8000ed8:	40020c00 	.word	0x40020c00
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40021c00 	.word	0x40021c00

08000ee4 <MGPIO_vSetPinAlternativeFunction>:
void MGPIO_vSetPinAlternativeFunction(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_AF_t copy_GPIO_AF)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
 8000eee:	460b      	mov	r3, r1
 8000ef0:	71bb      	strb	r3, [r7, #6]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	2b05      	cmp	r3, #5
 8000efa:	f200 8117 	bhi.w	800112c <MGPIO_vSetPinAlternativeFunction+0x248>
 8000efe:	a201      	add	r2, pc, #4	; (adr r2, 8000f04 <MGPIO_vSetPinAlternativeFunction+0x20>)
 8000f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f04:	08000f1d 	.word	0x08000f1d
 8000f08:	08000f75 	.word	0x08000f75
 8000f0c:	08000fcd 	.word	0x08000fcd
 8000f10:	08001025 	.word	0x08001025
 8000f14:	0800107d 	.word	0x0800107d
 8000f18:	080010d5 	.word	0x080010d5
	{
	case PORTA:
		GPIOA->GPIO_AFR[copy_eGPIO_Pin/8] &= ~(0b1111	   <<(copy_eGPIO_Pin %8)*4);
 8000f1c:	4a86      	ldr	r2, [pc, #536]	; (8001138 <MGPIO_vSetPinAlternativeFunction+0x254>)
 8000f1e:	79bb      	ldrb	r3, [r7, #6]
 8000f20:	08db      	lsrs	r3, r3, #3
 8000f22:	b2d8      	uxtb	r0, r3
 8000f24:	4603      	mov	r3, r0
 8000f26:	3308      	adds	r3, #8
 8000f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2c:	79ba      	ldrb	r2, [r7, #6]
 8000f2e:	f002 0207 	and.w	r2, r2, #7
 8000f32:	0092      	lsls	r2, r2, #2
 8000f34:	210f      	movs	r1, #15
 8000f36:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3a:	43d2      	mvns	r2, r2
 8000f3c:	497e      	ldr	r1, [pc, #504]	; (8001138 <MGPIO_vSetPinAlternativeFunction+0x254>)
 8000f3e:	401a      	ands	r2, r3
 8000f40:	f100 0308 	add.w	r3, r0, #8
 8000f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		GPIOA->GPIO_AFR[copy_eGPIO_Pin/8] |= (copy_GPIO_AF <<(copy_eGPIO_Pin %8)*4);
 8000f48:	4a7b      	ldr	r2, [pc, #492]	; (8001138 <MGPIO_vSetPinAlternativeFunction+0x254>)
 8000f4a:	79bb      	ldrb	r3, [r7, #6]
 8000f4c:	08db      	lsrs	r3, r3, #3
 8000f4e:	b2d8      	uxtb	r0, r3
 8000f50:	4603      	mov	r3, r0
 8000f52:	3308      	adds	r3, #8
 8000f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f58:	7979      	ldrb	r1, [r7, #5]
 8000f5a:	79ba      	ldrb	r2, [r7, #6]
 8000f5c:	f002 0207 	and.w	r2, r2, #7
 8000f60:	0092      	lsls	r2, r2, #2
 8000f62:	fa01 f202 	lsl.w	r2, r1, r2
 8000f66:	4974      	ldr	r1, [pc, #464]	; (8001138 <MGPIO_vSetPinAlternativeFunction+0x254>)
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	f100 0308 	add.w	r3, r0, #8
 8000f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		break;
 8000f72:	e0db      	b.n	800112c <MGPIO_vSetPinAlternativeFunction+0x248>
	case PORTB:
		GPIOB->GPIO_AFR[copy_eGPIO_Pin/8] &= ~(0b1111	   <<(copy_eGPIO_Pin %8)*4);
 8000f74:	4a71      	ldr	r2, [pc, #452]	; (800113c <MGPIO_vSetPinAlternativeFunction+0x258>)
 8000f76:	79bb      	ldrb	r3, [r7, #6]
 8000f78:	08db      	lsrs	r3, r3, #3
 8000f7a:	b2d8      	uxtb	r0, r3
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	3308      	adds	r3, #8
 8000f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f84:	79ba      	ldrb	r2, [r7, #6]
 8000f86:	f002 0207 	and.w	r2, r2, #7
 8000f8a:	0092      	lsls	r2, r2, #2
 8000f8c:	210f      	movs	r1, #15
 8000f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f92:	43d2      	mvns	r2, r2
 8000f94:	4969      	ldr	r1, [pc, #420]	; (800113c <MGPIO_vSetPinAlternativeFunction+0x258>)
 8000f96:	401a      	ands	r2, r3
 8000f98:	f100 0308 	add.w	r3, r0, #8
 8000f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		GPIOB->GPIO_AFR[copy_eGPIO_Pin/8] |= (copy_GPIO_AF <<(copy_eGPIO_Pin %8)*4);
 8000fa0:	4a66      	ldr	r2, [pc, #408]	; (800113c <MGPIO_vSetPinAlternativeFunction+0x258>)
 8000fa2:	79bb      	ldrb	r3, [r7, #6]
 8000fa4:	08db      	lsrs	r3, r3, #3
 8000fa6:	b2d8      	uxtb	r0, r3
 8000fa8:	4603      	mov	r3, r0
 8000faa:	3308      	adds	r3, #8
 8000fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb0:	7979      	ldrb	r1, [r7, #5]
 8000fb2:	79ba      	ldrb	r2, [r7, #6]
 8000fb4:	f002 0207 	and.w	r2, r2, #7
 8000fb8:	0092      	lsls	r2, r2, #2
 8000fba:	fa01 f202 	lsl.w	r2, r1, r2
 8000fbe:	495f      	ldr	r1, [pc, #380]	; (800113c <MGPIO_vSetPinAlternativeFunction+0x258>)
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	f100 0308 	add.w	r3, r0, #8
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8000fca:	e0af      	b.n	800112c <MGPIO_vSetPinAlternativeFunction+0x248>
	case PORTC:
		GPIOC->GPIO_AFR[copy_eGPIO_Pin/8] &= ~(0b1111	   <<(copy_eGPIO_Pin %8)*4);
 8000fcc:	4a5c      	ldr	r2, [pc, #368]	; (8001140 <MGPIO_vSetPinAlternativeFunction+0x25c>)
 8000fce:	79bb      	ldrb	r3, [r7, #6]
 8000fd0:	08db      	lsrs	r3, r3, #3
 8000fd2:	b2d8      	uxtb	r0, r3
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	3308      	adds	r3, #8
 8000fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fdc:	79ba      	ldrb	r2, [r7, #6]
 8000fde:	f002 0207 	and.w	r2, r2, #7
 8000fe2:	0092      	lsls	r2, r2, #2
 8000fe4:	210f      	movs	r1, #15
 8000fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fea:	43d2      	mvns	r2, r2
 8000fec:	4954      	ldr	r1, [pc, #336]	; (8001140 <MGPIO_vSetPinAlternativeFunction+0x25c>)
 8000fee:	401a      	ands	r2, r3
 8000ff0:	f100 0308 	add.w	r3, r0, #8
 8000ff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		GPIOC->GPIO_AFR[copy_eGPIO_Pin/8] |= (copy_GPIO_AF <<(copy_eGPIO_Pin %8)*4);
 8000ff8:	4a51      	ldr	r2, [pc, #324]	; (8001140 <MGPIO_vSetPinAlternativeFunction+0x25c>)
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	08db      	lsrs	r3, r3, #3
 8000ffe:	b2d8      	uxtb	r0, r3
 8001000:	4603      	mov	r3, r0
 8001002:	3308      	adds	r3, #8
 8001004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001008:	7979      	ldrb	r1, [r7, #5]
 800100a:	79ba      	ldrb	r2, [r7, #6]
 800100c:	f002 0207 	and.w	r2, r2, #7
 8001010:	0092      	lsls	r2, r2, #2
 8001012:	fa01 f202 	lsl.w	r2, r1, r2
 8001016:	494a      	ldr	r1, [pc, #296]	; (8001140 <MGPIO_vSetPinAlternativeFunction+0x25c>)
 8001018:	431a      	orrs	r2, r3
 800101a:	f100 0308 	add.w	r3, r0, #8
 800101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8001022:	e083      	b.n	800112c <MGPIO_vSetPinAlternativeFunction+0x248>
	case PORTD:
		GPIOD->GPIO_AFR[copy_eGPIO_Pin/8] &= ~(0b1111	   <<(copy_eGPIO_Pin %8)*4);
 8001024:	4a47      	ldr	r2, [pc, #284]	; (8001144 <MGPIO_vSetPinAlternativeFunction+0x260>)
 8001026:	79bb      	ldrb	r3, [r7, #6]
 8001028:	08db      	lsrs	r3, r3, #3
 800102a:	b2d8      	uxtb	r0, r3
 800102c:	4603      	mov	r3, r0
 800102e:	3308      	adds	r3, #8
 8001030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001034:	79ba      	ldrb	r2, [r7, #6]
 8001036:	f002 0207 	and.w	r2, r2, #7
 800103a:	0092      	lsls	r2, r2, #2
 800103c:	210f      	movs	r1, #15
 800103e:	fa01 f202 	lsl.w	r2, r1, r2
 8001042:	43d2      	mvns	r2, r2
 8001044:	493f      	ldr	r1, [pc, #252]	; (8001144 <MGPIO_vSetPinAlternativeFunction+0x260>)
 8001046:	401a      	ands	r2, r3
 8001048:	f100 0308 	add.w	r3, r0, #8
 800104c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		GPIOD->GPIO_AFR[copy_eGPIO_Pin/8] |= (copy_GPIO_AF <<(copy_eGPIO_Pin %8)*4);
 8001050:	4a3c      	ldr	r2, [pc, #240]	; (8001144 <MGPIO_vSetPinAlternativeFunction+0x260>)
 8001052:	79bb      	ldrb	r3, [r7, #6]
 8001054:	08db      	lsrs	r3, r3, #3
 8001056:	b2d8      	uxtb	r0, r3
 8001058:	4603      	mov	r3, r0
 800105a:	3308      	adds	r3, #8
 800105c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001060:	7979      	ldrb	r1, [r7, #5]
 8001062:	79ba      	ldrb	r2, [r7, #6]
 8001064:	f002 0207 	and.w	r2, r2, #7
 8001068:	0092      	lsls	r2, r2, #2
 800106a:	fa01 f202 	lsl.w	r2, r1, r2
 800106e:	4935      	ldr	r1, [pc, #212]	; (8001144 <MGPIO_vSetPinAlternativeFunction+0x260>)
 8001070:	431a      	orrs	r2, r3
 8001072:	f100 0308 	add.w	r3, r0, #8
 8001076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 800107a:	e057      	b.n	800112c <MGPIO_vSetPinAlternativeFunction+0x248>
	case PORTE:
		GPIOE->GPIO_AFR[copy_eGPIO_Pin/8] &= ~(0b1111	   <<(copy_eGPIO_Pin %8)*4);
 800107c:	4a32      	ldr	r2, [pc, #200]	; (8001148 <MGPIO_vSetPinAlternativeFunction+0x264>)
 800107e:	79bb      	ldrb	r3, [r7, #6]
 8001080:	08db      	lsrs	r3, r3, #3
 8001082:	b2d8      	uxtb	r0, r3
 8001084:	4603      	mov	r3, r0
 8001086:	3308      	adds	r3, #8
 8001088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108c:	79ba      	ldrb	r2, [r7, #6]
 800108e:	f002 0207 	and.w	r2, r2, #7
 8001092:	0092      	lsls	r2, r2, #2
 8001094:	210f      	movs	r1, #15
 8001096:	fa01 f202 	lsl.w	r2, r1, r2
 800109a:	43d2      	mvns	r2, r2
 800109c:	492a      	ldr	r1, [pc, #168]	; (8001148 <MGPIO_vSetPinAlternativeFunction+0x264>)
 800109e:	401a      	ands	r2, r3
 80010a0:	f100 0308 	add.w	r3, r0, #8
 80010a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		GPIOE->GPIO_AFR[copy_eGPIO_Pin/8] |= (copy_GPIO_AF <<(copy_eGPIO_Pin %8)*4);
 80010a8:	4a27      	ldr	r2, [pc, #156]	; (8001148 <MGPIO_vSetPinAlternativeFunction+0x264>)
 80010aa:	79bb      	ldrb	r3, [r7, #6]
 80010ac:	08db      	lsrs	r3, r3, #3
 80010ae:	b2d8      	uxtb	r0, r3
 80010b0:	4603      	mov	r3, r0
 80010b2:	3308      	adds	r3, #8
 80010b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b8:	7979      	ldrb	r1, [r7, #5]
 80010ba:	79ba      	ldrb	r2, [r7, #6]
 80010bc:	f002 0207 	and.w	r2, r2, #7
 80010c0:	0092      	lsls	r2, r2, #2
 80010c2:	fa01 f202 	lsl.w	r2, r1, r2
 80010c6:	4920      	ldr	r1, [pc, #128]	; (8001148 <MGPIO_vSetPinAlternativeFunction+0x264>)
 80010c8:	431a      	orrs	r2, r3
 80010ca:	f100 0308 	add.w	r3, r0, #8
 80010ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 80010d2:	e02b      	b.n	800112c <MGPIO_vSetPinAlternativeFunction+0x248>
	case PORTH:
		GPIOH->GPIO_AFR[copy_eGPIO_Pin/8] &= ~(0b1111	   <<(copy_eGPIO_Pin %8)*4);
 80010d4:	4a1d      	ldr	r2, [pc, #116]	; (800114c <MGPIO_vSetPinAlternativeFunction+0x268>)
 80010d6:	79bb      	ldrb	r3, [r7, #6]
 80010d8:	08db      	lsrs	r3, r3, #3
 80010da:	b2d8      	uxtb	r0, r3
 80010dc:	4603      	mov	r3, r0
 80010de:	3308      	adds	r3, #8
 80010e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e4:	79ba      	ldrb	r2, [r7, #6]
 80010e6:	f002 0207 	and.w	r2, r2, #7
 80010ea:	0092      	lsls	r2, r2, #2
 80010ec:	210f      	movs	r1, #15
 80010ee:	fa01 f202 	lsl.w	r2, r1, r2
 80010f2:	43d2      	mvns	r2, r2
 80010f4:	4915      	ldr	r1, [pc, #84]	; (800114c <MGPIO_vSetPinAlternativeFunction+0x268>)
 80010f6:	401a      	ands	r2, r3
 80010f8:	f100 0308 	add.w	r3, r0, #8
 80010fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		GPIOH->GPIO_AFR[copy_eGPIO_Pin/8] |= (copy_GPIO_AF <<(copy_eGPIO_Pin %8)*4);
 8001100:	4a12      	ldr	r2, [pc, #72]	; (800114c <MGPIO_vSetPinAlternativeFunction+0x268>)
 8001102:	79bb      	ldrb	r3, [r7, #6]
 8001104:	08db      	lsrs	r3, r3, #3
 8001106:	b2d8      	uxtb	r0, r3
 8001108:	4603      	mov	r3, r0
 800110a:	3308      	adds	r3, #8
 800110c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001110:	7979      	ldrb	r1, [r7, #5]
 8001112:	79ba      	ldrb	r2, [r7, #6]
 8001114:	f002 0207 	and.w	r2, r2, #7
 8001118:	0092      	lsls	r2, r2, #2
 800111a:	fa01 f202 	lsl.w	r2, r1, r2
 800111e:	490b      	ldr	r1, [pc, #44]	; (800114c <MGPIO_vSetPinAlternativeFunction+0x268>)
 8001120:	431a      	orrs	r2, r3
 8001122:	f100 0308 	add.w	r3, r0, #8
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 800112a:	bf00      	nop
	}


}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	40020000 	.word	0x40020000
 800113c:	40020400 	.word	0x40020400
 8001140:	40020800 	.word	0x40020800
 8001144:	40020c00 	.word	0x40020c00
 8001148:	40021000 	.word	0x40021000
 800114c:	40021c00 	.word	0x40021c00

08001150 <RCC_AHB1EnableCLK>:
	RCC->RCC_CR&= ~(1<<CSSON);
	RCC->RCC_CR|=(copy_eClock_detector<<CSSON);
}

void RCC_AHB1EnableCLK(PeripheralAHB1_t peripheral)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
	SET_BIT(RCC->RCC_AHB1ENR,peripheral);
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <RCC_AHB1EnableCLK+0x2c>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	79fa      	ldrb	r2, [r7, #7]
 8001160:	2101      	movs	r1, #1
 8001162:	fa01 f202 	lsl.w	r2, r1, r2
 8001166:	4611      	mov	r1, r2
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <RCC_AHB1EnableCLK+0x2c>)
 800116a:	430b      	orrs	r3, r1
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800

08001180 <RCC_APB2EnableCLK>:
	CLEAR_BIT(RCC->RCC_APB1ENR,peripheral);

}

void RCC_APB2EnableCLK(PeripheralAPB2_t peripheral)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
	SET_BIT(RCC->RCC_APB2ENR,peripheral);
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <RCC_APB2EnableCLK+0x2c>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	79fa      	ldrb	r2, [r7, #7]
 8001190:	2101      	movs	r1, #1
 8001192:	fa01 f202 	lsl.w	r2, r1, r2
 8001196:	4611      	mov	r1, r2
 8001198:	4a04      	ldr	r2, [pc, #16]	; (80011ac <RCC_APB2EnableCLK+0x2c>)
 800119a:	430b      	orrs	r3, r1
 800119c:	6453      	str	r3, [r2, #68]	; 0x44

}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800

080011b0 <SPI_vInit>:
#include "SPI_int.h"
#include "Utils.h"
#include "RCC_Interface.h"
#include "GPIO_Interface.h"
void SPI_vInit()
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	; 0x28
 80011b4:	af00      	add	r7, sp, #0
	RCC_APB2EnableCLK(SPI1EN);
 80011b6:	200c      	movs	r0, #12
 80011b8:	f7ff ffe2 	bl	8001180 <RCC_APB2EnableCLK>

	/*1- CPHA and CPOL CFG*/
	SET_BIT(SPI->SPI_CR1,CPHA);
 80011bc:	4b38      	ldr	r3, [pc, #224]	; (80012a0 <SPI_vInit+0xf0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a37      	ldr	r2, [pc, #220]	; (80012a0 <SPI_vInit+0xf0>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	6013      	str	r3, [r2, #0]
	SET_BIT(SPI->SPI_CR1,CPOL);
 80011c8:	4b35      	ldr	r3, [pc, #212]	; (80012a0 <SPI_vInit+0xf0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a34      	ldr	r2, [pc, #208]	; (80012a0 <SPI_vInit+0xf0>)
 80011ce:	f043 0302 	orr.w	r3, r3, #2
 80011d2:	6013      	str	r3, [r2, #0]
	/*2- select Master*/
	SET_BIT(SPI->SPI_CR1,MSTR);
 80011d4:	4b32      	ldr	r3, [pc, #200]	; (80012a0 <SPI_vInit+0xf0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a31      	ldr	r2, [pc, #196]	; (80012a0 <SPI_vInit+0xf0>)
 80011da:	f043 0304 	orr.w	r3, r3, #4
 80011de:	6013      	str	r3, [r2, #0]
	/*3- CFG BaudRate*/
	SPI->SPI_CR1 &= ~(0b111 << SPI_BR0);
 80011e0:	4b2f      	ldr	r3, [pc, #188]	; (80012a0 <SPI_vInit+0xf0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a2e      	ldr	r2, [pc, #184]	; (80012a0 <SPI_vInit+0xf0>)
 80011e6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80011ea:	6013      	str	r3, [r2, #0]
	SPI->SPI_CR1 |=  (0b011 << SPI_BR0);
 80011ec:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <SPI_vInit+0xf0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a2b      	ldr	r2, [pc, #172]	; (80012a0 <SPI_vInit+0xf0>)
 80011f2:	f043 0318 	orr.w	r3, r3, #24
 80011f6:	6013      	str	r3, [r2, #0]
	/*4- MSB first*/
	CLEAR_BIT(SPI->SPI_CR1,LSBFIRST);
 80011f8:	4b29      	ldr	r3, [pc, #164]	; (80012a0 <SPI_vInit+0xf0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a28      	ldr	r2, [pc, #160]	; (80012a0 <SPI_vInit+0xf0>)
 80011fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001202:	6013      	str	r3, [r2, #0]
	/*5- SSM and ISS CFG*/
	SET_BIT(SPI->SPI_CR1,SSI);
 8001204:	4b26      	ldr	r3, [pc, #152]	; (80012a0 <SPI_vInit+0xf0>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a25      	ldr	r2, [pc, #148]	; (80012a0 <SPI_vInit+0xf0>)
 800120a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800120e:	6013      	str	r3, [r2, #0]
	SET_BIT(SPI->SPI_CR1,SSM);
 8001210:	4b23      	ldr	r3, [pc, #140]	; (80012a0 <SPI_vInit+0xf0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a22      	ldr	r2, [pc, #136]	; (80012a0 <SPI_vInit+0xf0>)
 8001216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800121a:	6013      	str	r3, [r2, #0]
	/*6- Data length*/
	CLEAR_BIT(SPI->SPI_CR1,DFF); // 8 bit
 800121c:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <SPI_vInit+0xf0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a1f      	ldr	r2, [pc, #124]	; (80012a0 <SPI_vInit+0xf0>)
 8001222:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001226:	6013      	str	r3, [r2, #0]
	/*7- SPI Enable*/
	SET_BIT(SPI->SPI_CR1,SPE);
 8001228:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <SPI_vInit+0xf0>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a1c      	ldr	r2, [pc, #112]	; (80012a0 <SPI_vInit+0xf0>)
 800122e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001232:	6013      	str	r3, [r2, #0]

	GPIO_CFG_t MOSI =
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	721a      	strb	r2, [r3, #8]
 8001240:	2307      	movs	r3, #7
 8001242:	777b      	strb	r3, [r7, #29]
 8001244:	2302      	movs	r3, #2
 8001246:	77bb      	strb	r3, [r7, #30]
 8001248:	2305      	movs	r3, #5
 800124a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			.PIN_Type=ALTERNATE,
			.PIN_OType=PUSH_PULL,
			.PIN_OSpeed=LOW_SPEED,
			.PIN_AF=AF5
	};
	GPIO_CFG_t MISO =
 800124e:	f107 0310 	add.w	r3, r7, #16
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	721a      	strb	r2, [r3, #8]
 800125a:	2306      	movs	r3, #6
 800125c:	747b      	strb	r3, [r7, #17]
 800125e:	2302      	movs	r3, #2
 8001260:	74bb      	strb	r3, [r7, #18]
 8001262:	2305      	movs	r3, #5
 8001264:	763b      	strb	r3, [r7, #24]
			.PIN_Type=ALTERNATE,
			.PIN_IPullUpDown=NO_PULL,
			.PIN_OSpeed=LOW_SPEED,
			.PIN_AF=AF5
	};
	GPIO_CFG_t SCK =
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	721a      	strb	r2, [r3, #8]
 8001270:	2305      	movs	r3, #5
 8001272:	717b      	strb	r3, [r7, #5]
 8001274:	2302      	movs	r3, #2
 8001276:	71bb      	strb	r3, [r7, #6]
 8001278:	2305      	movs	r3, #5
 800127a:	733b      	strb	r3, [r7, #12]
			.PIN_OType=PUSH_PULL,
			.PIN_OSpeed=LOW_SPEED,
			.PIN_AF=AF5

	};
	MGPIO_Init( &MOSI);
 800127c:	f107 031c 	add.w	r3, r7, #28
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff f8a7 	bl	80003d4 <MGPIO_Init>
	MGPIO_Init( &MISO);
 8001286:	f107 0310 	add.w	r3, r7, #16
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff f8a2 	bl	80003d4 <MGPIO_Init>
	MGPIO_Init( &SCK );
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f89e 	bl	80003d4 <MGPIO_Init>


}
 8001298:	bf00      	nop
 800129a:	3728      	adds	r7, #40	; 0x28
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40013000 	.word	0x40013000

080012a4 <SPI_Transceiving>:
uint8_t SPI_Transceiving(uint8_t copy_u16Data)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
	uint8_t k=0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	73fb      	strb	r3, [r7, #15]
//	while(READ_BIT(SPI->SPI_SR,BSY));
	SPI->SPI_DR=copy_u16Data;
 80012b2:	4a0b      	ldr	r2, [pc, #44]	; (80012e0 <SPI_Transceiving+0x3c>)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	60d3      	str	r3, [r2, #12]
	while(READ_BIT(SPI->SPI_SR,BSY)==1)
 80012b8:	e000      	b.n	80012bc <SPI_Transceiving+0x18>
	{
		asm("NOP");
 80012ba:	bf00      	nop
	while(READ_BIT(SPI->SPI_SR,BSY)==1)
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <SPI_Transceiving+0x3c>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	09db      	lsrs	r3, r3, #7
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d0f7      	beq.n	80012ba <SPI_Transceiving+0x16>
	}
	k=SPI->SPI_DR;
 80012ca:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <SPI_Transceiving+0x3c>)
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	73fb      	strb	r3, [r7, #15]
	return k;
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40013000 	.word	0x40013000

080012e4 <SysTick_Handler>:
#include "SysTick_Interface.h"
STK_Callback_t Global_SysTickCallback;
Interval_t Global_Interval;

void SysTick_Handler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	if (Global_Interval == Interval_Single)
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <SysTick_Handler+0x2c>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d105      	bne.n	80012fc <SysTick_Handler+0x18>
	{
		//disable counter
		CLEAR_BIT(MSTK->STK_CTRL,ENABLE);
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <SysTick_Handler+0x30>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a07      	ldr	r2, [pc, #28]	; (8001314 <SysTick_Handler+0x30>)
 80012f6:	f023 0301 	bic.w	r3, r3, #1
 80012fa:	6013      	str	r3, [r2, #0]
	}
	if (Global_SysTickCallback != 0)
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <SysTick_Handler+0x34>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d002      	beq.n	800130a <SysTick_Handler+0x26>
	{
		Global_SysTickCallback();
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <SysTick_Handler+0x34>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4798      	blx	r3
	}
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	2000a078 	.word	0x2000a078
 8001314:	e000e010 	.word	0xe000e010
 8001318:	2000a074 	.word	0x2000a074

0800131c <MSTK_vInit>:

void MSTK_vInit()
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
	/*1. CLK SRC*/
	CLEAR_BIT(MSTK->STK_CTRL,CLKSOURCE); // AHB/8 = 2 MHz
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <MSTK_vInit+0x28>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a07      	ldr	r2, [pc, #28]	; (8001344 <MSTK_vInit+0x28>)
 8001326:	f023 0304 	bic.w	r3, r3, #4
 800132a:	6013      	str	r3, [r2, #0]

	/*2. interrupt enable  */
	CLEAR_BIT(MSTK->STK_CTRL,TICKINT); // Enable INT
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <MSTK_vInit+0x28>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a04      	ldr	r2, [pc, #16]	; (8001344 <MSTK_vInit+0x28>)
 8001332:	f023 0302 	bic.w	r3, r3, #2
 8001336:	6013      	str	r3, [r2, #0]


}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000e010 	.word	0xe000e010

08001348 <MSTK_vSetBusyWaitms>:
	// stop timer
	SET_BIT(MSTK->STK_CTRL,ENABLE);

}
void MSTK_vSetBusyWaitms(uint32_t copy_u32Ticks)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	// reset timer value to clear count flag
	MSTK->STK_VAL = 0 ;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <MSTK_vSetBusyWaitms+0x50>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
	// load timer
	MSTK->STK_LOAD=copy_u32Ticks*2000;
 8001356:	4a10      	ldr	r2, [pc, #64]	; (8001398 <MSTK_vSetBusyWaitms+0x50>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800135e:	fb01 f303 	mul.w	r3, r1, r3
 8001362:	6053      	str	r3, [r2, #4]
	//Enable timer
	SET_BIT(MSTK->STK_CTRL,ENABLE);
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <MSTK_vSetBusyWaitms+0x50>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <MSTK_vSetBusyWaitms+0x50>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	6013      	str	r3, [r2, #0]
	//Busy wait
	while(READ_BIT(MSTK->STK_CTRL,COUNTFLAG) != 1);
 8001370:	bf00      	nop
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <MSTK_vSetBusyWaitms+0x50>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	0c1b      	lsrs	r3, r3, #16
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	2b01      	cmp	r3, #1
 800137e:	d1f8      	bne.n	8001372 <MSTK_vSetBusyWaitms+0x2a>
	// stop timer
	SET_BIT(MSTK->STK_CTRL,ENABLE);
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <MSTK_vSetBusyWaitms+0x50>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a04      	ldr	r2, [pc, #16]	; (8001398 <MSTK_vSetBusyWaitms+0x50>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6013      	str	r3, [r2, #0]

}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000e010 	.word	0xe000e010

0800139c <MSTK_vSetBusyWaitus>:
void MSTK_vSetBusyWaitus(uint32_t copy_u32Ticks)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	// reset timer value to clear count flag
	MSTK->STK_VAL = 0 ;
 80013a4:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <MSTK_vSetBusyWaitus+0x4c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
	// load timer
	MSTK->STK_LOAD=copy_u32Ticks*2;
 80013aa:	4a0f      	ldr	r2, [pc, #60]	; (80013e8 <MSTK_vSetBusyWaitus+0x4c>)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	6053      	str	r3, [r2, #4]
	//Enable timer
	SET_BIT(MSTK->STK_CTRL,ENABLE);
 80013b2:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <MSTK_vSetBusyWaitus+0x4c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a0c      	ldr	r2, [pc, #48]	; (80013e8 <MSTK_vSetBusyWaitus+0x4c>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6013      	str	r3, [r2, #0]
	//Busy wait
	while(READ_BIT(MSTK->STK_CTRL,COUNTFLAG) != 1);
 80013be:	bf00      	nop
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MSTK_vSetBusyWaitus+0x4c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	0c1b      	lsrs	r3, r3, #16
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d1f8      	bne.n	80013c0 <MSTK_vSetBusyWaitus+0x24>
	// stop timer
	SET_BIT(MSTK->STK_CTRL,ENABLE);
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MSTK_vSetBusyWaitus+0x4c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <MSTK_vSetBusyWaitus+0x4c>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6013      	str	r3, [r2, #0]

}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000e010 	.word	0xe000e010

080013ec <main>:
#include "SysTick_Interface.h"
#include "RCC_Interface.h"
#include "SPI_int.h"

int main(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	MSTK_vInit();
 80013f0:	f7ff ff94 	bl	800131c <MSTK_vInit>

	TFT_vInit();
 80013f4:	f7fe ff5c 	bl	80002b0 <TFT_vInit>
	TFT_vDisplay(arrImage);
 80013f8:	4801      	ldr	r0, [pc, #4]	; (8001400 <main+0x14>)
 80013fa:	f7fe ff7d 	bl	80002f8 <TFT_vDisplay>

    /* Loop forever */
	for(;;);
 80013fe:	e7fe      	b.n	80013fe <main+0x12>
 8001400:	20000000 	.word	0x20000000

08001404 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001404:	480d      	ldr	r0, [pc, #52]	; (800143c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001406:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001408:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800140c:	480c      	ldr	r0, [pc, #48]	; (8001440 <LoopForever+0x6>)
  ldr r1, =_edata
 800140e:	490d      	ldr	r1, [pc, #52]	; (8001444 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001410:	4a0d      	ldr	r2, [pc, #52]	; (8001448 <LoopForever+0xe>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001414:	e002      	b.n	800141c <LoopCopyDataInit>

08001416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141a:	3304      	adds	r3, #4

0800141c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800141c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001420:	d3f9      	bcc.n	8001416 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001424:	4c0a      	ldr	r4, [pc, #40]	; (8001450 <LoopForever+0x16>)
  movs r3, #0
 8001426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001428:	e001      	b.n	800142e <LoopFillZerobss>

0800142a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800142a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800142c:	3204      	adds	r2, #4

0800142e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001430:	d3fb      	bcc.n	800142a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001432:	f000 f811 	bl	8001458 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001436:	f7ff ffd9 	bl	80013ec <main>

0800143a <LoopForever>:

LoopForever:
  b LoopForever
 800143a:	e7fe      	b.n	800143a <LoopForever>
  ldr   r0, =_estack
 800143c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001444:	2000a018 	.word	0x2000a018
  ldr r2, =_sidata
 8001448:	080014c0 	.word	0x080014c0
  ldr r2, =_sbss
 800144c:	2000a018 	.word	0x2000a018
  ldr r4, =_ebss
 8001450:	2000a07c 	.word	0x2000a07c

08001454 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001454:	e7fe      	b.n	8001454 <ADC_IRQHandler>
	...

08001458 <__libc_init_array>:
 8001458:	b570      	push	{r4, r5, r6, lr}
 800145a:	4d0d      	ldr	r5, [pc, #52]	; (8001490 <__libc_init_array+0x38>)
 800145c:	4c0d      	ldr	r4, [pc, #52]	; (8001494 <__libc_init_array+0x3c>)
 800145e:	1b64      	subs	r4, r4, r5
 8001460:	10a4      	asrs	r4, r4, #2
 8001462:	2600      	movs	r6, #0
 8001464:	42a6      	cmp	r6, r4
 8001466:	d109      	bne.n	800147c <__libc_init_array+0x24>
 8001468:	4d0b      	ldr	r5, [pc, #44]	; (8001498 <__libc_init_array+0x40>)
 800146a:	4c0c      	ldr	r4, [pc, #48]	; (800149c <__libc_init_array+0x44>)
 800146c:	f000 f818 	bl	80014a0 <_init>
 8001470:	1b64      	subs	r4, r4, r5
 8001472:	10a4      	asrs	r4, r4, #2
 8001474:	2600      	movs	r6, #0
 8001476:	42a6      	cmp	r6, r4
 8001478:	d105      	bne.n	8001486 <__libc_init_array+0x2e>
 800147a:	bd70      	pop	{r4, r5, r6, pc}
 800147c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001480:	4798      	blx	r3
 8001482:	3601      	adds	r6, #1
 8001484:	e7ee      	b.n	8001464 <__libc_init_array+0xc>
 8001486:	f855 3b04 	ldr.w	r3, [r5], #4
 800148a:	4798      	blx	r3
 800148c:	3601      	adds	r6, #1
 800148e:	e7f2      	b.n	8001476 <__libc_init_array+0x1e>
 8001490:	080014b8 	.word	0x080014b8
 8001494:	080014b8 	.word	0x080014b8
 8001498:	080014b8 	.word	0x080014b8
 800149c:	080014bc 	.word	0x080014bc

080014a0 <_init>:
 80014a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014a2:	bf00      	nop
 80014a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014a6:	bc08      	pop	{r3}
 80014a8:	469e      	mov	lr, r3
 80014aa:	4770      	bx	lr

080014ac <_fini>:
 80014ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ae:	bf00      	nop
 80014b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014b2:	bc08      	pop	{r3}
 80014b4:	469e      	mov	lr, r3
 80014b6:	4770      	bx	lr
