
12-TFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001324  08004194  08004194  00004194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080054b8  080054b8  0001a018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080054b8  080054b8  0001a018  2**0
                  CONTENTS
  4 .ARM          00000000  080054b8  080054b8  0001a018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054b8  080054b8  0001a018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054b8  080054b8  000054b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054bc  080054bc  000054bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000a018  20000000  080054c0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000a018  0800f4d8  0001a018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a07c  0800f4d8  0001a07c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000027a9  00000000  00000000  0001a048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000095c  00000000  00000000  0001c7f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002c0  00000000  00000000  0001d150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000014fe  00000000  00000000  0001d410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000045dc  00000000  00000000  0001e90e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00009362  00000000  00000000  00022eea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0002c24c  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000218  00000000  00000000  0002c2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000008d8  00000000  00000000  0002c4b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004194 <__do_global_dtors_aux>:
 8004194:	b510      	push	{r4, lr}
 8004196:	4c05      	ldr	r4, [pc, #20]	; (80041ac <__do_global_dtors_aux+0x18>)
 8004198:	7823      	ldrb	r3, [r4, #0]
 800419a:	b933      	cbnz	r3, 80041aa <__do_global_dtors_aux+0x16>
 800419c:	4b04      	ldr	r3, [pc, #16]	; (80041b0 <__do_global_dtors_aux+0x1c>)
 800419e:	b113      	cbz	r3, 80041a6 <__do_global_dtors_aux+0x12>
 80041a0:	4804      	ldr	r0, [pc, #16]	; (80041b4 <__do_global_dtors_aux+0x20>)
 80041a2:	f3af 8000 	nop.w
 80041a6:	2301      	movs	r3, #1
 80041a8:	7023      	strb	r3, [r4, #0]
 80041aa:	bd10      	pop	{r4, pc}
 80041ac:	2000a018 	.word	0x2000a018
 80041b0:	00000000 	.word	0x00000000
 80041b4:	080054a0 	.word	0x080054a0

080041b8 <frame_dummy>:
 80041b8:	b508      	push	{r3, lr}
 80041ba:	4b03      	ldr	r3, [pc, #12]	; (80041c8 <frame_dummy+0x10>)
 80041bc:	b11b      	cbz	r3, 80041c6 <frame_dummy+0xe>
 80041be:	4903      	ldr	r1, [pc, #12]	; (80041cc <frame_dummy+0x14>)
 80041c0:	4803      	ldr	r0, [pc, #12]	; (80041d0 <frame_dummy+0x18>)
 80041c2:	f3af 8000 	nop.w
 80041c6:	bd08      	pop	{r3, pc}
 80041c8:	00000000 	.word	0x00000000
 80041cc:	2000a01c 	.word	0x2000a01c
 80041d0:	080054a0 	.word	0x080054a0

080041d4 <TFT_vWriteCommand>:
#include "SPI_int.h"
#include "GPIO_Interface.h"
#include "SysTick_Interface.h"

void TFT_vWriteCommand(uint8_t copy_u8Command)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	4603      	mov	r3, r0
 80041dc:	71fb      	strb	r3, [r7, #7]
	MGPIO_vSetOutputPinValue(Control_Pin.PIN_Port,Control_Pin.PIN_Number,OUTPUT_LOW);
 80041de:	4b08      	ldr	r3, [pc, #32]	; (8004200 <TFT_vWriteCommand+0x2c>)
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	4a07      	ldr	r2, [pc, #28]	; (8004200 <TFT_vWriteCommand+0x2c>)
 80041e4:	7851      	ldrb	r1, [r2, #1]
 80041e6:	2200      	movs	r2, #0
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 fc2f 	bl	8004a4c <MGPIO_vSetOutputPinValue>
	SPI_Transceiving( copy_u8Command);
 80041ee:	79fb      	ldrb	r3, [r7, #7]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f001 f857 	bl	80052a4 <SPI_Transceiving>


}
 80041f6:	bf00      	nop
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	2000a00c 	.word	0x2000a00c

08004204 <TFT_vWriteData>:
void TFT_vWriteData(uint8_t copy_u8Data)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	4603      	mov	r3, r0
 800420c:	71fb      	strb	r3, [r7, #7]
	MGPIO_vSetOutputPinValue(Control_Pin.PIN_Port,Control_Pin.PIN_Number,OUTPUT_HIGH);
 800420e:	4b08      	ldr	r3, [pc, #32]	; (8004230 <TFT_vWriteData+0x2c>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	4a07      	ldr	r2, [pc, #28]	; (8004230 <TFT_vWriteData+0x2c>)
 8004214:	7851      	ldrb	r1, [r2, #1]
 8004216:	2201      	movs	r2, #1
 8004218:	4618      	mov	r0, r3
 800421a:	f000 fc17 	bl	8004a4c <MGPIO_vSetOutputPinValue>
	SPI_Transceiving( copy_u8Data);
 800421e:	79fb      	ldrb	r3, [r7, #7]
 8004220:	4618      	mov	r0, r3
 8004222:	f001 f83f 	bl	80052a4 <SPI_Transceiving>

}
 8004226:	bf00      	nop
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	2000a00c 	.word	0x2000a00c

08004234 <TFT_vTFTSequense>:
void TFT_vTFTSequense()
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0

	MGPIO_vSetOutputPinValue(Reset_Pin.PIN_Port,Reset_Pin.PIN_Number,OUTPUT_HIGH);
 8004238:	4b1c      	ldr	r3, [pc, #112]	; (80042ac <TFT_vTFTSequense+0x78>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	4a1b      	ldr	r2, [pc, #108]	; (80042ac <TFT_vTFTSequense+0x78>)
 800423e:	7851      	ldrb	r1, [r2, #1]
 8004240:	2201      	movs	r2, #1
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fc02 	bl	8004a4c <MGPIO_vSetOutputPinValue>
	MSTK_vSetBusyWaitus(100);
 8004248:	2064      	movs	r0, #100	; 0x64
 800424a:	f001 f8a7 	bl	800539c <MSTK_vSetBusyWaitus>
	MGPIO_vSetOutputPinValue(Reset_Pin.PIN_Port,Reset_Pin.PIN_Number,OUTPUT_LOW);
 800424e:	4b17      	ldr	r3, [pc, #92]	; (80042ac <TFT_vTFTSequense+0x78>)
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	4a16      	ldr	r2, [pc, #88]	; (80042ac <TFT_vTFTSequense+0x78>)
 8004254:	7851      	ldrb	r1, [r2, #1]
 8004256:	2200      	movs	r2, #0
 8004258:	4618      	mov	r0, r3
 800425a:	f000 fbf7 	bl	8004a4c <MGPIO_vSetOutputPinValue>
	MSTK_vSetBusyWaitus(1);
 800425e:	2001      	movs	r0, #1
 8004260:	f001 f89c 	bl	800539c <MSTK_vSetBusyWaitus>
	MGPIO_vSetOutputPinValue(Reset_Pin.PIN_Port,Reset_Pin.PIN_Number,OUTPUT_HIGH);
 8004264:	4b11      	ldr	r3, [pc, #68]	; (80042ac <TFT_vTFTSequense+0x78>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	4a10      	ldr	r2, [pc, #64]	; (80042ac <TFT_vTFTSequense+0x78>)
 800426a:	7851      	ldrb	r1, [r2, #1]
 800426c:	2201      	movs	r2, #1
 800426e:	4618      	mov	r0, r3
 8004270:	f000 fbec 	bl	8004a4c <MGPIO_vSetOutputPinValue>
	MSTK_vSetBusyWaitus(100);
 8004274:	2064      	movs	r0, #100	; 0x64
 8004276:	f001 f891 	bl	800539c <MSTK_vSetBusyWaitus>
	MGPIO_vSetOutputPinValue(Reset_Pin.PIN_Port,Reset_Pin.PIN_Number,OUTPUT_LOW);
 800427a:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <TFT_vTFTSequense+0x78>)
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	4a0b      	ldr	r2, [pc, #44]	; (80042ac <TFT_vTFTSequense+0x78>)
 8004280:	7851      	ldrb	r1, [r2, #1]
 8004282:	2200      	movs	r2, #0
 8004284:	4618      	mov	r0, r3
 8004286:	f000 fbe1 	bl	8004a4c <MGPIO_vSetOutputPinValue>
	MSTK_vSetBusyWaitus(100);
 800428a:	2064      	movs	r0, #100	; 0x64
 800428c:	f001 f886 	bl	800539c <MSTK_vSetBusyWaitus>
	MGPIO_vSetOutputPinValue(Reset_Pin.PIN_Port,Reset_Pin.PIN_Number,OUTPUT_HIGH);
 8004290:	4b06      	ldr	r3, [pc, #24]	; (80042ac <TFT_vTFTSequense+0x78>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	4a05      	ldr	r2, [pc, #20]	; (80042ac <TFT_vTFTSequense+0x78>)
 8004296:	7851      	ldrb	r1, [r2, #1]
 8004298:	2201      	movs	r2, #1
 800429a:	4618      	mov	r0, r3
 800429c:	f000 fbd6 	bl	8004a4c <MGPIO_vSetOutputPinValue>
	MSTK_vSetBusyWaitms(120);
 80042a0:	2078      	movs	r0, #120	; 0x78
 80042a2:	f001 f851 	bl	8005348 <MSTK_vSetBusyWaitms>



}
 80042a6:	bf00      	nop
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	2000a000 	.word	0x2000a000

080042b0 <TFT_vInit>:
void TFT_vInit()
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
	MGPIO_Init( &Reset_Pin);
 80042b4:	480e      	ldr	r0, [pc, #56]	; (80042f0 <TFT_vInit+0x40>)
 80042b6:	f000 f88d 	bl	80043d4 <MGPIO_Init>
	MGPIO_Init( &Control_Pin);
 80042ba:	480e      	ldr	r0, [pc, #56]	; (80042f4 <TFT_vInit+0x44>)
 80042bc:	f000 f88a 	bl	80043d4 <MGPIO_Init>
	SPI_vInit();
 80042c0:	f000 ff76 	bl	80051b0 <SPI_vInit>
	MSTK_vInit();
 80042c4:	f001 f82a 	bl	800531c <MSTK_vInit>
	TFT_vTFTSequense();
 80042c8:	f7ff ffb4 	bl	8004234 <TFT_vTFTSequense>
	TFT_vWriteCommand(0x11); // SLeepPOUT
 80042cc:	2011      	movs	r0, #17
 80042ce:	f7ff ff81 	bl	80041d4 <TFT_vWriteCommand>
	MSTK_vSetBusyWaitms(15);
 80042d2:	200f      	movs	r0, #15
 80042d4:	f001 f838 	bl	8005348 <MSTK_vSetBusyWaitms>
	TFT_vWriteCommand(0x3A); // color mode
 80042d8:	203a      	movs	r0, #58	; 0x3a
 80042da:	f7ff ff7b 	bl	80041d4 <TFT_vWriteCommand>
	TFT_vWriteData(0x05); // RGB 565
 80042de:	2005      	movs	r0, #5
 80042e0:	f7ff ff90 	bl	8004204 <TFT_vWriteData>
	TFT_vWriteCommand(0x29); // display on
 80042e4:	2029      	movs	r0, #41	; 0x29
 80042e6:	f7ff ff75 	bl	80041d4 <TFT_vWriteCommand>

}
 80042ea:	bf00      	nop
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	2000a000 	.word	0x2000a000
 80042f4:	2000a00c 	.word	0x2000a00c

080042f8 <TFT_vDisplay>:
void TFT_vDisplay(uint16_t* copy_pu16ArrayImage)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
	/* 1- Set X */
	TFT_vWriteCommand(0x2A);
 8004300:	202a      	movs	r0, #42	; 0x2a
 8004302:	f7ff ff67 	bl	80041d4 <TFT_vWriteCommand>
	TFT_vWriteData(0x00);
 8004306:	2000      	movs	r0, #0
 8004308:	f7ff ff7c 	bl	8004204 <TFT_vWriteData>
	TFT_vWriteData(0x00);
 800430c:	2000      	movs	r0, #0
 800430e:	f7ff ff79 	bl	8004204 <TFT_vWriteData>
	TFT_vWriteData(0x00);
 8004312:	2000      	movs	r0, #0
 8004314:	f7ff ff76 	bl	8004204 <TFT_vWriteData>
	TFT_vWriteData(127);
 8004318:	207f      	movs	r0, #127	; 0x7f
 800431a:	f7ff ff73 	bl	8004204 <TFT_vWriteData>
	/* 1- Set Y */
	TFT_vWriteCommand(0x2B);
 800431e:	202b      	movs	r0, #43	; 0x2b
 8004320:	f7ff ff58 	bl	80041d4 <TFT_vWriteCommand>
	TFT_vWriteData(0x00);
 8004324:	2000      	movs	r0, #0
 8004326:	f7ff ff6d 	bl	8004204 <TFT_vWriteData>
	TFT_vWriteData(0x00);
 800432a:	2000      	movs	r0, #0
 800432c:	f7ff ff6a 	bl	8004204 <TFT_vWriteData>
	TFT_vWriteData(0x00);
 8004330:	2000      	movs	r0, #0
 8004332:	f7ff ff67 	bl	8004204 <TFT_vWriteData>
	TFT_vWriteData(159);
 8004336:	209f      	movs	r0, #159	; 0x9f
 8004338:	f7ff ff64 	bl	8004204 <TFT_vWriteData>

	TFT_vWriteCommand(0x2C); // send image command
 800433c:	202c      	movs	r0, #44	; 0x2c
 800433e:	f7ff ff49 	bl	80041d4 <TFT_vWriteCommand>

	for(uint16_t i =0 ; i < 20480 ; i++)
 8004342:	2300      	movs	r3, #0
 8004344:	81fb      	strh	r3, [r7, #14]
 8004346:	e018      	b.n	800437a <TFT_vDisplay+0x82>
	{
		uint8_t LowByte= (uint8_t)copy_pu16ArrayImage[i];
 8004348:	89fb      	ldrh	r3, [r7, #14]
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	4413      	add	r3, r2
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	737b      	strb	r3, [r7, #13]
		uint8_t HighByte= (uint8_t)(copy_pu16ArrayImage[i]>>8);
 8004354:	89fb      	ldrh	r3, [r7, #14]
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	4413      	add	r3, r2
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	0a1b      	lsrs	r3, r3, #8
 8004360:	b29b      	uxth	r3, r3
 8004362:	733b      	strb	r3, [r7, #12]

		TFT_vWriteData(HighByte);
 8004364:	7b3b      	ldrb	r3, [r7, #12]
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff ff4c 	bl	8004204 <TFT_vWriteData>
		TFT_vWriteData(LowByte);
 800436c:	7b7b      	ldrb	r3, [r7, #13]
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff ff48 	bl	8004204 <TFT_vWriteData>
	for(uint16_t i =0 ; i < 20480 ; i++)
 8004374:	89fb      	ldrh	r3, [r7, #14]
 8004376:	3301      	adds	r3, #1
 8004378:	81fb      	strh	r3, [r7, #14]
 800437a:	89fb      	ldrh	r3, [r7, #14]
 800437c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004380:	d3e2      	bcc.n	8004348 <TFT_vDisplay+0x50>

	}

}
 8004382:	bf00      	nop
 8004384:	bf00      	nop
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <EXTI0_IRQHandler>:
#include "RCC_Interface.h"

EXTI_Callback_t Global_EXTICallBack[16];

void EXTI0_IRQHandler(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
	//if (Global_EXTICallBack[0] != NULL)
	Global_EXTICallBack[0]();
 8004390:	4b05      	ldr	r3, [pc, #20]	; (80043a8 <EXTI0_IRQHandler+0x1c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4798      	blx	r3
	SET_BIT(MEXTI->EXTI_PR,EXTI_LINE_0);
 8004396:	4b05      	ldr	r3, [pc, #20]	; (80043ac <EXTI0_IRQHandler+0x20>)
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	4a04      	ldr	r2, [pc, #16]	; (80043ac <EXTI0_IRQHandler+0x20>)
 800439c:	f043 0301 	orr.w	r3, r3, #1
 80043a0:	6153      	str	r3, [r2, #20]
}
 80043a2:	bf00      	nop
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	2000a034 	.word	0x2000a034
 80043ac:	40013c00 	.word	0x40013c00

080043b0 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
//	if (Global_EXTICallBack[1] != NULL)
	Global_EXTICallBack[1]();
 80043b4:	4b05      	ldr	r3, [pc, #20]	; (80043cc <EXTI1_IRQHandler+0x1c>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	4798      	blx	r3
	SET_BIT(MEXTI->EXTI_PR,EXTI_LINE_1);
 80043ba:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <EXTI1_IRQHandler+0x20>)
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	4a04      	ldr	r2, [pc, #16]	; (80043d0 <EXTI1_IRQHandler+0x20>)
 80043c0:	f043 0302 	orr.w	r3, r3, #2
 80043c4:	6153      	str	r3, [r2, #20]

}
 80043c6:	bf00      	nop
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	2000a034 	.word	0x2000a034
 80043d0:	40013c00 	.word	0x40013c00

080043d4 <MGPIO_Init>:
#include "GPIO_Interface.h"
#include "RCC_Interface.h"
#include "Utils.h"

void MGPIO_Init(GPIO_CFG_t* copy_GPIO_pCFG)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
	RCC_AHB1EnableCLK(GPIOAEN);
 80043dc:	2000      	movs	r0, #0
 80043de:	f000 feb7 	bl	8005150 <RCC_AHB1EnableCLK>
	RCC_AHB1EnableCLK(GPIOBEN);
 80043e2:	2001      	movs	r0, #1
 80043e4:	f000 feb4 	bl	8005150 <RCC_AHB1EnableCLK>

	MGPIO_vSetPinType(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_Type);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	7818      	ldrb	r0, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	7859      	ldrb	r1, [r3, #1]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	789b      	ldrb	r3, [r3, #2]
 80043f4:	461a      	mov	r2, r3
 80043f6:	f000 f83b 	bl	8004470 <MGPIO_vSetPinType>
	MGPIO_vSetOutputPinType(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_OType);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	7818      	ldrb	r0, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	7859      	ldrb	r1, [r3, #1]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	791b      	ldrb	r3, [r3, #4]
 8004406:	461a      	mov	r2, r3
 8004408:	f000 f8f0 	bl	80045ec <MGPIO_vSetOutputPinType>
	MGPIO_vSetOutputPinSpeed(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_OSpeed);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	7818      	ldrb	r0, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	7859      	ldrb	r1, [r3, #1]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	795b      	ldrb	r3, [r3, #5]
 8004418:	461a      	mov	r2, r3
 800441a:	f000 f99b 	bl	8004754 <MGPIO_vSetOutputPinSpeed>
	MGPIO_vSetInputPinPullUpDown(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_IPullUpDown);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	7818      	ldrb	r0, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	7859      	ldrb	r1, [r3, #1]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	799b      	ldrb	r3, [r3, #6]
 800442a:	461a      	mov	r2, r3
 800442c:	f000 fa50 	bl	80048d0 <MGPIO_vSetInputPinPullUpDown>
	MGPIO_vSetOutputPinValueBSR(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_OValue);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	7818      	ldrb	r0, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	7859      	ldrb	r1, [r3, #1]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	78db      	ldrb	r3, [r3, #3]
 800443c:	461a      	mov	r2, r3
 800443e:	f000 fbb7 	bl	8004bb0 <MGPIO_vSetOutputPinValueBSR>
	MGPIO_vSetPinLockSTS(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_LCKSTS);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	7818      	ldrb	r0, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	7859      	ldrb	r1, [r3, #1]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	79db      	ldrb	r3, [r3, #7]
 800444e:	461a      	mov	r2, r3
 8004450:	f000 fc96 	bl	8004d80 <MGPIO_vSetPinLockSTS>
	MGPIO_vSetPinAlternativeFunction(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_AF);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	7818      	ldrb	r0, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	7859      	ldrb	r1, [r3, #1]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	7a1b      	ldrb	r3, [r3, #8]
 8004460:	461a      	mov	r2, r3
 8004462:	f000 fd3f 	bl	8004ee4 <MGPIO_vSetPinAlternativeFunction>


}
 8004466:	bf00      	nop
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
	...

08004470 <MGPIO_vSetPinType>:

void MGPIO_vSetPinType(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_PinType_t copy_eGPIO_PinType)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	4603      	mov	r3, r0
 8004478:	71fb      	strb	r3, [r7, #7]
 800447a:	460b      	mov	r3, r1
 800447c:	71bb      	strb	r3, [r7, #6]
 800447e:	4613      	mov	r3, r2
 8004480:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 8004482:	79fb      	ldrb	r3, [r7, #7]
 8004484:	2b05      	cmp	r3, #5
 8004486:	f200 809f 	bhi.w	80045c8 <MGPIO_vSetPinType+0x158>
 800448a:	a201      	add	r2, pc, #4	; (adr r2, 8004490 <MGPIO_vSetPinType+0x20>)
 800448c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004490:	080044a9 	.word	0x080044a9
 8004494:	080044d9 	.word	0x080044d9
 8004498:	08004509 	.word	0x08004509
 800449c:	08004539 	.word	0x08004539
 80044a0:	08004569 	.word	0x08004569
 80044a4:	08004599 	.word	0x08004599
	{
	case PORTA:
		GPIOA->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 80044a8:	4b4a      	ldr	r3, [pc, #296]	; (80045d4 <MGPIO_vSetPinType+0x164>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	79ba      	ldrb	r2, [r7, #6]
 80044ae:	0052      	lsls	r2, r2, #1
 80044b0:	2103      	movs	r1, #3
 80044b2:	fa01 f202 	lsl.w	r2, r1, r2
 80044b6:	43d2      	mvns	r2, r2
 80044b8:	4611      	mov	r1, r2
 80044ba:	4a46      	ldr	r2, [pc, #280]	; (80045d4 <MGPIO_vSetPinType+0x164>)
 80044bc:	400b      	ands	r3, r1
 80044be:	6013      	str	r3, [r2, #0]
		GPIOA->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 80044c0:	4b44      	ldr	r3, [pc, #272]	; (80045d4 <MGPIO_vSetPinType+0x164>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	7979      	ldrb	r1, [r7, #5]
 80044c6:	79ba      	ldrb	r2, [r7, #6]
 80044c8:	0052      	lsls	r2, r2, #1
 80044ca:	fa01 f202 	lsl.w	r2, r1, r2
 80044ce:	4611      	mov	r1, r2
 80044d0:	4a40      	ldr	r2, [pc, #256]	; (80045d4 <MGPIO_vSetPinType+0x164>)
 80044d2:	430b      	orrs	r3, r1
 80044d4:	6013      	str	r3, [r2, #0]
		break;
 80044d6:	e077      	b.n	80045c8 <MGPIO_vSetPinType+0x158>
	case PORTB:
		GPIOB->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 80044d8:	4b3f      	ldr	r3, [pc, #252]	; (80045d8 <MGPIO_vSetPinType+0x168>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	79ba      	ldrb	r2, [r7, #6]
 80044de:	0052      	lsls	r2, r2, #1
 80044e0:	2103      	movs	r1, #3
 80044e2:	fa01 f202 	lsl.w	r2, r1, r2
 80044e6:	43d2      	mvns	r2, r2
 80044e8:	4611      	mov	r1, r2
 80044ea:	4a3b      	ldr	r2, [pc, #236]	; (80045d8 <MGPIO_vSetPinType+0x168>)
 80044ec:	400b      	ands	r3, r1
 80044ee:	6013      	str	r3, [r2, #0]
		GPIOB->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 80044f0:	4b39      	ldr	r3, [pc, #228]	; (80045d8 <MGPIO_vSetPinType+0x168>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	7979      	ldrb	r1, [r7, #5]
 80044f6:	79ba      	ldrb	r2, [r7, #6]
 80044f8:	0052      	lsls	r2, r2, #1
 80044fa:	fa01 f202 	lsl.w	r2, r1, r2
 80044fe:	4611      	mov	r1, r2
 8004500:	4a35      	ldr	r2, [pc, #212]	; (80045d8 <MGPIO_vSetPinType+0x168>)
 8004502:	430b      	orrs	r3, r1
 8004504:	6013      	str	r3, [r2, #0]
		break;
 8004506:	e05f      	b.n	80045c8 <MGPIO_vSetPinType+0x158>
	case PORTC:
		GPIOC->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 8004508:	4b34      	ldr	r3, [pc, #208]	; (80045dc <MGPIO_vSetPinType+0x16c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	79ba      	ldrb	r2, [r7, #6]
 800450e:	0052      	lsls	r2, r2, #1
 8004510:	2103      	movs	r1, #3
 8004512:	fa01 f202 	lsl.w	r2, r1, r2
 8004516:	43d2      	mvns	r2, r2
 8004518:	4611      	mov	r1, r2
 800451a:	4a30      	ldr	r2, [pc, #192]	; (80045dc <MGPIO_vSetPinType+0x16c>)
 800451c:	400b      	ands	r3, r1
 800451e:	6013      	str	r3, [r2, #0]
		GPIOC->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 8004520:	4b2e      	ldr	r3, [pc, #184]	; (80045dc <MGPIO_vSetPinType+0x16c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	7979      	ldrb	r1, [r7, #5]
 8004526:	79ba      	ldrb	r2, [r7, #6]
 8004528:	0052      	lsls	r2, r2, #1
 800452a:	fa01 f202 	lsl.w	r2, r1, r2
 800452e:	4611      	mov	r1, r2
 8004530:	4a2a      	ldr	r2, [pc, #168]	; (80045dc <MGPIO_vSetPinType+0x16c>)
 8004532:	430b      	orrs	r3, r1
 8004534:	6013      	str	r3, [r2, #0]
		break;
 8004536:	e047      	b.n	80045c8 <MGPIO_vSetPinType+0x158>
	case PORTD:
		GPIOD->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 8004538:	4b29      	ldr	r3, [pc, #164]	; (80045e0 <MGPIO_vSetPinType+0x170>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	79ba      	ldrb	r2, [r7, #6]
 800453e:	0052      	lsls	r2, r2, #1
 8004540:	2103      	movs	r1, #3
 8004542:	fa01 f202 	lsl.w	r2, r1, r2
 8004546:	43d2      	mvns	r2, r2
 8004548:	4611      	mov	r1, r2
 800454a:	4a25      	ldr	r2, [pc, #148]	; (80045e0 <MGPIO_vSetPinType+0x170>)
 800454c:	400b      	ands	r3, r1
 800454e:	6013      	str	r3, [r2, #0]
		GPIOD->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 8004550:	4b23      	ldr	r3, [pc, #140]	; (80045e0 <MGPIO_vSetPinType+0x170>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	7979      	ldrb	r1, [r7, #5]
 8004556:	79ba      	ldrb	r2, [r7, #6]
 8004558:	0052      	lsls	r2, r2, #1
 800455a:	fa01 f202 	lsl.w	r2, r1, r2
 800455e:	4611      	mov	r1, r2
 8004560:	4a1f      	ldr	r2, [pc, #124]	; (80045e0 <MGPIO_vSetPinType+0x170>)
 8004562:	430b      	orrs	r3, r1
 8004564:	6013      	str	r3, [r2, #0]
		break;
 8004566:	e02f      	b.n	80045c8 <MGPIO_vSetPinType+0x158>
	case PORTE:
		GPIOE->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 8004568:	4b1e      	ldr	r3, [pc, #120]	; (80045e4 <MGPIO_vSetPinType+0x174>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	79ba      	ldrb	r2, [r7, #6]
 800456e:	0052      	lsls	r2, r2, #1
 8004570:	2103      	movs	r1, #3
 8004572:	fa01 f202 	lsl.w	r2, r1, r2
 8004576:	43d2      	mvns	r2, r2
 8004578:	4611      	mov	r1, r2
 800457a:	4a1a      	ldr	r2, [pc, #104]	; (80045e4 <MGPIO_vSetPinType+0x174>)
 800457c:	400b      	ands	r3, r1
 800457e:	6013      	str	r3, [r2, #0]
		GPIOE->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 8004580:	4b18      	ldr	r3, [pc, #96]	; (80045e4 <MGPIO_vSetPinType+0x174>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	7979      	ldrb	r1, [r7, #5]
 8004586:	79ba      	ldrb	r2, [r7, #6]
 8004588:	0052      	lsls	r2, r2, #1
 800458a:	fa01 f202 	lsl.w	r2, r1, r2
 800458e:	4611      	mov	r1, r2
 8004590:	4a14      	ldr	r2, [pc, #80]	; (80045e4 <MGPIO_vSetPinType+0x174>)
 8004592:	430b      	orrs	r3, r1
 8004594:	6013      	str	r3, [r2, #0]
		break;
 8004596:	e017      	b.n	80045c8 <MGPIO_vSetPinType+0x158>
	case PORTH:
		GPIOH->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 8004598:	4b13      	ldr	r3, [pc, #76]	; (80045e8 <MGPIO_vSetPinType+0x178>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	79ba      	ldrb	r2, [r7, #6]
 800459e:	0052      	lsls	r2, r2, #1
 80045a0:	2103      	movs	r1, #3
 80045a2:	fa01 f202 	lsl.w	r2, r1, r2
 80045a6:	43d2      	mvns	r2, r2
 80045a8:	4611      	mov	r1, r2
 80045aa:	4a0f      	ldr	r2, [pc, #60]	; (80045e8 <MGPIO_vSetPinType+0x178>)
 80045ac:	400b      	ands	r3, r1
 80045ae:	6013      	str	r3, [r2, #0]
		GPIOH->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 80045b0:	4b0d      	ldr	r3, [pc, #52]	; (80045e8 <MGPIO_vSetPinType+0x178>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	7979      	ldrb	r1, [r7, #5]
 80045b6:	79ba      	ldrb	r2, [r7, #6]
 80045b8:	0052      	lsls	r2, r2, #1
 80045ba:	fa01 f202 	lsl.w	r2, r1, r2
 80045be:	4611      	mov	r1, r2
 80045c0:	4a09      	ldr	r2, [pc, #36]	; (80045e8 <MGPIO_vSetPinType+0x178>)
 80045c2:	430b      	orrs	r3, r1
 80045c4:	6013      	str	r3, [r2, #0]
		break;
 80045c6:	bf00      	nop
	}
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	40020000 	.word	0x40020000
 80045d8:	40020400 	.word	0x40020400
 80045dc:	40020800 	.word	0x40020800
 80045e0:	40020c00 	.word	0x40020c00
 80045e4:	40021000 	.word	0x40021000
 80045e8:	40021c00 	.word	0x40021c00

080045ec <MGPIO_vSetOutputPinType>:
void MGPIO_vSetOutputPinType(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_OType_t copy_GPIO_OType)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	4603      	mov	r3, r0
 80045f4:	71fb      	strb	r3, [r7, #7]
 80045f6:	460b      	mov	r3, r1
 80045f8:	71bb      	strb	r3, [r7, #6]
 80045fa:	4613      	mov	r3, r2
 80045fc:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 80045fe:	79fb      	ldrb	r3, [r7, #7]
 8004600:	2b05      	cmp	r3, #5
 8004602:	f200 8095 	bhi.w	8004730 <MGPIO_vSetOutputPinType+0x144>
 8004606:	a201      	add	r2, pc, #4	; (adr r2, 800460c <MGPIO_vSetOutputPinType+0x20>)
 8004608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460c:	08004625 	.word	0x08004625
 8004610:	08004653 	.word	0x08004653
 8004614:	08004681 	.word	0x08004681
 8004618:	080046ad 	.word	0x080046ad
 800461c:	080046d9 	.word	0x080046d9
 8004620:	08004705 	.word	0x08004705
	{
	case PORTA:
		GPIOA->GPIO_OTYPER &= ~(0b1<<copy_eGPIO_Pin*2);
 8004624:	4b45      	ldr	r3, [pc, #276]	; (800473c <MGPIO_vSetOutputPinType+0x150>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	79ba      	ldrb	r2, [r7, #6]
 800462a:	0052      	lsls	r2, r2, #1
 800462c:	2101      	movs	r1, #1
 800462e:	fa01 f202 	lsl.w	r2, r1, r2
 8004632:	43d2      	mvns	r2, r2
 8004634:	4611      	mov	r1, r2
 8004636:	4a41      	ldr	r2, [pc, #260]	; (800473c <MGPIO_vSetOutputPinType+0x150>)
 8004638:	400b      	ands	r3, r1
 800463a:	6053      	str	r3, [r2, #4]
		GPIOA->GPIO_OTYPER |= (copy_GPIO_OType<<copy_eGPIO_Pin);
 800463c:	4b3f      	ldr	r3, [pc, #252]	; (800473c <MGPIO_vSetOutputPinType+0x150>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	7979      	ldrb	r1, [r7, #5]
 8004642:	79ba      	ldrb	r2, [r7, #6]
 8004644:	fa01 f202 	lsl.w	r2, r1, r2
 8004648:	4611      	mov	r1, r2
 800464a:	4a3c      	ldr	r2, [pc, #240]	; (800473c <MGPIO_vSetOutputPinType+0x150>)
 800464c:	430b      	orrs	r3, r1
 800464e:	6053      	str	r3, [r2, #4]
		break;
 8004650:	e06e      	b.n	8004730 <MGPIO_vSetOutputPinType+0x144>
	case PORTB:
		GPIOB->GPIO_OTYPER &= ~(0b1<<copy_eGPIO_Pin*2);
 8004652:	4b3b      	ldr	r3, [pc, #236]	; (8004740 <MGPIO_vSetOutputPinType+0x154>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	79ba      	ldrb	r2, [r7, #6]
 8004658:	0052      	lsls	r2, r2, #1
 800465a:	2101      	movs	r1, #1
 800465c:	fa01 f202 	lsl.w	r2, r1, r2
 8004660:	43d2      	mvns	r2, r2
 8004662:	4611      	mov	r1, r2
 8004664:	4a36      	ldr	r2, [pc, #216]	; (8004740 <MGPIO_vSetOutputPinType+0x154>)
 8004666:	400b      	ands	r3, r1
 8004668:	6053      	str	r3, [r2, #4]
		GPIOB->GPIO_OTYPER |= (copy_GPIO_OType<<copy_eGPIO_Pin);
 800466a:	4b35      	ldr	r3, [pc, #212]	; (8004740 <MGPIO_vSetOutputPinType+0x154>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	7979      	ldrb	r1, [r7, #5]
 8004670:	79ba      	ldrb	r2, [r7, #6]
 8004672:	fa01 f202 	lsl.w	r2, r1, r2
 8004676:	4611      	mov	r1, r2
 8004678:	4a31      	ldr	r2, [pc, #196]	; (8004740 <MGPIO_vSetOutputPinType+0x154>)
 800467a:	430b      	orrs	r3, r1
 800467c:	6053      	str	r3, [r2, #4]
		break;
 800467e:	e057      	b.n	8004730 <MGPIO_vSetOutputPinType+0x144>
	case PORTC:
		GPIOC->GPIO_OTYPER &= ~(0b1<<copy_eGPIO_Pin);
 8004680:	4b30      	ldr	r3, [pc, #192]	; (8004744 <MGPIO_vSetOutputPinType+0x158>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	79ba      	ldrb	r2, [r7, #6]
 8004686:	2101      	movs	r1, #1
 8004688:	fa01 f202 	lsl.w	r2, r1, r2
 800468c:	43d2      	mvns	r2, r2
 800468e:	4611      	mov	r1, r2
 8004690:	4a2c      	ldr	r2, [pc, #176]	; (8004744 <MGPIO_vSetOutputPinType+0x158>)
 8004692:	400b      	ands	r3, r1
 8004694:	6053      	str	r3, [r2, #4]
		GPIOC->GPIO_OTYPER |= (copy_GPIO_OType<<copy_eGPIO_Pin);
 8004696:	4b2b      	ldr	r3, [pc, #172]	; (8004744 <MGPIO_vSetOutputPinType+0x158>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	7979      	ldrb	r1, [r7, #5]
 800469c:	79ba      	ldrb	r2, [r7, #6]
 800469e:	fa01 f202 	lsl.w	r2, r1, r2
 80046a2:	4611      	mov	r1, r2
 80046a4:	4a27      	ldr	r2, [pc, #156]	; (8004744 <MGPIO_vSetOutputPinType+0x158>)
 80046a6:	430b      	orrs	r3, r1
 80046a8:	6053      	str	r3, [r2, #4]
		break;
 80046aa:	e041      	b.n	8004730 <MGPIO_vSetOutputPinType+0x144>
	case PORTD:
		GPIOD->GPIO_OTYPER &= ~(0b1<<copy_eGPIO_Pin);
 80046ac:	4b26      	ldr	r3, [pc, #152]	; (8004748 <MGPIO_vSetOutputPinType+0x15c>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	79ba      	ldrb	r2, [r7, #6]
 80046b2:	2101      	movs	r1, #1
 80046b4:	fa01 f202 	lsl.w	r2, r1, r2
 80046b8:	43d2      	mvns	r2, r2
 80046ba:	4611      	mov	r1, r2
 80046bc:	4a22      	ldr	r2, [pc, #136]	; (8004748 <MGPIO_vSetOutputPinType+0x15c>)
 80046be:	400b      	ands	r3, r1
 80046c0:	6053      	str	r3, [r2, #4]
		GPIOD->GPIO_OTYPER |= (copy_GPIO_OType<<copy_eGPIO_Pin);
 80046c2:	4b21      	ldr	r3, [pc, #132]	; (8004748 <MGPIO_vSetOutputPinType+0x15c>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	7979      	ldrb	r1, [r7, #5]
 80046c8:	79ba      	ldrb	r2, [r7, #6]
 80046ca:	fa01 f202 	lsl.w	r2, r1, r2
 80046ce:	4611      	mov	r1, r2
 80046d0:	4a1d      	ldr	r2, [pc, #116]	; (8004748 <MGPIO_vSetOutputPinType+0x15c>)
 80046d2:	430b      	orrs	r3, r1
 80046d4:	6053      	str	r3, [r2, #4]
		break;
 80046d6:	e02b      	b.n	8004730 <MGPIO_vSetOutputPinType+0x144>
	case PORTE:
		GPIOE->GPIO_OTYPER &= ~(0b1<<copy_eGPIO_Pin);
 80046d8:	4b1c      	ldr	r3, [pc, #112]	; (800474c <MGPIO_vSetOutputPinType+0x160>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	79ba      	ldrb	r2, [r7, #6]
 80046de:	2101      	movs	r1, #1
 80046e0:	fa01 f202 	lsl.w	r2, r1, r2
 80046e4:	43d2      	mvns	r2, r2
 80046e6:	4611      	mov	r1, r2
 80046e8:	4a18      	ldr	r2, [pc, #96]	; (800474c <MGPIO_vSetOutputPinType+0x160>)
 80046ea:	400b      	ands	r3, r1
 80046ec:	6053      	str	r3, [r2, #4]
		GPIOE->GPIO_OTYPER |= (copy_GPIO_OType<<copy_eGPIO_Pin);
 80046ee:	4b17      	ldr	r3, [pc, #92]	; (800474c <MGPIO_vSetOutputPinType+0x160>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	7979      	ldrb	r1, [r7, #5]
 80046f4:	79ba      	ldrb	r2, [r7, #6]
 80046f6:	fa01 f202 	lsl.w	r2, r1, r2
 80046fa:	4611      	mov	r1, r2
 80046fc:	4a13      	ldr	r2, [pc, #76]	; (800474c <MGPIO_vSetOutputPinType+0x160>)
 80046fe:	430b      	orrs	r3, r1
 8004700:	6053      	str	r3, [r2, #4]
		break;
 8004702:	e015      	b.n	8004730 <MGPIO_vSetOutputPinType+0x144>
	case PORTH:
		GPIOH->GPIO_OTYPER &= ~(0b1<<copy_eGPIO_Pin);
 8004704:	4b12      	ldr	r3, [pc, #72]	; (8004750 <MGPIO_vSetOutputPinType+0x164>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	79ba      	ldrb	r2, [r7, #6]
 800470a:	2101      	movs	r1, #1
 800470c:	fa01 f202 	lsl.w	r2, r1, r2
 8004710:	43d2      	mvns	r2, r2
 8004712:	4611      	mov	r1, r2
 8004714:	4a0e      	ldr	r2, [pc, #56]	; (8004750 <MGPIO_vSetOutputPinType+0x164>)
 8004716:	400b      	ands	r3, r1
 8004718:	6053      	str	r3, [r2, #4]
		GPIOH->GPIO_OTYPER |= (copy_GPIO_OType<<copy_eGPIO_Pin);
 800471a:	4b0d      	ldr	r3, [pc, #52]	; (8004750 <MGPIO_vSetOutputPinType+0x164>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	7979      	ldrb	r1, [r7, #5]
 8004720:	79ba      	ldrb	r2, [r7, #6]
 8004722:	fa01 f202 	lsl.w	r2, r1, r2
 8004726:	4611      	mov	r1, r2
 8004728:	4a09      	ldr	r2, [pc, #36]	; (8004750 <MGPIO_vSetOutputPinType+0x164>)
 800472a:	430b      	orrs	r3, r1
 800472c:	6053      	str	r3, [r2, #4]
		break;
 800472e:	bf00      	nop
	}
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	40020000 	.word	0x40020000
 8004740:	40020400 	.word	0x40020400
 8004744:	40020800 	.word	0x40020800
 8004748:	40020c00 	.word	0x40020c00
 800474c:	40021000 	.word	0x40021000
 8004750:	40021c00 	.word	0x40021c00

08004754 <MGPIO_vSetOutputPinSpeed>:
void MGPIO_vSetOutputPinSpeed(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_OSpeed_t copy_GPIO_OSpeed)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	4603      	mov	r3, r0
 800475c:	71fb      	strb	r3, [r7, #7]
 800475e:	460b      	mov	r3, r1
 8004760:	71bb      	strb	r3, [r7, #6]
 8004762:	4613      	mov	r3, r2
 8004764:	717b      	strb	r3, [r7, #5]

	switch (copy_eGPIO_Port)
 8004766:	79fb      	ldrb	r3, [r7, #7]
 8004768:	2b05      	cmp	r3, #5
 800476a:	f200 809f 	bhi.w	80048ac <MGPIO_vSetOutputPinSpeed+0x158>
 800476e:	a201      	add	r2, pc, #4	; (adr r2, 8004774 <MGPIO_vSetOutputPinSpeed+0x20>)
 8004770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004774:	0800478d 	.word	0x0800478d
 8004778:	080047bd 	.word	0x080047bd
 800477c:	080047ed 	.word	0x080047ed
 8004780:	0800481d 	.word	0x0800481d
 8004784:	0800484d 	.word	0x0800484d
 8004788:	0800487d 	.word	0x0800487d
	{
	case PORTA:
		GPIOA->GPIO_OSPEEDR &= ~(0b11<<copy_eGPIO_Pin*2);
 800478c:	4b4a      	ldr	r3, [pc, #296]	; (80048b8 <MGPIO_vSetOutputPinSpeed+0x164>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	79ba      	ldrb	r2, [r7, #6]
 8004792:	0052      	lsls	r2, r2, #1
 8004794:	2103      	movs	r1, #3
 8004796:	fa01 f202 	lsl.w	r2, r1, r2
 800479a:	43d2      	mvns	r2, r2
 800479c:	4611      	mov	r1, r2
 800479e:	4a46      	ldr	r2, [pc, #280]	; (80048b8 <MGPIO_vSetOutputPinSpeed+0x164>)
 80047a0:	400b      	ands	r3, r1
 80047a2:	6093      	str	r3, [r2, #8]
		GPIOA->GPIO_OSPEEDR |= (copy_GPIO_OSpeed<<copy_eGPIO_Pin*2);
 80047a4:	4b44      	ldr	r3, [pc, #272]	; (80048b8 <MGPIO_vSetOutputPinSpeed+0x164>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	7979      	ldrb	r1, [r7, #5]
 80047aa:	79ba      	ldrb	r2, [r7, #6]
 80047ac:	0052      	lsls	r2, r2, #1
 80047ae:	fa01 f202 	lsl.w	r2, r1, r2
 80047b2:	4611      	mov	r1, r2
 80047b4:	4a40      	ldr	r2, [pc, #256]	; (80048b8 <MGPIO_vSetOutputPinSpeed+0x164>)
 80047b6:	430b      	orrs	r3, r1
 80047b8:	6093      	str	r3, [r2, #8]
		break;
 80047ba:	e077      	b.n	80048ac <MGPIO_vSetOutputPinSpeed+0x158>
	case PORTB:
		GPIOB->GPIO_OSPEEDR &= ~(0b11<<copy_eGPIO_Pin*2);
 80047bc:	4b3f      	ldr	r3, [pc, #252]	; (80048bc <MGPIO_vSetOutputPinSpeed+0x168>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	79ba      	ldrb	r2, [r7, #6]
 80047c2:	0052      	lsls	r2, r2, #1
 80047c4:	2103      	movs	r1, #3
 80047c6:	fa01 f202 	lsl.w	r2, r1, r2
 80047ca:	43d2      	mvns	r2, r2
 80047cc:	4611      	mov	r1, r2
 80047ce:	4a3b      	ldr	r2, [pc, #236]	; (80048bc <MGPIO_vSetOutputPinSpeed+0x168>)
 80047d0:	400b      	ands	r3, r1
 80047d2:	6093      	str	r3, [r2, #8]
		GPIOB->GPIO_OSPEEDR |= (copy_GPIO_OSpeed<<copy_eGPIO_Pin*2);
 80047d4:	4b39      	ldr	r3, [pc, #228]	; (80048bc <MGPIO_vSetOutputPinSpeed+0x168>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	7979      	ldrb	r1, [r7, #5]
 80047da:	79ba      	ldrb	r2, [r7, #6]
 80047dc:	0052      	lsls	r2, r2, #1
 80047de:	fa01 f202 	lsl.w	r2, r1, r2
 80047e2:	4611      	mov	r1, r2
 80047e4:	4a35      	ldr	r2, [pc, #212]	; (80048bc <MGPIO_vSetOutputPinSpeed+0x168>)
 80047e6:	430b      	orrs	r3, r1
 80047e8:	6093      	str	r3, [r2, #8]
		break;
 80047ea:	e05f      	b.n	80048ac <MGPIO_vSetOutputPinSpeed+0x158>
	case PORTC:
		GPIOC->GPIO_OSPEEDR &= ~(0b11<<copy_eGPIO_Pin*2);
 80047ec:	4b34      	ldr	r3, [pc, #208]	; (80048c0 <MGPIO_vSetOutputPinSpeed+0x16c>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	79ba      	ldrb	r2, [r7, #6]
 80047f2:	0052      	lsls	r2, r2, #1
 80047f4:	2103      	movs	r1, #3
 80047f6:	fa01 f202 	lsl.w	r2, r1, r2
 80047fa:	43d2      	mvns	r2, r2
 80047fc:	4611      	mov	r1, r2
 80047fe:	4a30      	ldr	r2, [pc, #192]	; (80048c0 <MGPIO_vSetOutputPinSpeed+0x16c>)
 8004800:	400b      	ands	r3, r1
 8004802:	6093      	str	r3, [r2, #8]
		GPIOC->GPIO_OSPEEDR |= (copy_GPIO_OSpeed<<copy_eGPIO_Pin*2);
 8004804:	4b2e      	ldr	r3, [pc, #184]	; (80048c0 <MGPIO_vSetOutputPinSpeed+0x16c>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	7979      	ldrb	r1, [r7, #5]
 800480a:	79ba      	ldrb	r2, [r7, #6]
 800480c:	0052      	lsls	r2, r2, #1
 800480e:	fa01 f202 	lsl.w	r2, r1, r2
 8004812:	4611      	mov	r1, r2
 8004814:	4a2a      	ldr	r2, [pc, #168]	; (80048c0 <MGPIO_vSetOutputPinSpeed+0x16c>)
 8004816:	430b      	orrs	r3, r1
 8004818:	6093      	str	r3, [r2, #8]
		break;
 800481a:	e047      	b.n	80048ac <MGPIO_vSetOutputPinSpeed+0x158>
	case PORTD:
		GPIOD->GPIO_OSPEEDR &= ~(0b11<<copy_eGPIO_Pin*2);
 800481c:	4b29      	ldr	r3, [pc, #164]	; (80048c4 <MGPIO_vSetOutputPinSpeed+0x170>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	79ba      	ldrb	r2, [r7, #6]
 8004822:	0052      	lsls	r2, r2, #1
 8004824:	2103      	movs	r1, #3
 8004826:	fa01 f202 	lsl.w	r2, r1, r2
 800482a:	43d2      	mvns	r2, r2
 800482c:	4611      	mov	r1, r2
 800482e:	4a25      	ldr	r2, [pc, #148]	; (80048c4 <MGPIO_vSetOutputPinSpeed+0x170>)
 8004830:	400b      	ands	r3, r1
 8004832:	6093      	str	r3, [r2, #8]
		GPIOD->GPIO_OSPEEDR |= (copy_GPIO_OSpeed<<copy_eGPIO_Pin*2);
 8004834:	4b23      	ldr	r3, [pc, #140]	; (80048c4 <MGPIO_vSetOutputPinSpeed+0x170>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	7979      	ldrb	r1, [r7, #5]
 800483a:	79ba      	ldrb	r2, [r7, #6]
 800483c:	0052      	lsls	r2, r2, #1
 800483e:	fa01 f202 	lsl.w	r2, r1, r2
 8004842:	4611      	mov	r1, r2
 8004844:	4a1f      	ldr	r2, [pc, #124]	; (80048c4 <MGPIO_vSetOutputPinSpeed+0x170>)
 8004846:	430b      	orrs	r3, r1
 8004848:	6093      	str	r3, [r2, #8]
		break;
 800484a:	e02f      	b.n	80048ac <MGPIO_vSetOutputPinSpeed+0x158>
	case PORTE:
		GPIOE->GPIO_OSPEEDR &= ~(0b11<<copy_eGPIO_Pin*2);
 800484c:	4b1e      	ldr	r3, [pc, #120]	; (80048c8 <MGPIO_vSetOutputPinSpeed+0x174>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	79ba      	ldrb	r2, [r7, #6]
 8004852:	0052      	lsls	r2, r2, #1
 8004854:	2103      	movs	r1, #3
 8004856:	fa01 f202 	lsl.w	r2, r1, r2
 800485a:	43d2      	mvns	r2, r2
 800485c:	4611      	mov	r1, r2
 800485e:	4a1a      	ldr	r2, [pc, #104]	; (80048c8 <MGPIO_vSetOutputPinSpeed+0x174>)
 8004860:	400b      	ands	r3, r1
 8004862:	6093      	str	r3, [r2, #8]
		GPIOE->GPIO_OSPEEDR |= (copy_GPIO_OSpeed<<copy_eGPIO_Pin*2);
 8004864:	4b18      	ldr	r3, [pc, #96]	; (80048c8 <MGPIO_vSetOutputPinSpeed+0x174>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	7979      	ldrb	r1, [r7, #5]
 800486a:	79ba      	ldrb	r2, [r7, #6]
 800486c:	0052      	lsls	r2, r2, #1
 800486e:	fa01 f202 	lsl.w	r2, r1, r2
 8004872:	4611      	mov	r1, r2
 8004874:	4a14      	ldr	r2, [pc, #80]	; (80048c8 <MGPIO_vSetOutputPinSpeed+0x174>)
 8004876:	430b      	orrs	r3, r1
 8004878:	6093      	str	r3, [r2, #8]
		break;
 800487a:	e017      	b.n	80048ac <MGPIO_vSetOutputPinSpeed+0x158>
	case PORTH:
		GPIOH->GPIO_OSPEEDR &= ~(0b11<<copy_eGPIO_Pin*2);
 800487c:	4b13      	ldr	r3, [pc, #76]	; (80048cc <MGPIO_vSetOutputPinSpeed+0x178>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	79ba      	ldrb	r2, [r7, #6]
 8004882:	0052      	lsls	r2, r2, #1
 8004884:	2103      	movs	r1, #3
 8004886:	fa01 f202 	lsl.w	r2, r1, r2
 800488a:	43d2      	mvns	r2, r2
 800488c:	4611      	mov	r1, r2
 800488e:	4a0f      	ldr	r2, [pc, #60]	; (80048cc <MGPIO_vSetOutputPinSpeed+0x178>)
 8004890:	400b      	ands	r3, r1
 8004892:	6093      	str	r3, [r2, #8]
		GPIOH->GPIO_OSPEEDR |= (copy_GPIO_OSpeed<<copy_eGPIO_Pin*2);
 8004894:	4b0d      	ldr	r3, [pc, #52]	; (80048cc <MGPIO_vSetOutputPinSpeed+0x178>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	7979      	ldrb	r1, [r7, #5]
 800489a:	79ba      	ldrb	r2, [r7, #6]
 800489c:	0052      	lsls	r2, r2, #1
 800489e:	fa01 f202 	lsl.w	r2, r1, r2
 80048a2:	4611      	mov	r1, r2
 80048a4:	4a09      	ldr	r2, [pc, #36]	; (80048cc <MGPIO_vSetOutputPinSpeed+0x178>)
 80048a6:	430b      	orrs	r3, r1
 80048a8:	6093      	str	r3, [r2, #8]
		break;
 80048aa:	bf00      	nop
	}

}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	40020000 	.word	0x40020000
 80048bc:	40020400 	.word	0x40020400
 80048c0:	40020800 	.word	0x40020800
 80048c4:	40020c00 	.word	0x40020c00
 80048c8:	40021000 	.word	0x40021000
 80048cc:	40021c00 	.word	0x40021c00

080048d0 <MGPIO_vSetInputPinPullUpDown>:
void MGPIO_vSetInputPinPullUpDown(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_PUPD_t copy_GPIO_PUPD)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	4603      	mov	r3, r0
 80048d8:	71fb      	strb	r3, [r7, #7]
 80048da:	460b      	mov	r3, r1
 80048dc:	71bb      	strb	r3, [r7, #6]
 80048de:	4613      	mov	r3, r2
 80048e0:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 80048e2:	79fb      	ldrb	r3, [r7, #7]
 80048e4:	2b05      	cmp	r3, #5
 80048e6:	f200 809f 	bhi.w	8004a28 <MGPIO_vSetInputPinPullUpDown+0x158>
 80048ea:	a201      	add	r2, pc, #4	; (adr r2, 80048f0 <MGPIO_vSetInputPinPullUpDown+0x20>)
 80048ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f0:	08004909 	.word	0x08004909
 80048f4:	08004939 	.word	0x08004939
 80048f8:	08004969 	.word	0x08004969
 80048fc:	08004999 	.word	0x08004999
 8004900:	080049c9 	.word	0x080049c9
 8004904:	080049f9 	.word	0x080049f9
	{
	case PORTA:
		GPIOA->GPIO_PUPDR &= ~(0b11<<copy_eGPIO_Pin*2);
 8004908:	4b4a      	ldr	r3, [pc, #296]	; (8004a34 <MGPIO_vSetInputPinPullUpDown+0x164>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	79ba      	ldrb	r2, [r7, #6]
 800490e:	0052      	lsls	r2, r2, #1
 8004910:	2103      	movs	r1, #3
 8004912:	fa01 f202 	lsl.w	r2, r1, r2
 8004916:	43d2      	mvns	r2, r2
 8004918:	4611      	mov	r1, r2
 800491a:	4a46      	ldr	r2, [pc, #280]	; (8004a34 <MGPIO_vSetInputPinPullUpDown+0x164>)
 800491c:	400b      	ands	r3, r1
 800491e:	60d3      	str	r3, [r2, #12]
		GPIOA->GPIO_PUPDR |= (copy_GPIO_PUPD<<copy_eGPIO_Pin*2);
 8004920:	4b44      	ldr	r3, [pc, #272]	; (8004a34 <MGPIO_vSetInputPinPullUpDown+0x164>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	7979      	ldrb	r1, [r7, #5]
 8004926:	79ba      	ldrb	r2, [r7, #6]
 8004928:	0052      	lsls	r2, r2, #1
 800492a:	fa01 f202 	lsl.w	r2, r1, r2
 800492e:	4611      	mov	r1, r2
 8004930:	4a40      	ldr	r2, [pc, #256]	; (8004a34 <MGPIO_vSetInputPinPullUpDown+0x164>)
 8004932:	430b      	orrs	r3, r1
 8004934:	60d3      	str	r3, [r2, #12]
		break;
 8004936:	e077      	b.n	8004a28 <MGPIO_vSetInputPinPullUpDown+0x158>
	case PORTB:
		GPIOB->GPIO_PUPDR &= ~(0b11<<copy_eGPIO_Pin*2);
 8004938:	4b3f      	ldr	r3, [pc, #252]	; (8004a38 <MGPIO_vSetInputPinPullUpDown+0x168>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	79ba      	ldrb	r2, [r7, #6]
 800493e:	0052      	lsls	r2, r2, #1
 8004940:	2103      	movs	r1, #3
 8004942:	fa01 f202 	lsl.w	r2, r1, r2
 8004946:	43d2      	mvns	r2, r2
 8004948:	4611      	mov	r1, r2
 800494a:	4a3b      	ldr	r2, [pc, #236]	; (8004a38 <MGPIO_vSetInputPinPullUpDown+0x168>)
 800494c:	400b      	ands	r3, r1
 800494e:	60d3      	str	r3, [r2, #12]
		GPIOB->GPIO_PUPDR |= (copy_GPIO_PUPD<<copy_eGPIO_Pin*2);
 8004950:	4b39      	ldr	r3, [pc, #228]	; (8004a38 <MGPIO_vSetInputPinPullUpDown+0x168>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	7979      	ldrb	r1, [r7, #5]
 8004956:	79ba      	ldrb	r2, [r7, #6]
 8004958:	0052      	lsls	r2, r2, #1
 800495a:	fa01 f202 	lsl.w	r2, r1, r2
 800495e:	4611      	mov	r1, r2
 8004960:	4a35      	ldr	r2, [pc, #212]	; (8004a38 <MGPIO_vSetInputPinPullUpDown+0x168>)
 8004962:	430b      	orrs	r3, r1
 8004964:	60d3      	str	r3, [r2, #12]
		break;
 8004966:	e05f      	b.n	8004a28 <MGPIO_vSetInputPinPullUpDown+0x158>
	case PORTC:
		GPIOC->GPIO_PUPDR &= ~(0b11<<copy_eGPIO_Pin*2);
 8004968:	4b34      	ldr	r3, [pc, #208]	; (8004a3c <MGPIO_vSetInputPinPullUpDown+0x16c>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	79ba      	ldrb	r2, [r7, #6]
 800496e:	0052      	lsls	r2, r2, #1
 8004970:	2103      	movs	r1, #3
 8004972:	fa01 f202 	lsl.w	r2, r1, r2
 8004976:	43d2      	mvns	r2, r2
 8004978:	4611      	mov	r1, r2
 800497a:	4a30      	ldr	r2, [pc, #192]	; (8004a3c <MGPIO_vSetInputPinPullUpDown+0x16c>)
 800497c:	400b      	ands	r3, r1
 800497e:	60d3      	str	r3, [r2, #12]
		GPIOC->GPIO_PUPDR |= (copy_GPIO_PUPD<<copy_eGPIO_Pin*2);
 8004980:	4b2e      	ldr	r3, [pc, #184]	; (8004a3c <MGPIO_vSetInputPinPullUpDown+0x16c>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	7979      	ldrb	r1, [r7, #5]
 8004986:	79ba      	ldrb	r2, [r7, #6]
 8004988:	0052      	lsls	r2, r2, #1
 800498a:	fa01 f202 	lsl.w	r2, r1, r2
 800498e:	4611      	mov	r1, r2
 8004990:	4a2a      	ldr	r2, [pc, #168]	; (8004a3c <MGPIO_vSetInputPinPullUpDown+0x16c>)
 8004992:	430b      	orrs	r3, r1
 8004994:	60d3      	str	r3, [r2, #12]
		break;
 8004996:	e047      	b.n	8004a28 <MGPIO_vSetInputPinPullUpDown+0x158>
	case PORTD:
		GPIOD->GPIO_PUPDR &= ~(0b11<<copy_eGPIO_Pin*2);
 8004998:	4b29      	ldr	r3, [pc, #164]	; (8004a40 <MGPIO_vSetInputPinPullUpDown+0x170>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	79ba      	ldrb	r2, [r7, #6]
 800499e:	0052      	lsls	r2, r2, #1
 80049a0:	2103      	movs	r1, #3
 80049a2:	fa01 f202 	lsl.w	r2, r1, r2
 80049a6:	43d2      	mvns	r2, r2
 80049a8:	4611      	mov	r1, r2
 80049aa:	4a25      	ldr	r2, [pc, #148]	; (8004a40 <MGPIO_vSetInputPinPullUpDown+0x170>)
 80049ac:	400b      	ands	r3, r1
 80049ae:	60d3      	str	r3, [r2, #12]
		GPIOD->GPIO_PUPDR |= (copy_GPIO_PUPD<<copy_eGPIO_Pin*2);
 80049b0:	4b23      	ldr	r3, [pc, #140]	; (8004a40 <MGPIO_vSetInputPinPullUpDown+0x170>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	7979      	ldrb	r1, [r7, #5]
 80049b6:	79ba      	ldrb	r2, [r7, #6]
 80049b8:	0052      	lsls	r2, r2, #1
 80049ba:	fa01 f202 	lsl.w	r2, r1, r2
 80049be:	4611      	mov	r1, r2
 80049c0:	4a1f      	ldr	r2, [pc, #124]	; (8004a40 <MGPIO_vSetInputPinPullUpDown+0x170>)
 80049c2:	430b      	orrs	r3, r1
 80049c4:	60d3      	str	r3, [r2, #12]
		break;
 80049c6:	e02f      	b.n	8004a28 <MGPIO_vSetInputPinPullUpDown+0x158>
	case PORTE:
		GPIOE->GPIO_PUPDR &= ~(0b11<<copy_eGPIO_Pin*2);
 80049c8:	4b1e      	ldr	r3, [pc, #120]	; (8004a44 <MGPIO_vSetInputPinPullUpDown+0x174>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	79ba      	ldrb	r2, [r7, #6]
 80049ce:	0052      	lsls	r2, r2, #1
 80049d0:	2103      	movs	r1, #3
 80049d2:	fa01 f202 	lsl.w	r2, r1, r2
 80049d6:	43d2      	mvns	r2, r2
 80049d8:	4611      	mov	r1, r2
 80049da:	4a1a      	ldr	r2, [pc, #104]	; (8004a44 <MGPIO_vSetInputPinPullUpDown+0x174>)
 80049dc:	400b      	ands	r3, r1
 80049de:	60d3      	str	r3, [r2, #12]
		GPIOE->GPIO_PUPDR |= (copy_GPIO_PUPD<<copy_eGPIO_Pin*2);
 80049e0:	4b18      	ldr	r3, [pc, #96]	; (8004a44 <MGPIO_vSetInputPinPullUpDown+0x174>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	7979      	ldrb	r1, [r7, #5]
 80049e6:	79ba      	ldrb	r2, [r7, #6]
 80049e8:	0052      	lsls	r2, r2, #1
 80049ea:	fa01 f202 	lsl.w	r2, r1, r2
 80049ee:	4611      	mov	r1, r2
 80049f0:	4a14      	ldr	r2, [pc, #80]	; (8004a44 <MGPIO_vSetInputPinPullUpDown+0x174>)
 80049f2:	430b      	orrs	r3, r1
 80049f4:	60d3      	str	r3, [r2, #12]
		break;
 80049f6:	e017      	b.n	8004a28 <MGPIO_vSetInputPinPullUpDown+0x158>
	case PORTH:
		GPIOH->GPIO_PUPDR &= ~(0b11<<copy_eGPIO_Pin*2);
 80049f8:	4b13      	ldr	r3, [pc, #76]	; (8004a48 <MGPIO_vSetInputPinPullUpDown+0x178>)
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	79ba      	ldrb	r2, [r7, #6]
 80049fe:	0052      	lsls	r2, r2, #1
 8004a00:	2103      	movs	r1, #3
 8004a02:	fa01 f202 	lsl.w	r2, r1, r2
 8004a06:	43d2      	mvns	r2, r2
 8004a08:	4611      	mov	r1, r2
 8004a0a:	4a0f      	ldr	r2, [pc, #60]	; (8004a48 <MGPIO_vSetInputPinPullUpDown+0x178>)
 8004a0c:	400b      	ands	r3, r1
 8004a0e:	60d3      	str	r3, [r2, #12]
		GPIOH->GPIO_PUPDR |= (copy_GPIO_PUPD<<copy_eGPIO_Pin*2);
 8004a10:	4b0d      	ldr	r3, [pc, #52]	; (8004a48 <MGPIO_vSetInputPinPullUpDown+0x178>)
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	7979      	ldrb	r1, [r7, #5]
 8004a16:	79ba      	ldrb	r2, [r7, #6]
 8004a18:	0052      	lsls	r2, r2, #1
 8004a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8004a1e:	4611      	mov	r1, r2
 8004a20:	4a09      	ldr	r2, [pc, #36]	; (8004a48 <MGPIO_vSetInputPinPullUpDown+0x178>)
 8004a22:	430b      	orrs	r3, r1
 8004a24:	60d3      	str	r3, [r2, #12]
		break;
 8004a26:	bf00      	nop
	}

}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	40020000 	.word	0x40020000
 8004a38:	40020400 	.word	0x40020400
 8004a3c:	40020800 	.word	0x40020800
 8004a40:	40020c00 	.word	0x40020c00
 8004a44:	40021000 	.word	0x40021000
 8004a48:	40021c00 	.word	0x40021c00

08004a4c <MGPIO_vSetOutputPinValue>:
		break;
	}
	return 1;
}
void MGPIO_vSetOutputPinValue(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_ODR_t copy_GPIO_ODR)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	4603      	mov	r3, r0
 8004a54:	71fb      	strb	r3, [r7, #7]
 8004a56:	460b      	mov	r3, r1
 8004a58:	71bb      	strb	r3, [r7, #6]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 8004a5e:	79fb      	ldrb	r3, [r7, #7]
 8004a60:	2b05      	cmp	r3, #5
 8004a62:	f200 8093 	bhi.w	8004b8c <MGPIO_vSetOutputPinValue+0x140>
 8004a66:	a201      	add	r2, pc, #4	; (adr r2, 8004a6c <MGPIO_vSetOutputPinValue+0x20>)
 8004a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6c:	08004a85 	.word	0x08004a85
 8004a70:	08004ab1 	.word	0x08004ab1
 8004a74:	08004add 	.word	0x08004add
 8004a78:	08004b09 	.word	0x08004b09
 8004a7c:	08004b35 	.word	0x08004b35
 8004a80:	08004b61 	.word	0x08004b61
	{
	case PORTA:
		GPIOA->GPIO_ODR &= ~(0b1<<copy_eGPIO_Pin);
 8004a84:	4b44      	ldr	r3, [pc, #272]	; (8004b98 <MGPIO_vSetOutputPinValue+0x14c>)
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	79ba      	ldrb	r2, [r7, #6]
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a90:	43d2      	mvns	r2, r2
 8004a92:	4611      	mov	r1, r2
 8004a94:	4a40      	ldr	r2, [pc, #256]	; (8004b98 <MGPIO_vSetOutputPinValue+0x14c>)
 8004a96:	400b      	ands	r3, r1
 8004a98:	6153      	str	r3, [r2, #20]
		GPIOA->GPIO_ODR |= (copy_GPIO_ODR<<copy_eGPIO_Pin);
 8004a9a:	4b3f      	ldr	r3, [pc, #252]	; (8004b98 <MGPIO_vSetOutputPinValue+0x14c>)
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	7979      	ldrb	r1, [r7, #5]
 8004aa0:	79ba      	ldrb	r2, [r7, #6]
 8004aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8004aa6:	4611      	mov	r1, r2
 8004aa8:	4a3b      	ldr	r2, [pc, #236]	; (8004b98 <MGPIO_vSetOutputPinValue+0x14c>)
 8004aaa:	430b      	orrs	r3, r1
 8004aac:	6153      	str	r3, [r2, #20]
		break;
 8004aae:	e06d      	b.n	8004b8c <MGPIO_vSetOutputPinValue+0x140>
	case PORTB:
		GPIOB->GPIO_ODR &= ~(0b1<<copy_eGPIO_Pin);
 8004ab0:	4b3a      	ldr	r3, [pc, #232]	; (8004b9c <MGPIO_vSetOutputPinValue+0x150>)
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	79ba      	ldrb	r2, [r7, #6]
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8004abc:	43d2      	mvns	r2, r2
 8004abe:	4611      	mov	r1, r2
 8004ac0:	4a36      	ldr	r2, [pc, #216]	; (8004b9c <MGPIO_vSetOutputPinValue+0x150>)
 8004ac2:	400b      	ands	r3, r1
 8004ac4:	6153      	str	r3, [r2, #20]
		GPIOB->GPIO_ODR |= (copy_GPIO_ODR<<copy_eGPIO_Pin);
 8004ac6:	4b35      	ldr	r3, [pc, #212]	; (8004b9c <MGPIO_vSetOutputPinValue+0x150>)
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	7979      	ldrb	r1, [r7, #5]
 8004acc:	79ba      	ldrb	r2, [r7, #6]
 8004ace:	fa01 f202 	lsl.w	r2, r1, r2
 8004ad2:	4611      	mov	r1, r2
 8004ad4:	4a31      	ldr	r2, [pc, #196]	; (8004b9c <MGPIO_vSetOutputPinValue+0x150>)
 8004ad6:	430b      	orrs	r3, r1
 8004ad8:	6153      	str	r3, [r2, #20]
		break;
 8004ada:	e057      	b.n	8004b8c <MGPIO_vSetOutputPinValue+0x140>
	case PORTC:
		GPIOC->GPIO_ODR &= ~(0b1<<copy_eGPIO_Pin);
 8004adc:	4b30      	ldr	r3, [pc, #192]	; (8004ba0 <MGPIO_vSetOutputPinValue+0x154>)
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	79ba      	ldrb	r2, [r7, #6]
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ae8:	43d2      	mvns	r2, r2
 8004aea:	4611      	mov	r1, r2
 8004aec:	4a2c      	ldr	r2, [pc, #176]	; (8004ba0 <MGPIO_vSetOutputPinValue+0x154>)
 8004aee:	400b      	ands	r3, r1
 8004af0:	6153      	str	r3, [r2, #20]
		GPIOC->GPIO_ODR |= (copy_GPIO_ODR<<copy_eGPIO_Pin);
 8004af2:	4b2b      	ldr	r3, [pc, #172]	; (8004ba0 <MGPIO_vSetOutputPinValue+0x154>)
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	7979      	ldrb	r1, [r7, #5]
 8004af8:	79ba      	ldrb	r2, [r7, #6]
 8004afa:	fa01 f202 	lsl.w	r2, r1, r2
 8004afe:	4611      	mov	r1, r2
 8004b00:	4a27      	ldr	r2, [pc, #156]	; (8004ba0 <MGPIO_vSetOutputPinValue+0x154>)
 8004b02:	430b      	orrs	r3, r1
 8004b04:	6153      	str	r3, [r2, #20]
		break;
 8004b06:	e041      	b.n	8004b8c <MGPIO_vSetOutputPinValue+0x140>
	case PORTD:
		GPIOD->GPIO_ODR &= ~(0b1<<copy_eGPIO_Pin);
 8004b08:	4b26      	ldr	r3, [pc, #152]	; (8004ba4 <MGPIO_vSetOutputPinValue+0x158>)
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	79ba      	ldrb	r2, [r7, #6]
 8004b0e:	2101      	movs	r1, #1
 8004b10:	fa01 f202 	lsl.w	r2, r1, r2
 8004b14:	43d2      	mvns	r2, r2
 8004b16:	4611      	mov	r1, r2
 8004b18:	4a22      	ldr	r2, [pc, #136]	; (8004ba4 <MGPIO_vSetOutputPinValue+0x158>)
 8004b1a:	400b      	ands	r3, r1
 8004b1c:	6153      	str	r3, [r2, #20]
		GPIOD->GPIO_ODR |= (copy_GPIO_ODR<<copy_eGPIO_Pin);
 8004b1e:	4b21      	ldr	r3, [pc, #132]	; (8004ba4 <MGPIO_vSetOutputPinValue+0x158>)
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	7979      	ldrb	r1, [r7, #5]
 8004b24:	79ba      	ldrb	r2, [r7, #6]
 8004b26:	fa01 f202 	lsl.w	r2, r1, r2
 8004b2a:	4611      	mov	r1, r2
 8004b2c:	4a1d      	ldr	r2, [pc, #116]	; (8004ba4 <MGPIO_vSetOutputPinValue+0x158>)
 8004b2e:	430b      	orrs	r3, r1
 8004b30:	6153      	str	r3, [r2, #20]
		break;
 8004b32:	e02b      	b.n	8004b8c <MGPIO_vSetOutputPinValue+0x140>
	case PORTE:
		GPIOE->GPIO_ODR &= ~(0b1<<copy_eGPIO_Pin);
 8004b34:	4b1c      	ldr	r3, [pc, #112]	; (8004ba8 <MGPIO_vSetOutputPinValue+0x15c>)
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	79ba      	ldrb	r2, [r7, #6]
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b40:	43d2      	mvns	r2, r2
 8004b42:	4611      	mov	r1, r2
 8004b44:	4a18      	ldr	r2, [pc, #96]	; (8004ba8 <MGPIO_vSetOutputPinValue+0x15c>)
 8004b46:	400b      	ands	r3, r1
 8004b48:	6153      	str	r3, [r2, #20]
		GPIOE->GPIO_ODR |= (copy_GPIO_ODR<<copy_eGPIO_Pin);
 8004b4a:	4b17      	ldr	r3, [pc, #92]	; (8004ba8 <MGPIO_vSetOutputPinValue+0x15c>)
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	7979      	ldrb	r1, [r7, #5]
 8004b50:	79ba      	ldrb	r2, [r7, #6]
 8004b52:	fa01 f202 	lsl.w	r2, r1, r2
 8004b56:	4611      	mov	r1, r2
 8004b58:	4a13      	ldr	r2, [pc, #76]	; (8004ba8 <MGPIO_vSetOutputPinValue+0x15c>)
 8004b5a:	430b      	orrs	r3, r1
 8004b5c:	6153      	str	r3, [r2, #20]
		break;
 8004b5e:	e015      	b.n	8004b8c <MGPIO_vSetOutputPinValue+0x140>
	case PORTH:
		GPIOH->GPIO_ODR &= ~(0b1<<copy_eGPIO_Pin);
 8004b60:	4b12      	ldr	r3, [pc, #72]	; (8004bac <MGPIO_vSetOutputPinValue+0x160>)
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	79ba      	ldrb	r2, [r7, #6]
 8004b66:	2101      	movs	r1, #1
 8004b68:	fa01 f202 	lsl.w	r2, r1, r2
 8004b6c:	43d2      	mvns	r2, r2
 8004b6e:	4611      	mov	r1, r2
 8004b70:	4a0e      	ldr	r2, [pc, #56]	; (8004bac <MGPIO_vSetOutputPinValue+0x160>)
 8004b72:	400b      	ands	r3, r1
 8004b74:	6153      	str	r3, [r2, #20]
		GPIOH->GPIO_ODR |= (copy_GPIO_ODR<<copy_eGPIO_Pin);
 8004b76:	4b0d      	ldr	r3, [pc, #52]	; (8004bac <MGPIO_vSetOutputPinValue+0x160>)
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	7979      	ldrb	r1, [r7, #5]
 8004b7c:	79ba      	ldrb	r2, [r7, #6]
 8004b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b82:	4611      	mov	r1, r2
 8004b84:	4a09      	ldr	r2, [pc, #36]	; (8004bac <MGPIO_vSetOutputPinValue+0x160>)
 8004b86:	430b      	orrs	r3, r1
 8004b88:	6153      	str	r3, [r2, #20]
		break;
 8004b8a:	bf00      	nop
	}

}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	40020000 	.word	0x40020000
 8004b9c:	40020400 	.word	0x40020400
 8004ba0:	40020800 	.word	0x40020800
 8004ba4:	40020c00 	.word	0x40020c00
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	40021c00 	.word	0x40021c00

08004bb0 <MGPIO_vSetOutputPinValueBSR>:
	}

}

void MGPIO_vSetOutputPinValueBSR(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_BS_t copy_GPIO_BS)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	71fb      	strb	r3, [r7, #7]
 8004bba:	460b      	mov	r3, r1
 8004bbc:	71bb      	strb	r3, [r7, #6]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 8004bc2:	79fb      	ldrb	r3, [r7, #7]
 8004bc4:	2b05      	cmp	r3, #5
 8004bc6:	f200 80ca 	bhi.w	8004d5e <MGPIO_vSetOutputPinValueBSR+0x1ae>
 8004bca:	a201      	add	r2, pc, #4	; (adr r2, 8004bd0 <MGPIO_vSetOutputPinValueBSR+0x20>)
 8004bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd0:	08004be9 	.word	0x08004be9
 8004bd4:	08004c25 	.word	0x08004c25
 8004bd8:	08004c61 	.word	0x08004c61
 8004bdc:	08004c9b 	.word	0x08004c9b
 8004be0:	08004cd5 	.word	0x08004cd5
 8004be4:	08004d0f 	.word	0x08004d0f
	{
	case PORTA:
		if (copy_GPIO_BS == SET)
 8004be8:	797b      	ldrb	r3, [r7, #5]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d10a      	bne.n	8004c04 <MGPIO_vSetOutputPinValueBSR+0x54>
		{
			GPIOA->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8004bee:	4b5f      	ldr	r3, [pc, #380]	; (8004d6c <MGPIO_vSetOutputPinValueBSR+0x1bc>)
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	79ba      	ldrb	r2, [r7, #6]
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8004bfa:	4611      	mov	r1, r2
 8004bfc:	4a5b      	ldr	r2, [pc, #364]	; (8004d6c <MGPIO_vSetOutputPinValueBSR+0x1bc>)
 8004bfe:	430b      	orrs	r3, r1
 8004c00:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOA->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}
		break;
 8004c02:	e0a1      	b.n	8004d48 <MGPIO_vSetOutputPinValueBSR+0x198>
		else if(copy_GPIO_BS == RESET)
 8004c04:	797b      	ldrb	r3, [r7, #5]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f040 809e 	bne.w	8004d48 <MGPIO_vSetOutputPinValueBSR+0x198>
			GPIOA->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8004c0c:	4b57      	ldr	r3, [pc, #348]	; (8004d6c <MGPIO_vSetOutputPinValueBSR+0x1bc>)
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	79ba      	ldrb	r2, [r7, #6]
 8004c12:	3210      	adds	r2, #16
 8004c14:	2101      	movs	r1, #1
 8004c16:	fa01 f202 	lsl.w	r2, r1, r2
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	4a53      	ldr	r2, [pc, #332]	; (8004d6c <MGPIO_vSetOutputPinValueBSR+0x1bc>)
 8004c1e:	430b      	orrs	r3, r1
 8004c20:	6193      	str	r3, [r2, #24]
		break;
 8004c22:	e091      	b.n	8004d48 <MGPIO_vSetOutputPinValueBSR+0x198>
	case PORTB:
		if (copy_GPIO_BS == SET)
 8004c24:	797b      	ldrb	r3, [r7, #5]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d10a      	bne.n	8004c40 <MGPIO_vSetOutputPinValueBSR+0x90>
		{
			GPIOB->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8004c2a:	4b51      	ldr	r3, [pc, #324]	; (8004d70 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	79ba      	ldrb	r2, [r7, #6]
 8004c30:	2101      	movs	r1, #1
 8004c32:	fa01 f202 	lsl.w	r2, r1, r2
 8004c36:	4611      	mov	r1, r2
 8004c38:	4a4d      	ldr	r2, [pc, #308]	; (8004d70 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8004c3a:	430b      	orrs	r3, r1
 8004c3c:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOB->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 8004c3e:	e085      	b.n	8004d4c <MGPIO_vSetOutputPinValueBSR+0x19c>
		else if(copy_GPIO_BS == RESET)
 8004c40:	797b      	ldrb	r3, [r7, #5]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f040 8082 	bne.w	8004d4c <MGPIO_vSetOutputPinValueBSR+0x19c>
			GPIOB->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8004c48:	4b49      	ldr	r3, [pc, #292]	; (8004d70 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	79ba      	ldrb	r2, [r7, #6]
 8004c4e:	3210      	adds	r2, #16
 8004c50:	2101      	movs	r1, #1
 8004c52:	fa01 f202 	lsl.w	r2, r1, r2
 8004c56:	4611      	mov	r1, r2
 8004c58:	4a45      	ldr	r2, [pc, #276]	; (8004d70 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8004c5a:	430b      	orrs	r3, r1
 8004c5c:	6193      	str	r3, [r2, #24]
		}		break;
 8004c5e:	e075      	b.n	8004d4c <MGPIO_vSetOutputPinValueBSR+0x19c>
	case PORTC:
		if (copy_GPIO_BS == SET)
 8004c60:	797b      	ldrb	r3, [r7, #5]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d10a      	bne.n	8004c7c <MGPIO_vSetOutputPinValueBSR+0xcc>
		{
			GPIOB->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8004c66:	4b42      	ldr	r3, [pc, #264]	; (8004d70 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	79ba      	ldrb	r2, [r7, #6]
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c72:	4611      	mov	r1, r2
 8004c74:	4a3e      	ldr	r2, [pc, #248]	; (8004d70 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8004c76:	430b      	orrs	r3, r1
 8004c78:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOB->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 8004c7a:	e069      	b.n	8004d50 <MGPIO_vSetOutputPinValueBSR+0x1a0>
		else if(copy_GPIO_BS == RESET)
 8004c7c:	797b      	ldrb	r3, [r7, #5]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d166      	bne.n	8004d50 <MGPIO_vSetOutputPinValueBSR+0x1a0>
			GPIOB->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8004c82:	4b3b      	ldr	r3, [pc, #236]	; (8004d70 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	79ba      	ldrb	r2, [r7, #6]
 8004c88:	3210      	adds	r2, #16
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c90:	4611      	mov	r1, r2
 8004c92:	4a37      	ldr	r2, [pc, #220]	; (8004d70 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8004c94:	430b      	orrs	r3, r1
 8004c96:	6193      	str	r3, [r2, #24]
		}		break;
 8004c98:	e05a      	b.n	8004d50 <MGPIO_vSetOutputPinValueBSR+0x1a0>
	case PORTD:
		if (copy_GPIO_BS == SET)
 8004c9a:	797b      	ldrb	r3, [r7, #5]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d10a      	bne.n	8004cb6 <MGPIO_vSetOutputPinValueBSR+0x106>
		{
			GPIOD->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8004ca0:	4b34      	ldr	r3, [pc, #208]	; (8004d74 <MGPIO_vSetOutputPinValueBSR+0x1c4>)
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	79ba      	ldrb	r2, [r7, #6]
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8004cac:	4611      	mov	r1, r2
 8004cae:	4a31      	ldr	r2, [pc, #196]	; (8004d74 <MGPIO_vSetOutputPinValueBSR+0x1c4>)
 8004cb0:	430b      	orrs	r3, r1
 8004cb2:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOD->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 8004cb4:	e04e      	b.n	8004d54 <MGPIO_vSetOutputPinValueBSR+0x1a4>
		else if(copy_GPIO_BS == RESET)
 8004cb6:	797b      	ldrb	r3, [r7, #5]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d14b      	bne.n	8004d54 <MGPIO_vSetOutputPinValueBSR+0x1a4>
			GPIOD->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8004cbc:	4b2d      	ldr	r3, [pc, #180]	; (8004d74 <MGPIO_vSetOutputPinValueBSR+0x1c4>)
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	79ba      	ldrb	r2, [r7, #6]
 8004cc2:	3210      	adds	r2, #16
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8004cca:	4611      	mov	r1, r2
 8004ccc:	4a29      	ldr	r2, [pc, #164]	; (8004d74 <MGPIO_vSetOutputPinValueBSR+0x1c4>)
 8004cce:	430b      	orrs	r3, r1
 8004cd0:	6193      	str	r3, [r2, #24]
		}		break;
 8004cd2:	e03f      	b.n	8004d54 <MGPIO_vSetOutputPinValueBSR+0x1a4>
	case PORTE:
		if (copy_GPIO_BS == SET)
 8004cd4:	797b      	ldrb	r3, [r7, #5]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d10a      	bne.n	8004cf0 <MGPIO_vSetOutputPinValueBSR+0x140>
		{
			GPIOE->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8004cda:	4b27      	ldr	r3, [pc, #156]	; (8004d78 <MGPIO_vSetOutputPinValueBSR+0x1c8>)
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	79ba      	ldrb	r2, [r7, #6]
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	4a23      	ldr	r2, [pc, #140]	; (8004d78 <MGPIO_vSetOutputPinValueBSR+0x1c8>)
 8004cea:	430b      	orrs	r3, r1
 8004cec:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOE->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 8004cee:	e033      	b.n	8004d58 <MGPIO_vSetOutputPinValueBSR+0x1a8>
		else if(copy_GPIO_BS == RESET)
 8004cf0:	797b      	ldrb	r3, [r7, #5]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d130      	bne.n	8004d58 <MGPIO_vSetOutputPinValueBSR+0x1a8>
			GPIOE->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8004cf6:	4b20      	ldr	r3, [pc, #128]	; (8004d78 <MGPIO_vSetOutputPinValueBSR+0x1c8>)
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	79ba      	ldrb	r2, [r7, #6]
 8004cfc:	3210      	adds	r2, #16
 8004cfe:	2101      	movs	r1, #1
 8004d00:	fa01 f202 	lsl.w	r2, r1, r2
 8004d04:	4611      	mov	r1, r2
 8004d06:	4a1c      	ldr	r2, [pc, #112]	; (8004d78 <MGPIO_vSetOutputPinValueBSR+0x1c8>)
 8004d08:	430b      	orrs	r3, r1
 8004d0a:	6193      	str	r3, [r2, #24]
		}		break;
 8004d0c:	e024      	b.n	8004d58 <MGPIO_vSetOutputPinValueBSR+0x1a8>
	case PORTH:
		if (copy_GPIO_BS == SET)
 8004d0e:	797b      	ldrb	r3, [r7, #5]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d10a      	bne.n	8004d2a <MGPIO_vSetOutputPinValueBSR+0x17a>
		{
			GPIOH->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8004d14:	4b19      	ldr	r3, [pc, #100]	; (8004d7c <MGPIO_vSetOutputPinValueBSR+0x1cc>)
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	79ba      	ldrb	r2, [r7, #6]
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8004d20:	4611      	mov	r1, r2
 8004d22:	4a16      	ldr	r2, [pc, #88]	; (8004d7c <MGPIO_vSetOutputPinValueBSR+0x1cc>)
 8004d24:	430b      	orrs	r3, r1
 8004d26:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOH->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 8004d28:	e018      	b.n	8004d5c <MGPIO_vSetOutputPinValueBSR+0x1ac>
		else if(copy_GPIO_BS == RESET)
 8004d2a:	797b      	ldrb	r3, [r7, #5]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d115      	bne.n	8004d5c <MGPIO_vSetOutputPinValueBSR+0x1ac>
			GPIOH->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8004d30:	4b12      	ldr	r3, [pc, #72]	; (8004d7c <MGPIO_vSetOutputPinValueBSR+0x1cc>)
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	79ba      	ldrb	r2, [r7, #6]
 8004d36:	3210      	adds	r2, #16
 8004d38:	2101      	movs	r1, #1
 8004d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8004d3e:	4611      	mov	r1, r2
 8004d40:	4a0e      	ldr	r2, [pc, #56]	; (8004d7c <MGPIO_vSetOutputPinValueBSR+0x1cc>)
 8004d42:	430b      	orrs	r3, r1
 8004d44:	6193      	str	r3, [r2, #24]
		}		break;
 8004d46:	e009      	b.n	8004d5c <MGPIO_vSetOutputPinValueBSR+0x1ac>
		break;
 8004d48:	bf00      	nop
 8004d4a:	e008      	b.n	8004d5e <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 8004d4c:	bf00      	nop
 8004d4e:	e006      	b.n	8004d5e <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 8004d50:	bf00      	nop
 8004d52:	e004      	b.n	8004d5e <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 8004d54:	bf00      	nop
 8004d56:	e002      	b.n	8004d5e <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 8004d58:	bf00      	nop
 8004d5a:	e000      	b.n	8004d5e <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 8004d5c:	bf00      	nop
	}

}
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40020000 	.word	0x40020000
 8004d70:	40020400 	.word	0x40020400
 8004d74:	40020c00 	.word	0x40020c00
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	40021c00 	.word	0x40021c00

08004d80 <MGPIO_vSetPinLockSTS>:
void MGPIO_vSetPinLockSTS(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_LCK_t copy_GPIO_LCK)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	4603      	mov	r3, r0
 8004d88:	71fb      	strb	r3, [r7, #7]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	71bb      	strb	r3, [r7, #6]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	2b05      	cmp	r3, #5
 8004d96:	f200 8093 	bhi.w	8004ec0 <MGPIO_vSetPinLockSTS+0x140>
 8004d9a:	a201      	add	r2, pc, #4	; (adr r2, 8004da0 <MGPIO_vSetPinLockSTS+0x20>)
 8004d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da0:	08004db9 	.word	0x08004db9
 8004da4:	08004de5 	.word	0x08004de5
 8004da8:	08004e11 	.word	0x08004e11
 8004dac:	08004e3d 	.word	0x08004e3d
 8004db0:	08004e69 	.word	0x08004e69
 8004db4:	08004e95 	.word	0x08004e95
	{
	case PORTA:
		GPIOA->GPIO_LCKR &= ~(0b1<<copy_eGPIO_Pin);
 8004db8:	4b44      	ldr	r3, [pc, #272]	; (8004ecc <MGPIO_vSetPinLockSTS+0x14c>)
 8004dba:	69db      	ldr	r3, [r3, #28]
 8004dbc:	79ba      	ldrb	r2, [r7, #6]
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8004dc4:	43d2      	mvns	r2, r2
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	4a40      	ldr	r2, [pc, #256]	; (8004ecc <MGPIO_vSetPinLockSTS+0x14c>)
 8004dca:	400b      	ands	r3, r1
 8004dcc:	61d3      	str	r3, [r2, #28]
		GPIOA->GPIO_LCKR |= (copy_GPIO_LCK<<copy_eGPIO_Pin);
 8004dce:	4b3f      	ldr	r3, [pc, #252]	; (8004ecc <MGPIO_vSetPinLockSTS+0x14c>)
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	7979      	ldrb	r1, [r7, #5]
 8004dd4:	79ba      	ldrb	r2, [r7, #6]
 8004dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8004dda:	4611      	mov	r1, r2
 8004ddc:	4a3b      	ldr	r2, [pc, #236]	; (8004ecc <MGPIO_vSetPinLockSTS+0x14c>)
 8004dde:	430b      	orrs	r3, r1
 8004de0:	61d3      	str	r3, [r2, #28]
		break;
 8004de2:	e06d      	b.n	8004ec0 <MGPIO_vSetPinLockSTS+0x140>
	case PORTB:
		GPIOB->GPIO_LCKR &= ~(0b1<<copy_eGPIO_Pin);
 8004de4:	4b3a      	ldr	r3, [pc, #232]	; (8004ed0 <MGPIO_vSetPinLockSTS+0x150>)
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	79ba      	ldrb	r2, [r7, #6]
 8004dea:	2101      	movs	r1, #1
 8004dec:	fa01 f202 	lsl.w	r2, r1, r2
 8004df0:	43d2      	mvns	r2, r2
 8004df2:	4611      	mov	r1, r2
 8004df4:	4a36      	ldr	r2, [pc, #216]	; (8004ed0 <MGPIO_vSetPinLockSTS+0x150>)
 8004df6:	400b      	ands	r3, r1
 8004df8:	61d3      	str	r3, [r2, #28]
		GPIOB->GPIO_LCKR |= (copy_GPIO_LCK<<copy_eGPIO_Pin);
 8004dfa:	4b35      	ldr	r3, [pc, #212]	; (8004ed0 <MGPIO_vSetPinLockSTS+0x150>)
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	7979      	ldrb	r1, [r7, #5]
 8004e00:	79ba      	ldrb	r2, [r7, #6]
 8004e02:	fa01 f202 	lsl.w	r2, r1, r2
 8004e06:	4611      	mov	r1, r2
 8004e08:	4a31      	ldr	r2, [pc, #196]	; (8004ed0 <MGPIO_vSetPinLockSTS+0x150>)
 8004e0a:	430b      	orrs	r3, r1
 8004e0c:	61d3      	str	r3, [r2, #28]
		break;
 8004e0e:	e057      	b.n	8004ec0 <MGPIO_vSetPinLockSTS+0x140>
	case PORTC:
		GPIOC->GPIO_LCKR &= ~(0b1<<copy_eGPIO_Pin);
 8004e10:	4b30      	ldr	r3, [pc, #192]	; (8004ed4 <MGPIO_vSetPinLockSTS+0x154>)
 8004e12:	69db      	ldr	r3, [r3, #28]
 8004e14:	79ba      	ldrb	r2, [r7, #6]
 8004e16:	2101      	movs	r1, #1
 8004e18:	fa01 f202 	lsl.w	r2, r1, r2
 8004e1c:	43d2      	mvns	r2, r2
 8004e1e:	4611      	mov	r1, r2
 8004e20:	4a2c      	ldr	r2, [pc, #176]	; (8004ed4 <MGPIO_vSetPinLockSTS+0x154>)
 8004e22:	400b      	ands	r3, r1
 8004e24:	61d3      	str	r3, [r2, #28]
		GPIOC->GPIO_LCKR |= (copy_GPIO_LCK<<copy_eGPIO_Pin);
 8004e26:	4b2b      	ldr	r3, [pc, #172]	; (8004ed4 <MGPIO_vSetPinLockSTS+0x154>)
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	7979      	ldrb	r1, [r7, #5]
 8004e2c:	79ba      	ldrb	r2, [r7, #6]
 8004e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8004e32:	4611      	mov	r1, r2
 8004e34:	4a27      	ldr	r2, [pc, #156]	; (8004ed4 <MGPIO_vSetPinLockSTS+0x154>)
 8004e36:	430b      	orrs	r3, r1
 8004e38:	61d3      	str	r3, [r2, #28]
		break;
 8004e3a:	e041      	b.n	8004ec0 <MGPIO_vSetPinLockSTS+0x140>
	case PORTD:
		GPIOD->GPIO_LCKR &= ~(0b1<<copy_eGPIO_Pin);
 8004e3c:	4b26      	ldr	r3, [pc, #152]	; (8004ed8 <MGPIO_vSetPinLockSTS+0x158>)
 8004e3e:	69db      	ldr	r3, [r3, #28]
 8004e40:	79ba      	ldrb	r2, [r7, #6]
 8004e42:	2101      	movs	r1, #1
 8004e44:	fa01 f202 	lsl.w	r2, r1, r2
 8004e48:	43d2      	mvns	r2, r2
 8004e4a:	4611      	mov	r1, r2
 8004e4c:	4a22      	ldr	r2, [pc, #136]	; (8004ed8 <MGPIO_vSetPinLockSTS+0x158>)
 8004e4e:	400b      	ands	r3, r1
 8004e50:	61d3      	str	r3, [r2, #28]
		GPIOD->GPIO_LCKR |= (copy_GPIO_LCK<<copy_eGPIO_Pin);
 8004e52:	4b21      	ldr	r3, [pc, #132]	; (8004ed8 <MGPIO_vSetPinLockSTS+0x158>)
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	7979      	ldrb	r1, [r7, #5]
 8004e58:	79ba      	ldrb	r2, [r7, #6]
 8004e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8004e5e:	4611      	mov	r1, r2
 8004e60:	4a1d      	ldr	r2, [pc, #116]	; (8004ed8 <MGPIO_vSetPinLockSTS+0x158>)
 8004e62:	430b      	orrs	r3, r1
 8004e64:	61d3      	str	r3, [r2, #28]
		break;
 8004e66:	e02b      	b.n	8004ec0 <MGPIO_vSetPinLockSTS+0x140>
	case PORTE:
		GPIOE->GPIO_LCKR &= ~(0b1<<copy_eGPIO_Pin);
 8004e68:	4b1c      	ldr	r3, [pc, #112]	; (8004edc <MGPIO_vSetPinLockSTS+0x15c>)
 8004e6a:	69db      	ldr	r3, [r3, #28]
 8004e6c:	79ba      	ldrb	r2, [r7, #6]
 8004e6e:	2101      	movs	r1, #1
 8004e70:	fa01 f202 	lsl.w	r2, r1, r2
 8004e74:	43d2      	mvns	r2, r2
 8004e76:	4611      	mov	r1, r2
 8004e78:	4a18      	ldr	r2, [pc, #96]	; (8004edc <MGPIO_vSetPinLockSTS+0x15c>)
 8004e7a:	400b      	ands	r3, r1
 8004e7c:	61d3      	str	r3, [r2, #28]
		GPIOE->GPIO_LCKR |= (copy_GPIO_LCK<<copy_eGPIO_Pin);
 8004e7e:	4b17      	ldr	r3, [pc, #92]	; (8004edc <MGPIO_vSetPinLockSTS+0x15c>)
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	7979      	ldrb	r1, [r7, #5]
 8004e84:	79ba      	ldrb	r2, [r7, #6]
 8004e86:	fa01 f202 	lsl.w	r2, r1, r2
 8004e8a:	4611      	mov	r1, r2
 8004e8c:	4a13      	ldr	r2, [pc, #76]	; (8004edc <MGPIO_vSetPinLockSTS+0x15c>)
 8004e8e:	430b      	orrs	r3, r1
 8004e90:	61d3      	str	r3, [r2, #28]
		break;
 8004e92:	e015      	b.n	8004ec0 <MGPIO_vSetPinLockSTS+0x140>
	case PORTH:
		GPIOH->GPIO_LCKR &= ~(0b1<<copy_eGPIO_Pin);
 8004e94:	4b12      	ldr	r3, [pc, #72]	; (8004ee0 <MGPIO_vSetPinLockSTS+0x160>)
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	79ba      	ldrb	r2, [r7, #6]
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8004ea0:	43d2      	mvns	r2, r2
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	4a0e      	ldr	r2, [pc, #56]	; (8004ee0 <MGPIO_vSetPinLockSTS+0x160>)
 8004ea6:	400b      	ands	r3, r1
 8004ea8:	61d3      	str	r3, [r2, #28]
		GPIOH->GPIO_LCKR |= (copy_GPIO_LCK<<copy_eGPIO_Pin);
 8004eaa:	4b0d      	ldr	r3, [pc, #52]	; (8004ee0 <MGPIO_vSetPinLockSTS+0x160>)
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	7979      	ldrb	r1, [r7, #5]
 8004eb0:	79ba      	ldrb	r2, [r7, #6]
 8004eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8004eb6:	4611      	mov	r1, r2
 8004eb8:	4a09      	ldr	r2, [pc, #36]	; (8004ee0 <MGPIO_vSetPinLockSTS+0x160>)
 8004eba:	430b      	orrs	r3, r1
 8004ebc:	61d3      	str	r3, [r2, #28]
		break;
 8004ebe:	bf00      	nop
	}

}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	40020000 	.word	0x40020000
 8004ed0:	40020400 	.word	0x40020400
 8004ed4:	40020800 	.word	0x40020800
 8004ed8:	40020c00 	.word	0x40020c00
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	40021c00 	.word	0x40021c00

08004ee4 <MGPIO_vSetPinAlternativeFunction>:
void MGPIO_vSetPinAlternativeFunction(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_AF_t copy_GPIO_AF)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	4603      	mov	r3, r0
 8004eec:	71fb      	strb	r3, [r7, #7]
 8004eee:	460b      	mov	r3, r1
 8004ef0:	71bb      	strb	r3, [r7, #6]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 8004ef6:	79fb      	ldrb	r3, [r7, #7]
 8004ef8:	2b05      	cmp	r3, #5
 8004efa:	f200 8117 	bhi.w	800512c <MGPIO_vSetPinAlternativeFunction+0x248>
 8004efe:	a201      	add	r2, pc, #4	; (adr r2, 8004f04 <MGPIO_vSetPinAlternativeFunction+0x20>)
 8004f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f04:	08004f1d 	.word	0x08004f1d
 8004f08:	08004f75 	.word	0x08004f75
 8004f0c:	08004fcd 	.word	0x08004fcd
 8004f10:	08005025 	.word	0x08005025
 8004f14:	0800507d 	.word	0x0800507d
 8004f18:	080050d5 	.word	0x080050d5
	{
	case PORTA:
		GPIOA->GPIO_AFR[copy_eGPIO_Pin/8] &= ~(0b1111	   <<(copy_eGPIO_Pin %8)*4);
 8004f1c:	4a86      	ldr	r2, [pc, #536]	; (8005138 <MGPIO_vSetPinAlternativeFunction+0x254>)
 8004f1e:	79bb      	ldrb	r3, [r7, #6]
 8004f20:	08db      	lsrs	r3, r3, #3
 8004f22:	b2d8      	uxtb	r0, r3
 8004f24:	4603      	mov	r3, r0
 8004f26:	3308      	adds	r3, #8
 8004f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f2c:	79ba      	ldrb	r2, [r7, #6]
 8004f2e:	f002 0207 	and.w	r2, r2, #7
 8004f32:	0092      	lsls	r2, r2, #2
 8004f34:	210f      	movs	r1, #15
 8004f36:	fa01 f202 	lsl.w	r2, r1, r2
 8004f3a:	43d2      	mvns	r2, r2
 8004f3c:	497e      	ldr	r1, [pc, #504]	; (8005138 <MGPIO_vSetPinAlternativeFunction+0x254>)
 8004f3e:	401a      	ands	r2, r3
 8004f40:	f100 0308 	add.w	r3, r0, #8
 8004f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		GPIOA->GPIO_AFR[copy_eGPIO_Pin/8] |= (copy_GPIO_AF <<(copy_eGPIO_Pin %8)*4);
 8004f48:	4a7b      	ldr	r2, [pc, #492]	; (8005138 <MGPIO_vSetPinAlternativeFunction+0x254>)
 8004f4a:	79bb      	ldrb	r3, [r7, #6]
 8004f4c:	08db      	lsrs	r3, r3, #3
 8004f4e:	b2d8      	uxtb	r0, r3
 8004f50:	4603      	mov	r3, r0
 8004f52:	3308      	adds	r3, #8
 8004f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f58:	7979      	ldrb	r1, [r7, #5]
 8004f5a:	79ba      	ldrb	r2, [r7, #6]
 8004f5c:	f002 0207 	and.w	r2, r2, #7
 8004f60:	0092      	lsls	r2, r2, #2
 8004f62:	fa01 f202 	lsl.w	r2, r1, r2
 8004f66:	4974      	ldr	r1, [pc, #464]	; (8005138 <MGPIO_vSetPinAlternativeFunction+0x254>)
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	f100 0308 	add.w	r3, r0, #8
 8004f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		break;
 8004f72:	e0db      	b.n	800512c <MGPIO_vSetPinAlternativeFunction+0x248>
	case PORTB:
		GPIOB->GPIO_AFR[copy_eGPIO_Pin/8] &= ~(0b1111	   <<(copy_eGPIO_Pin %8)*4);
 8004f74:	4a71      	ldr	r2, [pc, #452]	; (800513c <MGPIO_vSetPinAlternativeFunction+0x258>)
 8004f76:	79bb      	ldrb	r3, [r7, #6]
 8004f78:	08db      	lsrs	r3, r3, #3
 8004f7a:	b2d8      	uxtb	r0, r3
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	3308      	adds	r3, #8
 8004f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f84:	79ba      	ldrb	r2, [r7, #6]
 8004f86:	f002 0207 	and.w	r2, r2, #7
 8004f8a:	0092      	lsls	r2, r2, #2
 8004f8c:	210f      	movs	r1, #15
 8004f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8004f92:	43d2      	mvns	r2, r2
 8004f94:	4969      	ldr	r1, [pc, #420]	; (800513c <MGPIO_vSetPinAlternativeFunction+0x258>)
 8004f96:	401a      	ands	r2, r3
 8004f98:	f100 0308 	add.w	r3, r0, #8
 8004f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		GPIOB->GPIO_AFR[copy_eGPIO_Pin/8] |= (copy_GPIO_AF <<(copy_eGPIO_Pin %8)*4);
 8004fa0:	4a66      	ldr	r2, [pc, #408]	; (800513c <MGPIO_vSetPinAlternativeFunction+0x258>)
 8004fa2:	79bb      	ldrb	r3, [r7, #6]
 8004fa4:	08db      	lsrs	r3, r3, #3
 8004fa6:	b2d8      	uxtb	r0, r3
 8004fa8:	4603      	mov	r3, r0
 8004faa:	3308      	adds	r3, #8
 8004fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fb0:	7979      	ldrb	r1, [r7, #5]
 8004fb2:	79ba      	ldrb	r2, [r7, #6]
 8004fb4:	f002 0207 	and.w	r2, r2, #7
 8004fb8:	0092      	lsls	r2, r2, #2
 8004fba:	fa01 f202 	lsl.w	r2, r1, r2
 8004fbe:	495f      	ldr	r1, [pc, #380]	; (800513c <MGPIO_vSetPinAlternativeFunction+0x258>)
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	f100 0308 	add.w	r3, r0, #8
 8004fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8004fca:	e0af      	b.n	800512c <MGPIO_vSetPinAlternativeFunction+0x248>
	case PORTC:
		GPIOC->GPIO_AFR[copy_eGPIO_Pin/8] &= ~(0b1111	   <<(copy_eGPIO_Pin %8)*4);
 8004fcc:	4a5c      	ldr	r2, [pc, #368]	; (8005140 <MGPIO_vSetPinAlternativeFunction+0x25c>)
 8004fce:	79bb      	ldrb	r3, [r7, #6]
 8004fd0:	08db      	lsrs	r3, r3, #3
 8004fd2:	b2d8      	uxtb	r0, r3
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	3308      	adds	r3, #8
 8004fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fdc:	79ba      	ldrb	r2, [r7, #6]
 8004fde:	f002 0207 	and.w	r2, r2, #7
 8004fe2:	0092      	lsls	r2, r2, #2
 8004fe4:	210f      	movs	r1, #15
 8004fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8004fea:	43d2      	mvns	r2, r2
 8004fec:	4954      	ldr	r1, [pc, #336]	; (8005140 <MGPIO_vSetPinAlternativeFunction+0x25c>)
 8004fee:	401a      	ands	r2, r3
 8004ff0:	f100 0308 	add.w	r3, r0, #8
 8004ff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		GPIOC->GPIO_AFR[copy_eGPIO_Pin/8] |= (copy_GPIO_AF <<(copy_eGPIO_Pin %8)*4);
 8004ff8:	4a51      	ldr	r2, [pc, #324]	; (8005140 <MGPIO_vSetPinAlternativeFunction+0x25c>)
 8004ffa:	79bb      	ldrb	r3, [r7, #6]
 8004ffc:	08db      	lsrs	r3, r3, #3
 8004ffe:	b2d8      	uxtb	r0, r3
 8005000:	4603      	mov	r3, r0
 8005002:	3308      	adds	r3, #8
 8005004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005008:	7979      	ldrb	r1, [r7, #5]
 800500a:	79ba      	ldrb	r2, [r7, #6]
 800500c:	f002 0207 	and.w	r2, r2, #7
 8005010:	0092      	lsls	r2, r2, #2
 8005012:	fa01 f202 	lsl.w	r2, r1, r2
 8005016:	494a      	ldr	r1, [pc, #296]	; (8005140 <MGPIO_vSetPinAlternativeFunction+0x25c>)
 8005018:	431a      	orrs	r2, r3
 800501a:	f100 0308 	add.w	r3, r0, #8
 800501e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8005022:	e083      	b.n	800512c <MGPIO_vSetPinAlternativeFunction+0x248>
	case PORTD:
		GPIOD->GPIO_AFR[copy_eGPIO_Pin/8] &= ~(0b1111	   <<(copy_eGPIO_Pin %8)*4);
 8005024:	4a47      	ldr	r2, [pc, #284]	; (8005144 <MGPIO_vSetPinAlternativeFunction+0x260>)
 8005026:	79bb      	ldrb	r3, [r7, #6]
 8005028:	08db      	lsrs	r3, r3, #3
 800502a:	b2d8      	uxtb	r0, r3
 800502c:	4603      	mov	r3, r0
 800502e:	3308      	adds	r3, #8
 8005030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005034:	79ba      	ldrb	r2, [r7, #6]
 8005036:	f002 0207 	and.w	r2, r2, #7
 800503a:	0092      	lsls	r2, r2, #2
 800503c:	210f      	movs	r1, #15
 800503e:	fa01 f202 	lsl.w	r2, r1, r2
 8005042:	43d2      	mvns	r2, r2
 8005044:	493f      	ldr	r1, [pc, #252]	; (8005144 <MGPIO_vSetPinAlternativeFunction+0x260>)
 8005046:	401a      	ands	r2, r3
 8005048:	f100 0308 	add.w	r3, r0, #8
 800504c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		GPIOD->GPIO_AFR[copy_eGPIO_Pin/8] |= (copy_GPIO_AF <<(copy_eGPIO_Pin %8)*4);
 8005050:	4a3c      	ldr	r2, [pc, #240]	; (8005144 <MGPIO_vSetPinAlternativeFunction+0x260>)
 8005052:	79bb      	ldrb	r3, [r7, #6]
 8005054:	08db      	lsrs	r3, r3, #3
 8005056:	b2d8      	uxtb	r0, r3
 8005058:	4603      	mov	r3, r0
 800505a:	3308      	adds	r3, #8
 800505c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005060:	7979      	ldrb	r1, [r7, #5]
 8005062:	79ba      	ldrb	r2, [r7, #6]
 8005064:	f002 0207 	and.w	r2, r2, #7
 8005068:	0092      	lsls	r2, r2, #2
 800506a:	fa01 f202 	lsl.w	r2, r1, r2
 800506e:	4935      	ldr	r1, [pc, #212]	; (8005144 <MGPIO_vSetPinAlternativeFunction+0x260>)
 8005070:	431a      	orrs	r2, r3
 8005072:	f100 0308 	add.w	r3, r0, #8
 8005076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 800507a:	e057      	b.n	800512c <MGPIO_vSetPinAlternativeFunction+0x248>
	case PORTE:
		GPIOE->GPIO_AFR[copy_eGPIO_Pin/8] &= ~(0b1111	   <<(copy_eGPIO_Pin %8)*4);
 800507c:	4a32      	ldr	r2, [pc, #200]	; (8005148 <MGPIO_vSetPinAlternativeFunction+0x264>)
 800507e:	79bb      	ldrb	r3, [r7, #6]
 8005080:	08db      	lsrs	r3, r3, #3
 8005082:	b2d8      	uxtb	r0, r3
 8005084:	4603      	mov	r3, r0
 8005086:	3308      	adds	r3, #8
 8005088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800508c:	79ba      	ldrb	r2, [r7, #6]
 800508e:	f002 0207 	and.w	r2, r2, #7
 8005092:	0092      	lsls	r2, r2, #2
 8005094:	210f      	movs	r1, #15
 8005096:	fa01 f202 	lsl.w	r2, r1, r2
 800509a:	43d2      	mvns	r2, r2
 800509c:	492a      	ldr	r1, [pc, #168]	; (8005148 <MGPIO_vSetPinAlternativeFunction+0x264>)
 800509e:	401a      	ands	r2, r3
 80050a0:	f100 0308 	add.w	r3, r0, #8
 80050a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		GPIOE->GPIO_AFR[copy_eGPIO_Pin/8] |= (copy_GPIO_AF <<(copy_eGPIO_Pin %8)*4);
 80050a8:	4a27      	ldr	r2, [pc, #156]	; (8005148 <MGPIO_vSetPinAlternativeFunction+0x264>)
 80050aa:	79bb      	ldrb	r3, [r7, #6]
 80050ac:	08db      	lsrs	r3, r3, #3
 80050ae:	b2d8      	uxtb	r0, r3
 80050b0:	4603      	mov	r3, r0
 80050b2:	3308      	adds	r3, #8
 80050b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050b8:	7979      	ldrb	r1, [r7, #5]
 80050ba:	79ba      	ldrb	r2, [r7, #6]
 80050bc:	f002 0207 	and.w	r2, r2, #7
 80050c0:	0092      	lsls	r2, r2, #2
 80050c2:	fa01 f202 	lsl.w	r2, r1, r2
 80050c6:	4920      	ldr	r1, [pc, #128]	; (8005148 <MGPIO_vSetPinAlternativeFunction+0x264>)
 80050c8:	431a      	orrs	r2, r3
 80050ca:	f100 0308 	add.w	r3, r0, #8
 80050ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 80050d2:	e02b      	b.n	800512c <MGPIO_vSetPinAlternativeFunction+0x248>
	case PORTH:
		GPIOH->GPIO_AFR[copy_eGPIO_Pin/8] &= ~(0b1111	   <<(copy_eGPIO_Pin %8)*4);
 80050d4:	4a1d      	ldr	r2, [pc, #116]	; (800514c <MGPIO_vSetPinAlternativeFunction+0x268>)
 80050d6:	79bb      	ldrb	r3, [r7, #6]
 80050d8:	08db      	lsrs	r3, r3, #3
 80050da:	b2d8      	uxtb	r0, r3
 80050dc:	4603      	mov	r3, r0
 80050de:	3308      	adds	r3, #8
 80050e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050e4:	79ba      	ldrb	r2, [r7, #6]
 80050e6:	f002 0207 	and.w	r2, r2, #7
 80050ea:	0092      	lsls	r2, r2, #2
 80050ec:	210f      	movs	r1, #15
 80050ee:	fa01 f202 	lsl.w	r2, r1, r2
 80050f2:	43d2      	mvns	r2, r2
 80050f4:	4915      	ldr	r1, [pc, #84]	; (800514c <MGPIO_vSetPinAlternativeFunction+0x268>)
 80050f6:	401a      	ands	r2, r3
 80050f8:	f100 0308 	add.w	r3, r0, #8
 80050fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		GPIOH->GPIO_AFR[copy_eGPIO_Pin/8] |= (copy_GPIO_AF <<(copy_eGPIO_Pin %8)*4);
 8005100:	4a12      	ldr	r2, [pc, #72]	; (800514c <MGPIO_vSetPinAlternativeFunction+0x268>)
 8005102:	79bb      	ldrb	r3, [r7, #6]
 8005104:	08db      	lsrs	r3, r3, #3
 8005106:	b2d8      	uxtb	r0, r3
 8005108:	4603      	mov	r3, r0
 800510a:	3308      	adds	r3, #8
 800510c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005110:	7979      	ldrb	r1, [r7, #5]
 8005112:	79ba      	ldrb	r2, [r7, #6]
 8005114:	f002 0207 	and.w	r2, r2, #7
 8005118:	0092      	lsls	r2, r2, #2
 800511a:	fa01 f202 	lsl.w	r2, r1, r2
 800511e:	490b      	ldr	r1, [pc, #44]	; (800514c <MGPIO_vSetPinAlternativeFunction+0x268>)
 8005120:	431a      	orrs	r2, r3
 8005122:	f100 0308 	add.w	r3, r0, #8
 8005126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 800512a:	bf00      	nop
	}


}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	40020000 	.word	0x40020000
 800513c:	40020400 	.word	0x40020400
 8005140:	40020800 	.word	0x40020800
 8005144:	40020c00 	.word	0x40020c00
 8005148:	40021000 	.word	0x40021000
 800514c:	40021c00 	.word	0x40021c00

08005150 <RCC_AHB1EnableCLK>:
	RCC->RCC_CR&= ~(1<<CSSON);
	RCC->RCC_CR|=(copy_eClock_detector<<CSSON);
}

void RCC_AHB1EnableCLK(PeripheralAHB1_t peripheral)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	4603      	mov	r3, r0
 8005158:	71fb      	strb	r3, [r7, #7]
	SET_BIT(RCC->RCC_AHB1ENR,peripheral);
 800515a:	4b08      	ldr	r3, [pc, #32]	; (800517c <RCC_AHB1EnableCLK+0x2c>)
 800515c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515e:	79fa      	ldrb	r2, [r7, #7]
 8005160:	2101      	movs	r1, #1
 8005162:	fa01 f202 	lsl.w	r2, r1, r2
 8005166:	4611      	mov	r1, r2
 8005168:	4a04      	ldr	r2, [pc, #16]	; (800517c <RCC_AHB1EnableCLK+0x2c>)
 800516a:	430b      	orrs	r3, r1
 800516c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	40023800 	.word	0x40023800

08005180 <RCC_APB2EnableCLK>:
	CLEAR_BIT(RCC->RCC_APB1ENR,peripheral);

}

void RCC_APB2EnableCLK(PeripheralAPB2_t peripheral)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	4603      	mov	r3, r0
 8005188:	71fb      	strb	r3, [r7, #7]
	SET_BIT(RCC->RCC_APB2ENR,peripheral);
 800518a:	4b08      	ldr	r3, [pc, #32]	; (80051ac <RCC_APB2EnableCLK+0x2c>)
 800518c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518e:	79fa      	ldrb	r2, [r7, #7]
 8005190:	2101      	movs	r1, #1
 8005192:	fa01 f202 	lsl.w	r2, r1, r2
 8005196:	4611      	mov	r1, r2
 8005198:	4a04      	ldr	r2, [pc, #16]	; (80051ac <RCC_APB2EnableCLK+0x2c>)
 800519a:	430b      	orrs	r3, r1
 800519c:	6453      	str	r3, [r2, #68]	; 0x44

}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	40023800 	.word	0x40023800

080051b0 <SPI_vInit>:
#include "SPI_int.h"
#include "Utils.h"
#include "RCC_Interface.h"
#include "GPIO_Interface.h"
void SPI_vInit()
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b08a      	sub	sp, #40	; 0x28
 80051b4:	af00      	add	r7, sp, #0
	RCC_APB2EnableCLK(SPI1EN);
 80051b6:	200c      	movs	r0, #12
 80051b8:	f7ff ffe2 	bl	8005180 <RCC_APB2EnableCLK>

	/*1- CPHA and CPOL CFG*/
	SET_BIT(SPI->SPI_CR1,CPHA);
 80051bc:	4b38      	ldr	r3, [pc, #224]	; (80052a0 <SPI_vInit+0xf0>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a37      	ldr	r2, [pc, #220]	; (80052a0 <SPI_vInit+0xf0>)
 80051c2:	f043 0301 	orr.w	r3, r3, #1
 80051c6:	6013      	str	r3, [r2, #0]
	SET_BIT(SPI->SPI_CR1,CPOL);
 80051c8:	4b35      	ldr	r3, [pc, #212]	; (80052a0 <SPI_vInit+0xf0>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a34      	ldr	r2, [pc, #208]	; (80052a0 <SPI_vInit+0xf0>)
 80051ce:	f043 0302 	orr.w	r3, r3, #2
 80051d2:	6013      	str	r3, [r2, #0]
	/*2- select Master*/
	SET_BIT(SPI->SPI_CR1,MSTR);
 80051d4:	4b32      	ldr	r3, [pc, #200]	; (80052a0 <SPI_vInit+0xf0>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a31      	ldr	r2, [pc, #196]	; (80052a0 <SPI_vInit+0xf0>)
 80051da:	f043 0304 	orr.w	r3, r3, #4
 80051de:	6013      	str	r3, [r2, #0]
	/*3- CFG BaudRate*/
	SPI->SPI_CR1 &= ~(0b111 << SPI_BR0);
 80051e0:	4b2f      	ldr	r3, [pc, #188]	; (80052a0 <SPI_vInit+0xf0>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a2e      	ldr	r2, [pc, #184]	; (80052a0 <SPI_vInit+0xf0>)
 80051e6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80051ea:	6013      	str	r3, [r2, #0]
	SPI->SPI_CR1 |=  (0b011 << SPI_BR0);
 80051ec:	4b2c      	ldr	r3, [pc, #176]	; (80052a0 <SPI_vInit+0xf0>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a2b      	ldr	r2, [pc, #172]	; (80052a0 <SPI_vInit+0xf0>)
 80051f2:	f043 0318 	orr.w	r3, r3, #24
 80051f6:	6013      	str	r3, [r2, #0]
	/*4- MSB first*/
	CLEAR_BIT(SPI->SPI_CR1,LSBFIRST);
 80051f8:	4b29      	ldr	r3, [pc, #164]	; (80052a0 <SPI_vInit+0xf0>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a28      	ldr	r2, [pc, #160]	; (80052a0 <SPI_vInit+0xf0>)
 80051fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005202:	6013      	str	r3, [r2, #0]
	/*5- SSM and ISS CFG*/
	SET_BIT(SPI->SPI_CR1,SSI);
 8005204:	4b26      	ldr	r3, [pc, #152]	; (80052a0 <SPI_vInit+0xf0>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a25      	ldr	r2, [pc, #148]	; (80052a0 <SPI_vInit+0xf0>)
 800520a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800520e:	6013      	str	r3, [r2, #0]
	SET_BIT(SPI->SPI_CR1,SSM);
 8005210:	4b23      	ldr	r3, [pc, #140]	; (80052a0 <SPI_vInit+0xf0>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a22      	ldr	r2, [pc, #136]	; (80052a0 <SPI_vInit+0xf0>)
 8005216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800521a:	6013      	str	r3, [r2, #0]
	/*6- Data length*/
	CLEAR_BIT(SPI->SPI_CR1,DFF); // 8 bit
 800521c:	4b20      	ldr	r3, [pc, #128]	; (80052a0 <SPI_vInit+0xf0>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a1f      	ldr	r2, [pc, #124]	; (80052a0 <SPI_vInit+0xf0>)
 8005222:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005226:	6013      	str	r3, [r2, #0]
	/*7- SPI Enable*/
	SET_BIT(SPI->SPI_CR1,SPE);
 8005228:	4b1d      	ldr	r3, [pc, #116]	; (80052a0 <SPI_vInit+0xf0>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a1c      	ldr	r2, [pc, #112]	; (80052a0 <SPI_vInit+0xf0>)
 800522e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005232:	6013      	str	r3, [r2, #0]

	GPIO_CFG_t MOSI =
 8005234:	f107 031c 	add.w	r3, r7, #28
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	605a      	str	r2, [r3, #4]
 800523e:	721a      	strb	r2, [r3, #8]
 8005240:	2307      	movs	r3, #7
 8005242:	777b      	strb	r3, [r7, #29]
 8005244:	2302      	movs	r3, #2
 8005246:	77bb      	strb	r3, [r7, #30]
 8005248:	2305      	movs	r3, #5
 800524a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			.PIN_Type=ALTERNATE,
			.PIN_OType=PUSH_PULL,
			.PIN_OSpeed=LOW_SPEED,
			.PIN_AF=AF5
	};
	GPIO_CFG_t MISO =
 800524e:	f107 0310 	add.w	r3, r7, #16
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	605a      	str	r2, [r3, #4]
 8005258:	721a      	strb	r2, [r3, #8]
 800525a:	2306      	movs	r3, #6
 800525c:	747b      	strb	r3, [r7, #17]
 800525e:	2302      	movs	r3, #2
 8005260:	74bb      	strb	r3, [r7, #18]
 8005262:	2305      	movs	r3, #5
 8005264:	763b      	strb	r3, [r7, #24]
			.PIN_Type=ALTERNATE,
			.PIN_IPullUpDown=NO_PULL,
			.PIN_OSpeed=LOW_SPEED,
			.PIN_AF=AF5
	};
	GPIO_CFG_t SCK =
 8005266:	1d3b      	adds	r3, r7, #4
 8005268:	2200      	movs	r2, #0
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	605a      	str	r2, [r3, #4]
 800526e:	721a      	strb	r2, [r3, #8]
 8005270:	2305      	movs	r3, #5
 8005272:	717b      	strb	r3, [r7, #5]
 8005274:	2302      	movs	r3, #2
 8005276:	71bb      	strb	r3, [r7, #6]
 8005278:	2305      	movs	r3, #5
 800527a:	733b      	strb	r3, [r7, #12]
			.PIN_OType=PUSH_PULL,
			.PIN_OSpeed=LOW_SPEED,
			.PIN_AF=AF5

	};
	MGPIO_Init( &MOSI);
 800527c:	f107 031c 	add.w	r3, r7, #28
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff f8a7 	bl	80043d4 <MGPIO_Init>
	MGPIO_Init( &MISO);
 8005286:	f107 0310 	add.w	r3, r7, #16
 800528a:	4618      	mov	r0, r3
 800528c:	f7ff f8a2 	bl	80043d4 <MGPIO_Init>
	MGPIO_Init( &SCK );
 8005290:	1d3b      	adds	r3, r7, #4
 8005292:	4618      	mov	r0, r3
 8005294:	f7ff f89e 	bl	80043d4 <MGPIO_Init>


}
 8005298:	bf00      	nop
 800529a:	3728      	adds	r7, #40	; 0x28
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	40013000 	.word	0x40013000

080052a4 <SPI_Transceiving>:
uint8_t SPI_Transceiving(uint8_t copy_u16Data)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	4603      	mov	r3, r0
 80052ac:	71fb      	strb	r3, [r7, #7]
	uint8_t k=0;
 80052ae:	2300      	movs	r3, #0
 80052b0:	73fb      	strb	r3, [r7, #15]
//	while(READ_BIT(SPI->SPI_SR,BSY));
	SPI->SPI_DR=copy_u16Data;
 80052b2:	4a0b      	ldr	r2, [pc, #44]	; (80052e0 <SPI_Transceiving+0x3c>)
 80052b4:	79fb      	ldrb	r3, [r7, #7]
 80052b6:	60d3      	str	r3, [r2, #12]
	while(READ_BIT(SPI->SPI_SR,BSY)==1)
 80052b8:	e000      	b.n	80052bc <SPI_Transceiving+0x18>
	{
		asm("NOP");
 80052ba:	bf00      	nop
	while(READ_BIT(SPI->SPI_SR,BSY)==1)
 80052bc:	4b08      	ldr	r3, [pc, #32]	; (80052e0 <SPI_Transceiving+0x3c>)
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	09db      	lsrs	r3, r3, #7
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d0f7      	beq.n	80052ba <SPI_Transceiving+0x16>
	}
	k=SPI->SPI_DR;
 80052ca:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <SPI_Transceiving+0x3c>)
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	73fb      	strb	r3, [r7, #15]
	return k;
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	40013000 	.word	0x40013000

080052e4 <SysTick_Handler>:
#include "SysTick_Interface.h"
STK_Callback_t Global_SysTickCallback;
Interval_t Global_Interval;

void SysTick_Handler(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
	if (Global_Interval == Interval_Single)
 80052e8:	4b09      	ldr	r3, [pc, #36]	; (8005310 <SysTick_Handler+0x2c>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d105      	bne.n	80052fc <SysTick_Handler+0x18>
	{
		//disable counter
		CLEAR_BIT(MSTK->STK_CTRL,ENABLE);
 80052f0:	4b08      	ldr	r3, [pc, #32]	; (8005314 <SysTick_Handler+0x30>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a07      	ldr	r2, [pc, #28]	; (8005314 <SysTick_Handler+0x30>)
 80052f6:	f023 0301 	bic.w	r3, r3, #1
 80052fa:	6013      	str	r3, [r2, #0]
	}
	if (Global_SysTickCallback != 0)
 80052fc:	4b06      	ldr	r3, [pc, #24]	; (8005318 <SysTick_Handler+0x34>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <SysTick_Handler+0x26>
	{
		Global_SysTickCallback();
 8005304:	4b04      	ldr	r3, [pc, #16]	; (8005318 <SysTick_Handler+0x34>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4798      	blx	r3
	}
}
 800530a:	bf00      	nop
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	2000a078 	.word	0x2000a078
 8005314:	e000e010 	.word	0xe000e010
 8005318:	2000a074 	.word	0x2000a074

0800531c <MSTK_vInit>:

void MSTK_vInit()
{
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0
	/*1. CLK SRC*/
	CLEAR_BIT(MSTK->STK_CTRL,CLKSOURCE); // AHB/8 = 2 MHz
 8005320:	4b08      	ldr	r3, [pc, #32]	; (8005344 <MSTK_vInit+0x28>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a07      	ldr	r2, [pc, #28]	; (8005344 <MSTK_vInit+0x28>)
 8005326:	f023 0304 	bic.w	r3, r3, #4
 800532a:	6013      	str	r3, [r2, #0]

	/*2. interrupt enable  */
	CLEAR_BIT(MSTK->STK_CTRL,TICKINT); // Enable INT
 800532c:	4b05      	ldr	r3, [pc, #20]	; (8005344 <MSTK_vInit+0x28>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a04      	ldr	r2, [pc, #16]	; (8005344 <MSTK_vInit+0x28>)
 8005332:	f023 0302 	bic.w	r3, r3, #2
 8005336:	6013      	str	r3, [r2, #0]


}
 8005338:	bf00      	nop
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	e000e010 	.word	0xe000e010

08005348 <MSTK_vSetBusyWaitms>:
	// stop timer
	SET_BIT(MSTK->STK_CTRL,ENABLE);

}
void MSTK_vSetBusyWaitms(uint32_t copy_u32Ticks)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
	// reset timer value to clear count flag
	MSTK->STK_VAL = 0 ;
 8005350:	4b11      	ldr	r3, [pc, #68]	; (8005398 <MSTK_vSetBusyWaitms+0x50>)
 8005352:	2200      	movs	r2, #0
 8005354:	609a      	str	r2, [r3, #8]
	// load timer
	MSTK->STK_LOAD=copy_u32Ticks*2000;
 8005356:	4a10      	ldr	r2, [pc, #64]	; (8005398 <MSTK_vSetBusyWaitms+0x50>)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800535e:	fb01 f303 	mul.w	r3, r1, r3
 8005362:	6053      	str	r3, [r2, #4]
	//Enable timer
	SET_BIT(MSTK->STK_CTRL,ENABLE);
 8005364:	4b0c      	ldr	r3, [pc, #48]	; (8005398 <MSTK_vSetBusyWaitms+0x50>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a0b      	ldr	r2, [pc, #44]	; (8005398 <MSTK_vSetBusyWaitms+0x50>)
 800536a:	f043 0301 	orr.w	r3, r3, #1
 800536e:	6013      	str	r3, [r2, #0]
	//Busy wait
	while(READ_BIT(MSTK->STK_CTRL,COUNTFLAG) != 1);
 8005370:	bf00      	nop
 8005372:	4b09      	ldr	r3, [pc, #36]	; (8005398 <MSTK_vSetBusyWaitms+0x50>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	0c1b      	lsrs	r3, r3, #16
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b01      	cmp	r3, #1
 800537e:	d1f8      	bne.n	8005372 <MSTK_vSetBusyWaitms+0x2a>
	// stop timer
	SET_BIT(MSTK->STK_CTRL,ENABLE);
 8005380:	4b05      	ldr	r3, [pc, #20]	; (8005398 <MSTK_vSetBusyWaitms+0x50>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a04      	ldr	r2, [pc, #16]	; (8005398 <MSTK_vSetBusyWaitms+0x50>)
 8005386:	f043 0301 	orr.w	r3, r3, #1
 800538a:	6013      	str	r3, [r2, #0]

}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	e000e010 	.word	0xe000e010

0800539c <MSTK_vSetBusyWaitus>:
void MSTK_vSetBusyWaitus(uint32_t copy_u32Ticks)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
	// reset timer value to clear count flag
	MSTK->STK_VAL = 0 ;
 80053a4:	4b10      	ldr	r3, [pc, #64]	; (80053e8 <MSTK_vSetBusyWaitus+0x4c>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	609a      	str	r2, [r3, #8]
	// load timer
	MSTK->STK_LOAD=copy_u32Ticks*2;
 80053aa:	4a0f      	ldr	r2, [pc, #60]	; (80053e8 <MSTK_vSetBusyWaitus+0x4c>)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	005b      	lsls	r3, r3, #1
 80053b0:	6053      	str	r3, [r2, #4]
	//Enable timer
	SET_BIT(MSTK->STK_CTRL,ENABLE);
 80053b2:	4b0d      	ldr	r3, [pc, #52]	; (80053e8 <MSTK_vSetBusyWaitus+0x4c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a0c      	ldr	r2, [pc, #48]	; (80053e8 <MSTK_vSetBusyWaitus+0x4c>)
 80053b8:	f043 0301 	orr.w	r3, r3, #1
 80053bc:	6013      	str	r3, [r2, #0]
	//Busy wait
	while(READ_BIT(MSTK->STK_CTRL,COUNTFLAG) != 1);
 80053be:	bf00      	nop
 80053c0:	4b09      	ldr	r3, [pc, #36]	; (80053e8 <MSTK_vSetBusyWaitus+0x4c>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	0c1b      	lsrs	r3, r3, #16
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d1f8      	bne.n	80053c0 <MSTK_vSetBusyWaitus+0x24>
	// stop timer
	SET_BIT(MSTK->STK_CTRL,ENABLE);
 80053ce:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <MSTK_vSetBusyWaitus+0x4c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a05      	ldr	r2, [pc, #20]	; (80053e8 <MSTK_vSetBusyWaitus+0x4c>)
 80053d4:	f043 0301 	orr.w	r3, r3, #1
 80053d8:	6013      	str	r3, [r2, #0]

}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	e000e010 	.word	0xe000e010

080053ec <main>:
#include "SysTick_Interface.h"
#include "RCC_Interface.h"
#include "SPI_int.h"

int main(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
	MSTK_vInit();
 80053f0:	f7ff ff94 	bl	800531c <MSTK_vInit>

	TFT_vInit();
 80053f4:	f7fe ff5c 	bl	80042b0 <TFT_vInit>
	TFT_vDisplay(arrImage);
 80053f8:	4801      	ldr	r0, [pc, #4]	; (8005400 <main+0x14>)
 80053fa:	f7fe ff7d 	bl	80042f8 <TFT_vDisplay>

    /* Loop forever */
	for(;;);
 80053fe:	e7fe      	b.n	80053fe <main+0x12>
 8005400:	20000000 	.word	0x20000000

08005404 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005404:	480d      	ldr	r0, [pc, #52]	; (800543c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005406:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005408:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800540c:	480c      	ldr	r0, [pc, #48]	; (8005440 <LoopForever+0x6>)
  ldr r1, =_edata
 800540e:	490d      	ldr	r1, [pc, #52]	; (8005444 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005410:	4a0d      	ldr	r2, [pc, #52]	; (8005448 <LoopForever+0xe>)
  movs r3, #0
 8005412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005414:	e002      	b.n	800541c <LoopCopyDataInit>

08005416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800541a:	3304      	adds	r3, #4

0800541c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800541c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800541e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005420:	d3f9      	bcc.n	8005416 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005422:	4a0a      	ldr	r2, [pc, #40]	; (800544c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005424:	4c0a      	ldr	r4, [pc, #40]	; (8005450 <LoopForever+0x16>)
  movs r3, #0
 8005426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005428:	e001      	b.n	800542e <LoopFillZerobss>

0800542a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800542a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800542c:	3204      	adds	r2, #4

0800542e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800542e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005430:	d3fb      	bcc.n	800542a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005432:	f000 f811 	bl	8005458 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005436:	f7ff ffd9 	bl	80053ec <main>

0800543a <LoopForever>:

LoopForever:
  b LoopForever
 800543a:	e7fe      	b.n	800543a <LoopForever>
  ldr   r0, =_estack
 800543c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8005440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005444:	2000a018 	.word	0x2000a018
  ldr r2, =_sidata
 8005448:	080054c0 	.word	0x080054c0
  ldr r2, =_sbss
 800544c:	2000a018 	.word	0x2000a018
  ldr r4, =_ebss
 8005450:	2000a07c 	.word	0x2000a07c

08005454 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005454:	e7fe      	b.n	8005454 <ADC_IRQHandler>
	...

08005458 <__libc_init_array>:
 8005458:	b570      	push	{r4, r5, r6, lr}
 800545a:	4d0d      	ldr	r5, [pc, #52]	; (8005490 <__libc_init_array+0x38>)
 800545c:	4c0d      	ldr	r4, [pc, #52]	; (8005494 <__libc_init_array+0x3c>)
 800545e:	1b64      	subs	r4, r4, r5
 8005460:	10a4      	asrs	r4, r4, #2
 8005462:	2600      	movs	r6, #0
 8005464:	42a6      	cmp	r6, r4
 8005466:	d109      	bne.n	800547c <__libc_init_array+0x24>
 8005468:	4d0b      	ldr	r5, [pc, #44]	; (8005498 <__libc_init_array+0x40>)
 800546a:	4c0c      	ldr	r4, [pc, #48]	; (800549c <__libc_init_array+0x44>)
 800546c:	f000 f818 	bl	80054a0 <_init>
 8005470:	1b64      	subs	r4, r4, r5
 8005472:	10a4      	asrs	r4, r4, #2
 8005474:	2600      	movs	r6, #0
 8005476:	42a6      	cmp	r6, r4
 8005478:	d105      	bne.n	8005486 <__libc_init_array+0x2e>
 800547a:	bd70      	pop	{r4, r5, r6, pc}
 800547c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005480:	4798      	blx	r3
 8005482:	3601      	adds	r6, #1
 8005484:	e7ee      	b.n	8005464 <__libc_init_array+0xc>
 8005486:	f855 3b04 	ldr.w	r3, [r5], #4
 800548a:	4798      	blx	r3
 800548c:	3601      	adds	r6, #1
 800548e:	e7f2      	b.n	8005476 <__libc_init_array+0x1e>
 8005490:	080054b8 	.word	0x080054b8
 8005494:	080054b8 	.word	0x080054b8
 8005498:	080054b8 	.word	0x080054b8
 800549c:	080054bc 	.word	0x080054bc

080054a0 <_init>:
 80054a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a2:	bf00      	nop
 80054a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054a6:	bc08      	pop	{r3}
 80054a8:	469e      	mov	lr, r3
 80054aa:	4770      	bx	lr

080054ac <_fini>:
 80054ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ae:	bf00      	nop
 80054b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054b2:	bc08      	pop	{r3}
 80054b4:	469e      	mov	lr, r3
 80054b6:	4770      	bx	lr
