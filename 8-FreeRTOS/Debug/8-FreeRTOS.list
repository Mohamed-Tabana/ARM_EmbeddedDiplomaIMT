
8-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c18  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003db8  08003db8  00013db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dc8  08003dc8  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08003dc8  08003dc8  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003dc8  08003dc8  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dc8  08003dc8  00013dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dcc  08003dcc  00013dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08003dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000519c  20000024  08003df4  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200051c0  08003df4  000251c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006804  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001390  00000000  00000000  00026856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000620  00000000  00000000  00027be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000578  00000000  00000000  00028208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002ed5  00000000  00000000  00028780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006f0c  00000000  00000000  0002b655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00012404  00000000  00000000  00032561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00044965  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000181c  00000000  00000000  000449b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000024 	.word	0x20000024
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003da0 	.word	0x08003da0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000028 	.word	0x20000028
 80001dc:	08003da0 	.word	0x08003da0

080001e0 <EXTI0_IRQHandler>:
#include "RCC_Interface.h"

EXTI_Callback_t Global_EXTICallBack[16];

void EXTI0_IRQHandler(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	//if (Global_EXTICallBack[0] != NULL)
	Global_EXTICallBack[0]();
 80001e4:	4b05      	ldr	r3, [pc, #20]	; (80001fc <EXTI0_IRQHandler+0x1c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4798      	blx	r3
	SET_BIT(MEXTI->EXTI_PR,EXTI_LINE_0);
 80001ea:	4b05      	ldr	r3, [pc, #20]	; (8000200 <EXTI0_IRQHandler+0x20>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	4a04      	ldr	r2, [pc, #16]	; (8000200 <EXTI0_IRQHandler+0x20>)
 80001f0:	f043 0301 	orr.w	r3, r3, #1
 80001f4:	6153      	str	r3, [r2, #20]
}
 80001f6:	bf00      	nop
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	20000040 	.word	0x20000040
 8000200:	40013c00 	.word	0x40013c00

08000204 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
//	if (Global_EXTICallBack[1] != NULL)
	Global_EXTICallBack[1]();
 8000208:	4b05      	ldr	r3, [pc, #20]	; (8000220 <EXTI1_IRQHandler+0x1c>)
 800020a:	685b      	ldr	r3, [r3, #4]
 800020c:	4798      	blx	r3
	SET_BIT(MEXTI->EXTI_PR,EXTI_LINE_1);
 800020e:	4b05      	ldr	r3, [pc, #20]	; (8000224 <EXTI1_IRQHandler+0x20>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	4a04      	ldr	r2, [pc, #16]	; (8000224 <EXTI1_IRQHandler+0x20>)
 8000214:	f043 0302 	orr.w	r3, r3, #2
 8000218:	6153      	str	r3, [r2, #20]

}
 800021a:	bf00      	nop
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	20000040 	.word	0x20000040
 8000224:	40013c00 	.word	0x40013c00

08000228 <MGPIO_Init>:
#include "GPIO_Interface.h"
#include "RCC_Interface.h"
#include "Utils.h"

void MGPIO_Init(GPIO_CFG_t* copy_GPIO_pCFG)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
	RCC_AHB1EnableCLK(GPIOAEN);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 ff25 	bl	8001080 <RCC_AHB1EnableCLK>
	RCC_AHB1EnableCLK(GPIOBEN);
 8000236:	2001      	movs	r0, #1
 8000238:	f000 ff22 	bl	8001080 <RCC_AHB1EnableCLK>

	MGPIO_vSetPinType(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_Type);
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	7818      	ldrb	r0, [r3, #0]
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	7859      	ldrb	r1, [r3, #1]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	789b      	ldrb	r3, [r3, #2]
 8000248:	461a      	mov	r2, r3
 800024a:	f000 f83b 	bl	80002c4 <MGPIO_vSetPinType>
	MGPIO_vSetOutputPinType(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_OType);
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	7818      	ldrb	r0, [r3, #0]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	7859      	ldrb	r1, [r3, #1]
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	791b      	ldrb	r3, [r3, #4]
 800025a:	461a      	mov	r2, r3
 800025c:	f000 f8f0 	bl	8000440 <MGPIO_vSetOutputPinType>
	MGPIO_vSetOutputPinSpeed(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_OSpeed);
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	7818      	ldrb	r0, [r3, #0]
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	7859      	ldrb	r1, [r3, #1]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	795b      	ldrb	r3, [r3, #5]
 800026c:	461a      	mov	r2, r3
 800026e:	f000 f99b 	bl	80005a8 <MGPIO_vSetOutputPinSpeed>
	MGPIO_vSetInputPinPullUpDown(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_IPullUpDown);
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	7818      	ldrb	r0, [r3, #0]
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	7859      	ldrb	r1, [r3, #1]
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	799b      	ldrb	r3, [r3, #6]
 800027e:	461a      	mov	r2, r3
 8000280:	f000 fa50 	bl	8000724 <MGPIO_vSetInputPinPullUpDown>
	MGPIO_vSetOutputPinValueBSR(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_OValue);
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	7818      	ldrb	r0, [r3, #0]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	7859      	ldrb	r1, [r3, #1]
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	78db      	ldrb	r3, [r3, #3]
 8000290:	461a      	mov	r2, r3
 8000292:	f000 fc25 	bl	8000ae0 <MGPIO_vSetOutputPinValueBSR>
	MGPIO_vSetPinLockSTS(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_LCKSTS);
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	7818      	ldrb	r0, [r3, #0]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	7859      	ldrb	r1, [r3, #1]
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	79db      	ldrb	r3, [r3, #7]
 80002a2:	461a      	mov	r2, r3
 80002a4:	f000 fd04 	bl	8000cb0 <MGPIO_vSetPinLockSTS>
	MGPIO_vSetPinAlternativeFunction(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_AF);
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	7818      	ldrb	r0, [r3, #0]
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	7859      	ldrb	r1, [r3, #1]
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	7a1b      	ldrb	r3, [r3, #8]
 80002b4:	461a      	mov	r2, r3
 80002b6:	f000 fdad 	bl	8000e14 <MGPIO_vSetPinAlternativeFunction>


}
 80002ba:	bf00      	nop
 80002bc:	3708      	adds	r7, #8
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
	...

080002c4 <MGPIO_vSetPinType>:

void MGPIO_vSetPinType(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_PinType_t copy_eGPIO_PinType)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	4603      	mov	r3, r0
 80002cc:	71fb      	strb	r3, [r7, #7]
 80002ce:	460b      	mov	r3, r1
 80002d0:	71bb      	strb	r3, [r7, #6]
 80002d2:	4613      	mov	r3, r2
 80002d4:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	2b05      	cmp	r3, #5
 80002da:	f200 809f 	bhi.w	800041c <MGPIO_vSetPinType+0x158>
 80002de:	a201      	add	r2, pc, #4	; (adr r2, 80002e4 <MGPIO_vSetPinType+0x20>)
 80002e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002e4:	080002fd 	.word	0x080002fd
 80002e8:	0800032d 	.word	0x0800032d
 80002ec:	0800035d 	.word	0x0800035d
 80002f0:	0800038d 	.word	0x0800038d
 80002f4:	080003bd 	.word	0x080003bd
 80002f8:	080003ed 	.word	0x080003ed
	{
	case PORTA:
		GPIOA->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 80002fc:	4b4a      	ldr	r3, [pc, #296]	; (8000428 <MGPIO_vSetPinType+0x164>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	79ba      	ldrb	r2, [r7, #6]
 8000302:	0052      	lsls	r2, r2, #1
 8000304:	2103      	movs	r1, #3
 8000306:	fa01 f202 	lsl.w	r2, r1, r2
 800030a:	43d2      	mvns	r2, r2
 800030c:	4611      	mov	r1, r2
 800030e:	4a46      	ldr	r2, [pc, #280]	; (8000428 <MGPIO_vSetPinType+0x164>)
 8000310:	400b      	ands	r3, r1
 8000312:	6013      	str	r3, [r2, #0]
		GPIOA->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 8000314:	4b44      	ldr	r3, [pc, #272]	; (8000428 <MGPIO_vSetPinType+0x164>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	7979      	ldrb	r1, [r7, #5]
 800031a:	79ba      	ldrb	r2, [r7, #6]
 800031c:	0052      	lsls	r2, r2, #1
 800031e:	fa01 f202 	lsl.w	r2, r1, r2
 8000322:	4611      	mov	r1, r2
 8000324:	4a40      	ldr	r2, [pc, #256]	; (8000428 <MGPIO_vSetPinType+0x164>)
 8000326:	430b      	orrs	r3, r1
 8000328:	6013      	str	r3, [r2, #0]
		break;
 800032a:	e077      	b.n	800041c <MGPIO_vSetPinType+0x158>
	case PORTB:
		GPIOB->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 800032c:	4b3f      	ldr	r3, [pc, #252]	; (800042c <MGPIO_vSetPinType+0x168>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	79ba      	ldrb	r2, [r7, #6]
 8000332:	0052      	lsls	r2, r2, #1
 8000334:	2103      	movs	r1, #3
 8000336:	fa01 f202 	lsl.w	r2, r1, r2
 800033a:	43d2      	mvns	r2, r2
 800033c:	4611      	mov	r1, r2
 800033e:	4a3b      	ldr	r2, [pc, #236]	; (800042c <MGPIO_vSetPinType+0x168>)
 8000340:	400b      	ands	r3, r1
 8000342:	6013      	str	r3, [r2, #0]
		GPIOB->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 8000344:	4b39      	ldr	r3, [pc, #228]	; (800042c <MGPIO_vSetPinType+0x168>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	7979      	ldrb	r1, [r7, #5]
 800034a:	79ba      	ldrb	r2, [r7, #6]
 800034c:	0052      	lsls	r2, r2, #1
 800034e:	fa01 f202 	lsl.w	r2, r1, r2
 8000352:	4611      	mov	r1, r2
 8000354:	4a35      	ldr	r2, [pc, #212]	; (800042c <MGPIO_vSetPinType+0x168>)
 8000356:	430b      	orrs	r3, r1
 8000358:	6013      	str	r3, [r2, #0]
		break;
 800035a:	e05f      	b.n	800041c <MGPIO_vSetPinType+0x158>
	case PORTC:
		GPIOC->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 800035c:	4b34      	ldr	r3, [pc, #208]	; (8000430 <MGPIO_vSetPinType+0x16c>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	79ba      	ldrb	r2, [r7, #6]
 8000362:	0052      	lsls	r2, r2, #1
 8000364:	2103      	movs	r1, #3
 8000366:	fa01 f202 	lsl.w	r2, r1, r2
 800036a:	43d2      	mvns	r2, r2
 800036c:	4611      	mov	r1, r2
 800036e:	4a30      	ldr	r2, [pc, #192]	; (8000430 <MGPIO_vSetPinType+0x16c>)
 8000370:	400b      	ands	r3, r1
 8000372:	6013      	str	r3, [r2, #0]
		GPIOC->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 8000374:	4b2e      	ldr	r3, [pc, #184]	; (8000430 <MGPIO_vSetPinType+0x16c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	7979      	ldrb	r1, [r7, #5]
 800037a:	79ba      	ldrb	r2, [r7, #6]
 800037c:	0052      	lsls	r2, r2, #1
 800037e:	fa01 f202 	lsl.w	r2, r1, r2
 8000382:	4611      	mov	r1, r2
 8000384:	4a2a      	ldr	r2, [pc, #168]	; (8000430 <MGPIO_vSetPinType+0x16c>)
 8000386:	430b      	orrs	r3, r1
 8000388:	6013      	str	r3, [r2, #0]
		break;
 800038a:	e047      	b.n	800041c <MGPIO_vSetPinType+0x158>
	case PORTD:
		GPIOD->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 800038c:	4b29      	ldr	r3, [pc, #164]	; (8000434 <MGPIO_vSetPinType+0x170>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	79ba      	ldrb	r2, [r7, #6]
 8000392:	0052      	lsls	r2, r2, #1
 8000394:	2103      	movs	r1, #3
 8000396:	fa01 f202 	lsl.w	r2, r1, r2
 800039a:	43d2      	mvns	r2, r2
 800039c:	4611      	mov	r1, r2
 800039e:	4a25      	ldr	r2, [pc, #148]	; (8000434 <MGPIO_vSetPinType+0x170>)
 80003a0:	400b      	ands	r3, r1
 80003a2:	6013      	str	r3, [r2, #0]
		GPIOD->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 80003a4:	4b23      	ldr	r3, [pc, #140]	; (8000434 <MGPIO_vSetPinType+0x170>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	7979      	ldrb	r1, [r7, #5]
 80003aa:	79ba      	ldrb	r2, [r7, #6]
 80003ac:	0052      	lsls	r2, r2, #1
 80003ae:	fa01 f202 	lsl.w	r2, r1, r2
 80003b2:	4611      	mov	r1, r2
 80003b4:	4a1f      	ldr	r2, [pc, #124]	; (8000434 <MGPIO_vSetPinType+0x170>)
 80003b6:	430b      	orrs	r3, r1
 80003b8:	6013      	str	r3, [r2, #0]
		break;
 80003ba:	e02f      	b.n	800041c <MGPIO_vSetPinType+0x158>
	case PORTE:
		GPIOE->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 80003bc:	4b1e      	ldr	r3, [pc, #120]	; (8000438 <MGPIO_vSetPinType+0x174>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	79ba      	ldrb	r2, [r7, #6]
 80003c2:	0052      	lsls	r2, r2, #1
 80003c4:	2103      	movs	r1, #3
 80003c6:	fa01 f202 	lsl.w	r2, r1, r2
 80003ca:	43d2      	mvns	r2, r2
 80003cc:	4611      	mov	r1, r2
 80003ce:	4a1a      	ldr	r2, [pc, #104]	; (8000438 <MGPIO_vSetPinType+0x174>)
 80003d0:	400b      	ands	r3, r1
 80003d2:	6013      	str	r3, [r2, #0]
		GPIOE->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 80003d4:	4b18      	ldr	r3, [pc, #96]	; (8000438 <MGPIO_vSetPinType+0x174>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	7979      	ldrb	r1, [r7, #5]
 80003da:	79ba      	ldrb	r2, [r7, #6]
 80003dc:	0052      	lsls	r2, r2, #1
 80003de:	fa01 f202 	lsl.w	r2, r1, r2
 80003e2:	4611      	mov	r1, r2
 80003e4:	4a14      	ldr	r2, [pc, #80]	; (8000438 <MGPIO_vSetPinType+0x174>)
 80003e6:	430b      	orrs	r3, r1
 80003e8:	6013      	str	r3, [r2, #0]
		break;
 80003ea:	e017      	b.n	800041c <MGPIO_vSetPinType+0x158>
	case PORTH:
		GPIOH->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 80003ec:	4b13      	ldr	r3, [pc, #76]	; (800043c <MGPIO_vSetPinType+0x178>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	79ba      	ldrb	r2, [r7, #6]
 80003f2:	0052      	lsls	r2, r2, #1
 80003f4:	2103      	movs	r1, #3
 80003f6:	fa01 f202 	lsl.w	r2, r1, r2
 80003fa:	43d2      	mvns	r2, r2
 80003fc:	4611      	mov	r1, r2
 80003fe:	4a0f      	ldr	r2, [pc, #60]	; (800043c <MGPIO_vSetPinType+0x178>)
 8000400:	400b      	ands	r3, r1
 8000402:	6013      	str	r3, [r2, #0]
		GPIOH->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 8000404:	4b0d      	ldr	r3, [pc, #52]	; (800043c <MGPIO_vSetPinType+0x178>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	7979      	ldrb	r1, [r7, #5]
 800040a:	79ba      	ldrb	r2, [r7, #6]
 800040c:	0052      	lsls	r2, r2, #1
 800040e:	fa01 f202 	lsl.w	r2, r1, r2
 8000412:	4611      	mov	r1, r2
 8000414:	4a09      	ldr	r2, [pc, #36]	; (800043c <MGPIO_vSetPinType+0x178>)
 8000416:	430b      	orrs	r3, r1
 8000418:	6013      	str	r3, [r2, #0]
		break;
 800041a:	bf00      	nop
	}
}
 800041c:	bf00      	nop
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr
 8000428:	40020000 	.word	0x40020000
 800042c:	40020400 	.word	0x40020400
 8000430:	40020800 	.word	0x40020800
 8000434:	40020c00 	.word	0x40020c00
 8000438:	40021000 	.word	0x40021000
 800043c:	40021c00 	.word	0x40021c00

08000440 <MGPIO_vSetOutputPinType>:
void MGPIO_vSetOutputPinType(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_OType_t copy_GPIO_OType)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	71fb      	strb	r3, [r7, #7]
 800044a:	460b      	mov	r3, r1
 800044c:	71bb      	strb	r3, [r7, #6]
 800044e:	4613      	mov	r3, r2
 8000450:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	2b05      	cmp	r3, #5
 8000456:	f200 8095 	bhi.w	8000584 <MGPIO_vSetOutputPinType+0x144>
 800045a:	a201      	add	r2, pc, #4	; (adr r2, 8000460 <MGPIO_vSetOutputPinType+0x20>)
 800045c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000460:	08000479 	.word	0x08000479
 8000464:	080004a7 	.word	0x080004a7
 8000468:	080004d5 	.word	0x080004d5
 800046c:	08000501 	.word	0x08000501
 8000470:	0800052d 	.word	0x0800052d
 8000474:	08000559 	.word	0x08000559
	{
	case PORTA:
		GPIOA->GPIO_OTYPER &= ~(0b1<<copy_eGPIO_Pin*2);
 8000478:	4b45      	ldr	r3, [pc, #276]	; (8000590 <MGPIO_vSetOutputPinType+0x150>)
 800047a:	685b      	ldr	r3, [r3, #4]
 800047c:	79ba      	ldrb	r2, [r7, #6]
 800047e:	0052      	lsls	r2, r2, #1
 8000480:	2101      	movs	r1, #1
 8000482:	fa01 f202 	lsl.w	r2, r1, r2
 8000486:	43d2      	mvns	r2, r2
 8000488:	4611      	mov	r1, r2
 800048a:	4a41      	ldr	r2, [pc, #260]	; (8000590 <MGPIO_vSetOutputPinType+0x150>)
 800048c:	400b      	ands	r3, r1
 800048e:	6053      	str	r3, [r2, #4]
		GPIOA->GPIO_OTYPER |= (copy_GPIO_OType<<copy_eGPIO_Pin);
 8000490:	4b3f      	ldr	r3, [pc, #252]	; (8000590 <MGPIO_vSetOutputPinType+0x150>)
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	7979      	ldrb	r1, [r7, #5]
 8000496:	79ba      	ldrb	r2, [r7, #6]
 8000498:	fa01 f202 	lsl.w	r2, r1, r2
 800049c:	4611      	mov	r1, r2
 800049e:	4a3c      	ldr	r2, [pc, #240]	; (8000590 <MGPIO_vSetOutputPinType+0x150>)
 80004a0:	430b      	orrs	r3, r1
 80004a2:	6053      	str	r3, [r2, #4]
		break;
 80004a4:	e06e      	b.n	8000584 <MGPIO_vSetOutputPinType+0x144>
	case PORTB:
		GPIOB->GPIO_OTYPER &= ~(0b1<<copy_eGPIO_Pin*2);
 80004a6:	4b3b      	ldr	r3, [pc, #236]	; (8000594 <MGPIO_vSetOutputPinType+0x154>)
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	79ba      	ldrb	r2, [r7, #6]
 80004ac:	0052      	lsls	r2, r2, #1
 80004ae:	2101      	movs	r1, #1
 80004b0:	fa01 f202 	lsl.w	r2, r1, r2
 80004b4:	43d2      	mvns	r2, r2
 80004b6:	4611      	mov	r1, r2
 80004b8:	4a36      	ldr	r2, [pc, #216]	; (8000594 <MGPIO_vSetOutputPinType+0x154>)
 80004ba:	400b      	ands	r3, r1
 80004bc:	6053      	str	r3, [r2, #4]
		GPIOB->GPIO_OTYPER |= (copy_GPIO_OType<<copy_eGPIO_Pin);
 80004be:	4b35      	ldr	r3, [pc, #212]	; (8000594 <MGPIO_vSetOutputPinType+0x154>)
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	7979      	ldrb	r1, [r7, #5]
 80004c4:	79ba      	ldrb	r2, [r7, #6]
 80004c6:	fa01 f202 	lsl.w	r2, r1, r2
 80004ca:	4611      	mov	r1, r2
 80004cc:	4a31      	ldr	r2, [pc, #196]	; (8000594 <MGPIO_vSetOutputPinType+0x154>)
 80004ce:	430b      	orrs	r3, r1
 80004d0:	6053      	str	r3, [r2, #4]
		break;
 80004d2:	e057      	b.n	8000584 <MGPIO_vSetOutputPinType+0x144>
	case PORTC:
		GPIOC->GPIO_OTYPER &= ~(0b1<<copy_eGPIO_Pin);
 80004d4:	4b30      	ldr	r3, [pc, #192]	; (8000598 <MGPIO_vSetOutputPinType+0x158>)
 80004d6:	685b      	ldr	r3, [r3, #4]
 80004d8:	79ba      	ldrb	r2, [r7, #6]
 80004da:	2101      	movs	r1, #1
 80004dc:	fa01 f202 	lsl.w	r2, r1, r2
 80004e0:	43d2      	mvns	r2, r2
 80004e2:	4611      	mov	r1, r2
 80004e4:	4a2c      	ldr	r2, [pc, #176]	; (8000598 <MGPIO_vSetOutputPinType+0x158>)
 80004e6:	400b      	ands	r3, r1
 80004e8:	6053      	str	r3, [r2, #4]
		GPIOC->GPIO_OTYPER |= (copy_GPIO_OType<<copy_eGPIO_Pin);
 80004ea:	4b2b      	ldr	r3, [pc, #172]	; (8000598 <MGPIO_vSetOutputPinType+0x158>)
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	7979      	ldrb	r1, [r7, #5]
 80004f0:	79ba      	ldrb	r2, [r7, #6]
 80004f2:	fa01 f202 	lsl.w	r2, r1, r2
 80004f6:	4611      	mov	r1, r2
 80004f8:	4a27      	ldr	r2, [pc, #156]	; (8000598 <MGPIO_vSetOutputPinType+0x158>)
 80004fa:	430b      	orrs	r3, r1
 80004fc:	6053      	str	r3, [r2, #4]
		break;
 80004fe:	e041      	b.n	8000584 <MGPIO_vSetOutputPinType+0x144>
	case PORTD:
		GPIOD->GPIO_OTYPER &= ~(0b1<<copy_eGPIO_Pin);
 8000500:	4b26      	ldr	r3, [pc, #152]	; (800059c <MGPIO_vSetOutputPinType+0x15c>)
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	79ba      	ldrb	r2, [r7, #6]
 8000506:	2101      	movs	r1, #1
 8000508:	fa01 f202 	lsl.w	r2, r1, r2
 800050c:	43d2      	mvns	r2, r2
 800050e:	4611      	mov	r1, r2
 8000510:	4a22      	ldr	r2, [pc, #136]	; (800059c <MGPIO_vSetOutputPinType+0x15c>)
 8000512:	400b      	ands	r3, r1
 8000514:	6053      	str	r3, [r2, #4]
		GPIOD->GPIO_OTYPER |= (copy_GPIO_OType<<copy_eGPIO_Pin);
 8000516:	4b21      	ldr	r3, [pc, #132]	; (800059c <MGPIO_vSetOutputPinType+0x15c>)
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	7979      	ldrb	r1, [r7, #5]
 800051c:	79ba      	ldrb	r2, [r7, #6]
 800051e:	fa01 f202 	lsl.w	r2, r1, r2
 8000522:	4611      	mov	r1, r2
 8000524:	4a1d      	ldr	r2, [pc, #116]	; (800059c <MGPIO_vSetOutputPinType+0x15c>)
 8000526:	430b      	orrs	r3, r1
 8000528:	6053      	str	r3, [r2, #4]
		break;
 800052a:	e02b      	b.n	8000584 <MGPIO_vSetOutputPinType+0x144>
	case PORTE:
		GPIOE->GPIO_OTYPER &= ~(0b1<<copy_eGPIO_Pin);
 800052c:	4b1c      	ldr	r3, [pc, #112]	; (80005a0 <MGPIO_vSetOutputPinType+0x160>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	79ba      	ldrb	r2, [r7, #6]
 8000532:	2101      	movs	r1, #1
 8000534:	fa01 f202 	lsl.w	r2, r1, r2
 8000538:	43d2      	mvns	r2, r2
 800053a:	4611      	mov	r1, r2
 800053c:	4a18      	ldr	r2, [pc, #96]	; (80005a0 <MGPIO_vSetOutputPinType+0x160>)
 800053e:	400b      	ands	r3, r1
 8000540:	6053      	str	r3, [r2, #4]
		GPIOE->GPIO_OTYPER |= (copy_GPIO_OType<<copy_eGPIO_Pin);
 8000542:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <MGPIO_vSetOutputPinType+0x160>)
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	7979      	ldrb	r1, [r7, #5]
 8000548:	79ba      	ldrb	r2, [r7, #6]
 800054a:	fa01 f202 	lsl.w	r2, r1, r2
 800054e:	4611      	mov	r1, r2
 8000550:	4a13      	ldr	r2, [pc, #76]	; (80005a0 <MGPIO_vSetOutputPinType+0x160>)
 8000552:	430b      	orrs	r3, r1
 8000554:	6053      	str	r3, [r2, #4]
		break;
 8000556:	e015      	b.n	8000584 <MGPIO_vSetOutputPinType+0x144>
	case PORTH:
		GPIOH->GPIO_OTYPER &= ~(0b1<<copy_eGPIO_Pin);
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <MGPIO_vSetOutputPinType+0x164>)
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	79ba      	ldrb	r2, [r7, #6]
 800055e:	2101      	movs	r1, #1
 8000560:	fa01 f202 	lsl.w	r2, r1, r2
 8000564:	43d2      	mvns	r2, r2
 8000566:	4611      	mov	r1, r2
 8000568:	4a0e      	ldr	r2, [pc, #56]	; (80005a4 <MGPIO_vSetOutputPinType+0x164>)
 800056a:	400b      	ands	r3, r1
 800056c:	6053      	str	r3, [r2, #4]
		GPIOH->GPIO_OTYPER |= (copy_GPIO_OType<<copy_eGPIO_Pin);
 800056e:	4b0d      	ldr	r3, [pc, #52]	; (80005a4 <MGPIO_vSetOutputPinType+0x164>)
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	7979      	ldrb	r1, [r7, #5]
 8000574:	79ba      	ldrb	r2, [r7, #6]
 8000576:	fa01 f202 	lsl.w	r2, r1, r2
 800057a:	4611      	mov	r1, r2
 800057c:	4a09      	ldr	r2, [pc, #36]	; (80005a4 <MGPIO_vSetOutputPinType+0x164>)
 800057e:	430b      	orrs	r3, r1
 8000580:	6053      	str	r3, [r2, #4]
		break;
 8000582:	bf00      	nop
	}
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	40020000 	.word	0x40020000
 8000594:	40020400 	.word	0x40020400
 8000598:	40020800 	.word	0x40020800
 800059c:	40020c00 	.word	0x40020c00
 80005a0:	40021000 	.word	0x40021000
 80005a4:	40021c00 	.word	0x40021c00

080005a8 <MGPIO_vSetOutputPinSpeed>:
void MGPIO_vSetOutputPinSpeed(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_OSpeed_t copy_GPIO_OSpeed)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
 80005b2:	460b      	mov	r3, r1
 80005b4:	71bb      	strb	r3, [r7, #6]
 80005b6:	4613      	mov	r3, r2
 80005b8:	717b      	strb	r3, [r7, #5]

	switch (copy_eGPIO_Port)
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b05      	cmp	r3, #5
 80005be:	f200 809f 	bhi.w	8000700 <MGPIO_vSetOutputPinSpeed+0x158>
 80005c2:	a201      	add	r2, pc, #4	; (adr r2, 80005c8 <MGPIO_vSetOutputPinSpeed+0x20>)
 80005c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c8:	080005e1 	.word	0x080005e1
 80005cc:	08000611 	.word	0x08000611
 80005d0:	08000641 	.word	0x08000641
 80005d4:	08000671 	.word	0x08000671
 80005d8:	080006a1 	.word	0x080006a1
 80005dc:	080006d1 	.word	0x080006d1
	{
	case PORTA:
		GPIOA->GPIO_OSPEEDR &= ~(0b11<<copy_eGPIO_Pin*2);
 80005e0:	4b4a      	ldr	r3, [pc, #296]	; (800070c <MGPIO_vSetOutputPinSpeed+0x164>)
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	79ba      	ldrb	r2, [r7, #6]
 80005e6:	0052      	lsls	r2, r2, #1
 80005e8:	2103      	movs	r1, #3
 80005ea:	fa01 f202 	lsl.w	r2, r1, r2
 80005ee:	43d2      	mvns	r2, r2
 80005f0:	4611      	mov	r1, r2
 80005f2:	4a46      	ldr	r2, [pc, #280]	; (800070c <MGPIO_vSetOutputPinSpeed+0x164>)
 80005f4:	400b      	ands	r3, r1
 80005f6:	6093      	str	r3, [r2, #8]
		GPIOA->GPIO_OSPEEDR |= (copy_GPIO_OSpeed<<copy_eGPIO_Pin*2);
 80005f8:	4b44      	ldr	r3, [pc, #272]	; (800070c <MGPIO_vSetOutputPinSpeed+0x164>)
 80005fa:	689b      	ldr	r3, [r3, #8]
 80005fc:	7979      	ldrb	r1, [r7, #5]
 80005fe:	79ba      	ldrb	r2, [r7, #6]
 8000600:	0052      	lsls	r2, r2, #1
 8000602:	fa01 f202 	lsl.w	r2, r1, r2
 8000606:	4611      	mov	r1, r2
 8000608:	4a40      	ldr	r2, [pc, #256]	; (800070c <MGPIO_vSetOutputPinSpeed+0x164>)
 800060a:	430b      	orrs	r3, r1
 800060c:	6093      	str	r3, [r2, #8]
		break;
 800060e:	e077      	b.n	8000700 <MGPIO_vSetOutputPinSpeed+0x158>
	case PORTB:
		GPIOB->GPIO_OSPEEDR &= ~(0b11<<copy_eGPIO_Pin*2);
 8000610:	4b3f      	ldr	r3, [pc, #252]	; (8000710 <MGPIO_vSetOutputPinSpeed+0x168>)
 8000612:	689b      	ldr	r3, [r3, #8]
 8000614:	79ba      	ldrb	r2, [r7, #6]
 8000616:	0052      	lsls	r2, r2, #1
 8000618:	2103      	movs	r1, #3
 800061a:	fa01 f202 	lsl.w	r2, r1, r2
 800061e:	43d2      	mvns	r2, r2
 8000620:	4611      	mov	r1, r2
 8000622:	4a3b      	ldr	r2, [pc, #236]	; (8000710 <MGPIO_vSetOutputPinSpeed+0x168>)
 8000624:	400b      	ands	r3, r1
 8000626:	6093      	str	r3, [r2, #8]
		GPIOB->GPIO_OSPEEDR |= (copy_GPIO_OSpeed<<copy_eGPIO_Pin*2);
 8000628:	4b39      	ldr	r3, [pc, #228]	; (8000710 <MGPIO_vSetOutputPinSpeed+0x168>)
 800062a:	689b      	ldr	r3, [r3, #8]
 800062c:	7979      	ldrb	r1, [r7, #5]
 800062e:	79ba      	ldrb	r2, [r7, #6]
 8000630:	0052      	lsls	r2, r2, #1
 8000632:	fa01 f202 	lsl.w	r2, r1, r2
 8000636:	4611      	mov	r1, r2
 8000638:	4a35      	ldr	r2, [pc, #212]	; (8000710 <MGPIO_vSetOutputPinSpeed+0x168>)
 800063a:	430b      	orrs	r3, r1
 800063c:	6093      	str	r3, [r2, #8]
		break;
 800063e:	e05f      	b.n	8000700 <MGPIO_vSetOutputPinSpeed+0x158>
	case PORTC:
		GPIOC->GPIO_OSPEEDR &= ~(0b11<<copy_eGPIO_Pin*2);
 8000640:	4b34      	ldr	r3, [pc, #208]	; (8000714 <MGPIO_vSetOutputPinSpeed+0x16c>)
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	79ba      	ldrb	r2, [r7, #6]
 8000646:	0052      	lsls	r2, r2, #1
 8000648:	2103      	movs	r1, #3
 800064a:	fa01 f202 	lsl.w	r2, r1, r2
 800064e:	43d2      	mvns	r2, r2
 8000650:	4611      	mov	r1, r2
 8000652:	4a30      	ldr	r2, [pc, #192]	; (8000714 <MGPIO_vSetOutputPinSpeed+0x16c>)
 8000654:	400b      	ands	r3, r1
 8000656:	6093      	str	r3, [r2, #8]
		GPIOC->GPIO_OSPEEDR |= (copy_GPIO_OSpeed<<copy_eGPIO_Pin*2);
 8000658:	4b2e      	ldr	r3, [pc, #184]	; (8000714 <MGPIO_vSetOutputPinSpeed+0x16c>)
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	7979      	ldrb	r1, [r7, #5]
 800065e:	79ba      	ldrb	r2, [r7, #6]
 8000660:	0052      	lsls	r2, r2, #1
 8000662:	fa01 f202 	lsl.w	r2, r1, r2
 8000666:	4611      	mov	r1, r2
 8000668:	4a2a      	ldr	r2, [pc, #168]	; (8000714 <MGPIO_vSetOutputPinSpeed+0x16c>)
 800066a:	430b      	orrs	r3, r1
 800066c:	6093      	str	r3, [r2, #8]
		break;
 800066e:	e047      	b.n	8000700 <MGPIO_vSetOutputPinSpeed+0x158>
	case PORTD:
		GPIOD->GPIO_OSPEEDR &= ~(0b11<<copy_eGPIO_Pin*2);
 8000670:	4b29      	ldr	r3, [pc, #164]	; (8000718 <MGPIO_vSetOutputPinSpeed+0x170>)
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	79ba      	ldrb	r2, [r7, #6]
 8000676:	0052      	lsls	r2, r2, #1
 8000678:	2103      	movs	r1, #3
 800067a:	fa01 f202 	lsl.w	r2, r1, r2
 800067e:	43d2      	mvns	r2, r2
 8000680:	4611      	mov	r1, r2
 8000682:	4a25      	ldr	r2, [pc, #148]	; (8000718 <MGPIO_vSetOutputPinSpeed+0x170>)
 8000684:	400b      	ands	r3, r1
 8000686:	6093      	str	r3, [r2, #8]
		GPIOD->GPIO_OSPEEDR |= (copy_GPIO_OSpeed<<copy_eGPIO_Pin*2);
 8000688:	4b23      	ldr	r3, [pc, #140]	; (8000718 <MGPIO_vSetOutputPinSpeed+0x170>)
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	7979      	ldrb	r1, [r7, #5]
 800068e:	79ba      	ldrb	r2, [r7, #6]
 8000690:	0052      	lsls	r2, r2, #1
 8000692:	fa01 f202 	lsl.w	r2, r1, r2
 8000696:	4611      	mov	r1, r2
 8000698:	4a1f      	ldr	r2, [pc, #124]	; (8000718 <MGPIO_vSetOutputPinSpeed+0x170>)
 800069a:	430b      	orrs	r3, r1
 800069c:	6093      	str	r3, [r2, #8]
		break;
 800069e:	e02f      	b.n	8000700 <MGPIO_vSetOutputPinSpeed+0x158>
	case PORTE:
		GPIOE->GPIO_OSPEEDR &= ~(0b11<<copy_eGPIO_Pin*2);
 80006a0:	4b1e      	ldr	r3, [pc, #120]	; (800071c <MGPIO_vSetOutputPinSpeed+0x174>)
 80006a2:	689b      	ldr	r3, [r3, #8]
 80006a4:	79ba      	ldrb	r2, [r7, #6]
 80006a6:	0052      	lsls	r2, r2, #1
 80006a8:	2103      	movs	r1, #3
 80006aa:	fa01 f202 	lsl.w	r2, r1, r2
 80006ae:	43d2      	mvns	r2, r2
 80006b0:	4611      	mov	r1, r2
 80006b2:	4a1a      	ldr	r2, [pc, #104]	; (800071c <MGPIO_vSetOutputPinSpeed+0x174>)
 80006b4:	400b      	ands	r3, r1
 80006b6:	6093      	str	r3, [r2, #8]
		GPIOE->GPIO_OSPEEDR |= (copy_GPIO_OSpeed<<copy_eGPIO_Pin*2);
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <MGPIO_vSetOutputPinSpeed+0x174>)
 80006ba:	689b      	ldr	r3, [r3, #8]
 80006bc:	7979      	ldrb	r1, [r7, #5]
 80006be:	79ba      	ldrb	r2, [r7, #6]
 80006c0:	0052      	lsls	r2, r2, #1
 80006c2:	fa01 f202 	lsl.w	r2, r1, r2
 80006c6:	4611      	mov	r1, r2
 80006c8:	4a14      	ldr	r2, [pc, #80]	; (800071c <MGPIO_vSetOutputPinSpeed+0x174>)
 80006ca:	430b      	orrs	r3, r1
 80006cc:	6093      	str	r3, [r2, #8]
		break;
 80006ce:	e017      	b.n	8000700 <MGPIO_vSetOutputPinSpeed+0x158>
	case PORTH:
		GPIOH->GPIO_OSPEEDR &= ~(0b11<<copy_eGPIO_Pin*2);
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <MGPIO_vSetOutputPinSpeed+0x178>)
 80006d2:	689b      	ldr	r3, [r3, #8]
 80006d4:	79ba      	ldrb	r2, [r7, #6]
 80006d6:	0052      	lsls	r2, r2, #1
 80006d8:	2103      	movs	r1, #3
 80006da:	fa01 f202 	lsl.w	r2, r1, r2
 80006de:	43d2      	mvns	r2, r2
 80006e0:	4611      	mov	r1, r2
 80006e2:	4a0f      	ldr	r2, [pc, #60]	; (8000720 <MGPIO_vSetOutputPinSpeed+0x178>)
 80006e4:	400b      	ands	r3, r1
 80006e6:	6093      	str	r3, [r2, #8]
		GPIOH->GPIO_OSPEEDR |= (copy_GPIO_OSpeed<<copy_eGPIO_Pin*2);
 80006e8:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <MGPIO_vSetOutputPinSpeed+0x178>)
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	7979      	ldrb	r1, [r7, #5]
 80006ee:	79ba      	ldrb	r2, [r7, #6]
 80006f0:	0052      	lsls	r2, r2, #1
 80006f2:	fa01 f202 	lsl.w	r2, r1, r2
 80006f6:	4611      	mov	r1, r2
 80006f8:	4a09      	ldr	r2, [pc, #36]	; (8000720 <MGPIO_vSetOutputPinSpeed+0x178>)
 80006fa:	430b      	orrs	r3, r1
 80006fc:	6093      	str	r3, [r2, #8]
		break;
 80006fe:	bf00      	nop
	}

}
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	40020000 	.word	0x40020000
 8000710:	40020400 	.word	0x40020400
 8000714:	40020800 	.word	0x40020800
 8000718:	40020c00 	.word	0x40020c00
 800071c:	40021000 	.word	0x40021000
 8000720:	40021c00 	.word	0x40021c00

08000724 <MGPIO_vSetInputPinPullUpDown>:
void MGPIO_vSetInputPinPullUpDown(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_PUPD_t copy_GPIO_PUPD)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
 800072e:	460b      	mov	r3, r1
 8000730:	71bb      	strb	r3, [r7, #6]
 8000732:	4613      	mov	r3, r2
 8000734:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	2b05      	cmp	r3, #5
 800073a:	f200 809f 	bhi.w	800087c <MGPIO_vSetInputPinPullUpDown+0x158>
 800073e:	a201      	add	r2, pc, #4	; (adr r2, 8000744 <MGPIO_vSetInputPinPullUpDown+0x20>)
 8000740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000744:	0800075d 	.word	0x0800075d
 8000748:	0800078d 	.word	0x0800078d
 800074c:	080007bd 	.word	0x080007bd
 8000750:	080007ed 	.word	0x080007ed
 8000754:	0800081d 	.word	0x0800081d
 8000758:	0800084d 	.word	0x0800084d
	{
	case PORTA:
		GPIOA->GPIO_PUPDR &= ~(0b11<<copy_eGPIO_Pin*2);
 800075c:	4b4a      	ldr	r3, [pc, #296]	; (8000888 <MGPIO_vSetInputPinPullUpDown+0x164>)
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	79ba      	ldrb	r2, [r7, #6]
 8000762:	0052      	lsls	r2, r2, #1
 8000764:	2103      	movs	r1, #3
 8000766:	fa01 f202 	lsl.w	r2, r1, r2
 800076a:	43d2      	mvns	r2, r2
 800076c:	4611      	mov	r1, r2
 800076e:	4a46      	ldr	r2, [pc, #280]	; (8000888 <MGPIO_vSetInputPinPullUpDown+0x164>)
 8000770:	400b      	ands	r3, r1
 8000772:	60d3      	str	r3, [r2, #12]
		GPIOA->GPIO_PUPDR |= (copy_GPIO_PUPD<<copy_eGPIO_Pin*2);
 8000774:	4b44      	ldr	r3, [pc, #272]	; (8000888 <MGPIO_vSetInputPinPullUpDown+0x164>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	7979      	ldrb	r1, [r7, #5]
 800077a:	79ba      	ldrb	r2, [r7, #6]
 800077c:	0052      	lsls	r2, r2, #1
 800077e:	fa01 f202 	lsl.w	r2, r1, r2
 8000782:	4611      	mov	r1, r2
 8000784:	4a40      	ldr	r2, [pc, #256]	; (8000888 <MGPIO_vSetInputPinPullUpDown+0x164>)
 8000786:	430b      	orrs	r3, r1
 8000788:	60d3      	str	r3, [r2, #12]
		break;
 800078a:	e077      	b.n	800087c <MGPIO_vSetInputPinPullUpDown+0x158>
	case PORTB:
		GPIOB->GPIO_PUPDR &= ~(0b11<<copy_eGPIO_Pin*2);
 800078c:	4b3f      	ldr	r3, [pc, #252]	; (800088c <MGPIO_vSetInputPinPullUpDown+0x168>)
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	79ba      	ldrb	r2, [r7, #6]
 8000792:	0052      	lsls	r2, r2, #1
 8000794:	2103      	movs	r1, #3
 8000796:	fa01 f202 	lsl.w	r2, r1, r2
 800079a:	43d2      	mvns	r2, r2
 800079c:	4611      	mov	r1, r2
 800079e:	4a3b      	ldr	r2, [pc, #236]	; (800088c <MGPIO_vSetInputPinPullUpDown+0x168>)
 80007a0:	400b      	ands	r3, r1
 80007a2:	60d3      	str	r3, [r2, #12]
		GPIOB->GPIO_PUPDR |= (copy_GPIO_PUPD<<copy_eGPIO_Pin*2);
 80007a4:	4b39      	ldr	r3, [pc, #228]	; (800088c <MGPIO_vSetInputPinPullUpDown+0x168>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	7979      	ldrb	r1, [r7, #5]
 80007aa:	79ba      	ldrb	r2, [r7, #6]
 80007ac:	0052      	lsls	r2, r2, #1
 80007ae:	fa01 f202 	lsl.w	r2, r1, r2
 80007b2:	4611      	mov	r1, r2
 80007b4:	4a35      	ldr	r2, [pc, #212]	; (800088c <MGPIO_vSetInputPinPullUpDown+0x168>)
 80007b6:	430b      	orrs	r3, r1
 80007b8:	60d3      	str	r3, [r2, #12]
		break;
 80007ba:	e05f      	b.n	800087c <MGPIO_vSetInputPinPullUpDown+0x158>
	case PORTC:
		GPIOC->GPIO_PUPDR &= ~(0b11<<copy_eGPIO_Pin*2);
 80007bc:	4b34      	ldr	r3, [pc, #208]	; (8000890 <MGPIO_vSetInputPinPullUpDown+0x16c>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	79ba      	ldrb	r2, [r7, #6]
 80007c2:	0052      	lsls	r2, r2, #1
 80007c4:	2103      	movs	r1, #3
 80007c6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ca:	43d2      	mvns	r2, r2
 80007cc:	4611      	mov	r1, r2
 80007ce:	4a30      	ldr	r2, [pc, #192]	; (8000890 <MGPIO_vSetInputPinPullUpDown+0x16c>)
 80007d0:	400b      	ands	r3, r1
 80007d2:	60d3      	str	r3, [r2, #12]
		GPIOC->GPIO_PUPDR |= (copy_GPIO_PUPD<<copy_eGPIO_Pin*2);
 80007d4:	4b2e      	ldr	r3, [pc, #184]	; (8000890 <MGPIO_vSetInputPinPullUpDown+0x16c>)
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	7979      	ldrb	r1, [r7, #5]
 80007da:	79ba      	ldrb	r2, [r7, #6]
 80007dc:	0052      	lsls	r2, r2, #1
 80007de:	fa01 f202 	lsl.w	r2, r1, r2
 80007e2:	4611      	mov	r1, r2
 80007e4:	4a2a      	ldr	r2, [pc, #168]	; (8000890 <MGPIO_vSetInputPinPullUpDown+0x16c>)
 80007e6:	430b      	orrs	r3, r1
 80007e8:	60d3      	str	r3, [r2, #12]
		break;
 80007ea:	e047      	b.n	800087c <MGPIO_vSetInputPinPullUpDown+0x158>
	case PORTD:
		GPIOD->GPIO_PUPDR &= ~(0b11<<copy_eGPIO_Pin*2);
 80007ec:	4b29      	ldr	r3, [pc, #164]	; (8000894 <MGPIO_vSetInputPinPullUpDown+0x170>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	79ba      	ldrb	r2, [r7, #6]
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	2103      	movs	r1, #3
 80007f6:	fa01 f202 	lsl.w	r2, r1, r2
 80007fa:	43d2      	mvns	r2, r2
 80007fc:	4611      	mov	r1, r2
 80007fe:	4a25      	ldr	r2, [pc, #148]	; (8000894 <MGPIO_vSetInputPinPullUpDown+0x170>)
 8000800:	400b      	ands	r3, r1
 8000802:	60d3      	str	r3, [r2, #12]
		GPIOD->GPIO_PUPDR |= (copy_GPIO_PUPD<<copy_eGPIO_Pin*2);
 8000804:	4b23      	ldr	r3, [pc, #140]	; (8000894 <MGPIO_vSetInputPinPullUpDown+0x170>)
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	7979      	ldrb	r1, [r7, #5]
 800080a:	79ba      	ldrb	r2, [r7, #6]
 800080c:	0052      	lsls	r2, r2, #1
 800080e:	fa01 f202 	lsl.w	r2, r1, r2
 8000812:	4611      	mov	r1, r2
 8000814:	4a1f      	ldr	r2, [pc, #124]	; (8000894 <MGPIO_vSetInputPinPullUpDown+0x170>)
 8000816:	430b      	orrs	r3, r1
 8000818:	60d3      	str	r3, [r2, #12]
		break;
 800081a:	e02f      	b.n	800087c <MGPIO_vSetInputPinPullUpDown+0x158>
	case PORTE:
		GPIOE->GPIO_PUPDR &= ~(0b11<<copy_eGPIO_Pin*2);
 800081c:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <MGPIO_vSetInputPinPullUpDown+0x174>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	79ba      	ldrb	r2, [r7, #6]
 8000822:	0052      	lsls	r2, r2, #1
 8000824:	2103      	movs	r1, #3
 8000826:	fa01 f202 	lsl.w	r2, r1, r2
 800082a:	43d2      	mvns	r2, r2
 800082c:	4611      	mov	r1, r2
 800082e:	4a1a      	ldr	r2, [pc, #104]	; (8000898 <MGPIO_vSetInputPinPullUpDown+0x174>)
 8000830:	400b      	ands	r3, r1
 8000832:	60d3      	str	r3, [r2, #12]
		GPIOE->GPIO_PUPDR |= (copy_GPIO_PUPD<<copy_eGPIO_Pin*2);
 8000834:	4b18      	ldr	r3, [pc, #96]	; (8000898 <MGPIO_vSetInputPinPullUpDown+0x174>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	7979      	ldrb	r1, [r7, #5]
 800083a:	79ba      	ldrb	r2, [r7, #6]
 800083c:	0052      	lsls	r2, r2, #1
 800083e:	fa01 f202 	lsl.w	r2, r1, r2
 8000842:	4611      	mov	r1, r2
 8000844:	4a14      	ldr	r2, [pc, #80]	; (8000898 <MGPIO_vSetInputPinPullUpDown+0x174>)
 8000846:	430b      	orrs	r3, r1
 8000848:	60d3      	str	r3, [r2, #12]
		break;
 800084a:	e017      	b.n	800087c <MGPIO_vSetInputPinPullUpDown+0x158>
	case PORTH:
		GPIOH->GPIO_PUPDR &= ~(0b11<<copy_eGPIO_Pin*2);
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <MGPIO_vSetInputPinPullUpDown+0x178>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	79ba      	ldrb	r2, [r7, #6]
 8000852:	0052      	lsls	r2, r2, #1
 8000854:	2103      	movs	r1, #3
 8000856:	fa01 f202 	lsl.w	r2, r1, r2
 800085a:	43d2      	mvns	r2, r2
 800085c:	4611      	mov	r1, r2
 800085e:	4a0f      	ldr	r2, [pc, #60]	; (800089c <MGPIO_vSetInputPinPullUpDown+0x178>)
 8000860:	400b      	ands	r3, r1
 8000862:	60d3      	str	r3, [r2, #12]
		GPIOH->GPIO_PUPDR |= (copy_GPIO_PUPD<<copy_eGPIO_Pin*2);
 8000864:	4b0d      	ldr	r3, [pc, #52]	; (800089c <MGPIO_vSetInputPinPullUpDown+0x178>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	7979      	ldrb	r1, [r7, #5]
 800086a:	79ba      	ldrb	r2, [r7, #6]
 800086c:	0052      	lsls	r2, r2, #1
 800086e:	fa01 f202 	lsl.w	r2, r1, r2
 8000872:	4611      	mov	r1, r2
 8000874:	4a09      	ldr	r2, [pc, #36]	; (800089c <MGPIO_vSetInputPinPullUpDown+0x178>)
 8000876:	430b      	orrs	r3, r1
 8000878:	60d3      	str	r3, [r2, #12]
		break;
 800087a:	bf00      	nop
	}

}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	40020000 	.word	0x40020000
 800088c:	40020400 	.word	0x40020400
 8000890:	40020800 	.word	0x40020800
 8000894:	40020c00 	.word	0x40020c00
 8000898:	40021000 	.word	0x40021000
 800089c:	40021c00 	.word	0x40021c00

080008a0 <MGPIO_vSetOutputPinValue>:
		break;
	}
	return 1;
}
void MGPIO_vSetOutputPinValue(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_ODR_t copy_GPIO_ODR)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
 80008aa:	460b      	mov	r3, r1
 80008ac:	71bb      	strb	r3, [r7, #6]
 80008ae:	4613      	mov	r3, r2
 80008b0:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b05      	cmp	r3, #5
 80008b6:	f200 8093 	bhi.w	80009e0 <MGPIO_vSetOutputPinValue+0x140>
 80008ba:	a201      	add	r2, pc, #4	; (adr r2, 80008c0 <MGPIO_vSetOutputPinValue+0x20>)
 80008bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c0:	080008d9 	.word	0x080008d9
 80008c4:	08000905 	.word	0x08000905
 80008c8:	08000931 	.word	0x08000931
 80008cc:	0800095d 	.word	0x0800095d
 80008d0:	08000989 	.word	0x08000989
 80008d4:	080009b5 	.word	0x080009b5
	{
	case PORTA:
		GPIOA->GPIO_ODR &= ~(0b1<<copy_eGPIO_Pin);
 80008d8:	4b44      	ldr	r3, [pc, #272]	; (80009ec <MGPIO_vSetOutputPinValue+0x14c>)
 80008da:	695b      	ldr	r3, [r3, #20]
 80008dc:	79ba      	ldrb	r2, [r7, #6]
 80008de:	2101      	movs	r1, #1
 80008e0:	fa01 f202 	lsl.w	r2, r1, r2
 80008e4:	43d2      	mvns	r2, r2
 80008e6:	4611      	mov	r1, r2
 80008e8:	4a40      	ldr	r2, [pc, #256]	; (80009ec <MGPIO_vSetOutputPinValue+0x14c>)
 80008ea:	400b      	ands	r3, r1
 80008ec:	6153      	str	r3, [r2, #20]
		GPIOA->GPIO_ODR |= (copy_GPIO_ODR<<copy_eGPIO_Pin);
 80008ee:	4b3f      	ldr	r3, [pc, #252]	; (80009ec <MGPIO_vSetOutputPinValue+0x14c>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	7979      	ldrb	r1, [r7, #5]
 80008f4:	79ba      	ldrb	r2, [r7, #6]
 80008f6:	fa01 f202 	lsl.w	r2, r1, r2
 80008fa:	4611      	mov	r1, r2
 80008fc:	4a3b      	ldr	r2, [pc, #236]	; (80009ec <MGPIO_vSetOutputPinValue+0x14c>)
 80008fe:	430b      	orrs	r3, r1
 8000900:	6153      	str	r3, [r2, #20]
		break;
 8000902:	e06d      	b.n	80009e0 <MGPIO_vSetOutputPinValue+0x140>
	case PORTB:
		GPIOB->GPIO_ODR &= ~(0b1<<copy_eGPIO_Pin);
 8000904:	4b3a      	ldr	r3, [pc, #232]	; (80009f0 <MGPIO_vSetOutputPinValue+0x150>)
 8000906:	695b      	ldr	r3, [r3, #20]
 8000908:	79ba      	ldrb	r2, [r7, #6]
 800090a:	2101      	movs	r1, #1
 800090c:	fa01 f202 	lsl.w	r2, r1, r2
 8000910:	43d2      	mvns	r2, r2
 8000912:	4611      	mov	r1, r2
 8000914:	4a36      	ldr	r2, [pc, #216]	; (80009f0 <MGPIO_vSetOutputPinValue+0x150>)
 8000916:	400b      	ands	r3, r1
 8000918:	6153      	str	r3, [r2, #20]
		GPIOB->GPIO_ODR |= (copy_GPIO_ODR<<copy_eGPIO_Pin);
 800091a:	4b35      	ldr	r3, [pc, #212]	; (80009f0 <MGPIO_vSetOutputPinValue+0x150>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	7979      	ldrb	r1, [r7, #5]
 8000920:	79ba      	ldrb	r2, [r7, #6]
 8000922:	fa01 f202 	lsl.w	r2, r1, r2
 8000926:	4611      	mov	r1, r2
 8000928:	4a31      	ldr	r2, [pc, #196]	; (80009f0 <MGPIO_vSetOutputPinValue+0x150>)
 800092a:	430b      	orrs	r3, r1
 800092c:	6153      	str	r3, [r2, #20]
		break;
 800092e:	e057      	b.n	80009e0 <MGPIO_vSetOutputPinValue+0x140>
	case PORTC:
		GPIOC->GPIO_ODR &= ~(0b1<<copy_eGPIO_Pin);
 8000930:	4b30      	ldr	r3, [pc, #192]	; (80009f4 <MGPIO_vSetOutputPinValue+0x154>)
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	79ba      	ldrb	r2, [r7, #6]
 8000936:	2101      	movs	r1, #1
 8000938:	fa01 f202 	lsl.w	r2, r1, r2
 800093c:	43d2      	mvns	r2, r2
 800093e:	4611      	mov	r1, r2
 8000940:	4a2c      	ldr	r2, [pc, #176]	; (80009f4 <MGPIO_vSetOutputPinValue+0x154>)
 8000942:	400b      	ands	r3, r1
 8000944:	6153      	str	r3, [r2, #20]
		GPIOC->GPIO_ODR |= (copy_GPIO_ODR<<copy_eGPIO_Pin);
 8000946:	4b2b      	ldr	r3, [pc, #172]	; (80009f4 <MGPIO_vSetOutputPinValue+0x154>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	7979      	ldrb	r1, [r7, #5]
 800094c:	79ba      	ldrb	r2, [r7, #6]
 800094e:	fa01 f202 	lsl.w	r2, r1, r2
 8000952:	4611      	mov	r1, r2
 8000954:	4a27      	ldr	r2, [pc, #156]	; (80009f4 <MGPIO_vSetOutputPinValue+0x154>)
 8000956:	430b      	orrs	r3, r1
 8000958:	6153      	str	r3, [r2, #20]
		break;
 800095a:	e041      	b.n	80009e0 <MGPIO_vSetOutputPinValue+0x140>
	case PORTD:
		GPIOD->GPIO_ODR &= ~(0b1<<copy_eGPIO_Pin);
 800095c:	4b26      	ldr	r3, [pc, #152]	; (80009f8 <MGPIO_vSetOutputPinValue+0x158>)
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	79ba      	ldrb	r2, [r7, #6]
 8000962:	2101      	movs	r1, #1
 8000964:	fa01 f202 	lsl.w	r2, r1, r2
 8000968:	43d2      	mvns	r2, r2
 800096a:	4611      	mov	r1, r2
 800096c:	4a22      	ldr	r2, [pc, #136]	; (80009f8 <MGPIO_vSetOutputPinValue+0x158>)
 800096e:	400b      	ands	r3, r1
 8000970:	6153      	str	r3, [r2, #20]
		GPIOD->GPIO_ODR |= (copy_GPIO_ODR<<copy_eGPIO_Pin);
 8000972:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <MGPIO_vSetOutputPinValue+0x158>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	7979      	ldrb	r1, [r7, #5]
 8000978:	79ba      	ldrb	r2, [r7, #6]
 800097a:	fa01 f202 	lsl.w	r2, r1, r2
 800097e:	4611      	mov	r1, r2
 8000980:	4a1d      	ldr	r2, [pc, #116]	; (80009f8 <MGPIO_vSetOutputPinValue+0x158>)
 8000982:	430b      	orrs	r3, r1
 8000984:	6153      	str	r3, [r2, #20]
		break;
 8000986:	e02b      	b.n	80009e0 <MGPIO_vSetOutputPinValue+0x140>
	case PORTE:
		GPIOE->GPIO_ODR &= ~(0b1<<copy_eGPIO_Pin);
 8000988:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <MGPIO_vSetOutputPinValue+0x15c>)
 800098a:	695b      	ldr	r3, [r3, #20]
 800098c:	79ba      	ldrb	r2, [r7, #6]
 800098e:	2101      	movs	r1, #1
 8000990:	fa01 f202 	lsl.w	r2, r1, r2
 8000994:	43d2      	mvns	r2, r2
 8000996:	4611      	mov	r1, r2
 8000998:	4a18      	ldr	r2, [pc, #96]	; (80009fc <MGPIO_vSetOutputPinValue+0x15c>)
 800099a:	400b      	ands	r3, r1
 800099c:	6153      	str	r3, [r2, #20]
		GPIOE->GPIO_ODR |= (copy_GPIO_ODR<<copy_eGPIO_Pin);
 800099e:	4b17      	ldr	r3, [pc, #92]	; (80009fc <MGPIO_vSetOutputPinValue+0x15c>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	7979      	ldrb	r1, [r7, #5]
 80009a4:	79ba      	ldrb	r2, [r7, #6]
 80009a6:	fa01 f202 	lsl.w	r2, r1, r2
 80009aa:	4611      	mov	r1, r2
 80009ac:	4a13      	ldr	r2, [pc, #76]	; (80009fc <MGPIO_vSetOutputPinValue+0x15c>)
 80009ae:	430b      	orrs	r3, r1
 80009b0:	6153      	str	r3, [r2, #20]
		break;
 80009b2:	e015      	b.n	80009e0 <MGPIO_vSetOutputPinValue+0x140>
	case PORTH:
		GPIOH->GPIO_ODR &= ~(0b1<<copy_eGPIO_Pin);
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <MGPIO_vSetOutputPinValue+0x160>)
 80009b6:	695b      	ldr	r3, [r3, #20]
 80009b8:	79ba      	ldrb	r2, [r7, #6]
 80009ba:	2101      	movs	r1, #1
 80009bc:	fa01 f202 	lsl.w	r2, r1, r2
 80009c0:	43d2      	mvns	r2, r2
 80009c2:	4611      	mov	r1, r2
 80009c4:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <MGPIO_vSetOutputPinValue+0x160>)
 80009c6:	400b      	ands	r3, r1
 80009c8:	6153      	str	r3, [r2, #20]
		GPIOH->GPIO_ODR |= (copy_GPIO_ODR<<copy_eGPIO_Pin);
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <MGPIO_vSetOutputPinValue+0x160>)
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	7979      	ldrb	r1, [r7, #5]
 80009d0:	79ba      	ldrb	r2, [r7, #6]
 80009d2:	fa01 f202 	lsl.w	r2, r1, r2
 80009d6:	4611      	mov	r1, r2
 80009d8:	4a09      	ldr	r2, [pc, #36]	; (8000a00 <MGPIO_vSetOutputPinValue+0x160>)
 80009da:	430b      	orrs	r3, r1
 80009dc:	6153      	str	r3, [r2, #20]
		break;
 80009de:	bf00      	nop
	}

}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	40020000 	.word	0x40020000
 80009f0:	40020400 	.word	0x40020400
 80009f4:	40020800 	.word	0x40020800
 80009f8:	40020c00 	.word	0x40020c00
 80009fc:	40021000 	.word	0x40021000
 8000a00:	40021c00 	.word	0x40021c00

08000a04 <MGPIO_vToggleOutputPinValue>:

void MGPIO_vToggleOutputPinValue(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	460a      	mov	r2, r1
 8000a0e:	71fb      	strb	r3, [r7, #7]
 8000a10:	4613      	mov	r3, r2
 8000a12:	71bb      	strb	r3, [r7, #6]
	switch (copy_eGPIO_Port)
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	2b05      	cmp	r3, #5
 8000a18:	d850      	bhi.n	8000abc <MGPIO_vToggleOutputPinValue+0xb8>
 8000a1a:	a201      	add	r2, pc, #4	; (adr r2, 8000a20 <MGPIO_vToggleOutputPinValue+0x1c>)
 8000a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a20:	08000a39 	.word	0x08000a39
 8000a24:	08000a4f 	.word	0x08000a4f
 8000a28:	08000a65 	.word	0x08000a65
 8000a2c:	08000a7b 	.word	0x08000a7b
 8000a30:	08000a91 	.word	0x08000a91
 8000a34:	08000aa7 	.word	0x08000aa7
	{
	case PORTA:
		GPIOA->GPIO_ODR ^= (1<<copy_eGPIO_Pin);
 8000a38:	4b23      	ldr	r3, [pc, #140]	; (8000ac8 <MGPIO_vToggleOutputPinValue+0xc4>)
 8000a3a:	695b      	ldr	r3, [r3, #20]
 8000a3c:	79ba      	ldrb	r2, [r7, #6]
 8000a3e:	2101      	movs	r1, #1
 8000a40:	fa01 f202 	lsl.w	r2, r1, r2
 8000a44:	4611      	mov	r1, r2
 8000a46:	4a20      	ldr	r2, [pc, #128]	; (8000ac8 <MGPIO_vToggleOutputPinValue+0xc4>)
 8000a48:	404b      	eors	r3, r1
 8000a4a:	6153      	str	r3, [r2, #20]
		break;
 8000a4c:	e036      	b.n	8000abc <MGPIO_vToggleOutputPinValue+0xb8>
	case PORTB:
		GPIOB->GPIO_ODR ^= (1<<copy_eGPIO_Pin);
 8000a4e:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <MGPIO_vToggleOutputPinValue+0xc8>)
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	79ba      	ldrb	r2, [r7, #6]
 8000a54:	2101      	movs	r1, #1
 8000a56:	fa01 f202 	lsl.w	r2, r1, r2
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	4a1b      	ldr	r2, [pc, #108]	; (8000acc <MGPIO_vToggleOutputPinValue+0xc8>)
 8000a5e:	404b      	eors	r3, r1
 8000a60:	6153      	str	r3, [r2, #20]
		break;
 8000a62:	e02b      	b.n	8000abc <MGPIO_vToggleOutputPinValue+0xb8>
	case PORTC:
		GPIOC->GPIO_ODR ^= (1<<copy_eGPIO_Pin);
 8000a64:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <MGPIO_vToggleOutputPinValue+0xcc>)
 8000a66:	695b      	ldr	r3, [r3, #20]
 8000a68:	79ba      	ldrb	r2, [r7, #6]
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a70:	4611      	mov	r1, r2
 8000a72:	4a17      	ldr	r2, [pc, #92]	; (8000ad0 <MGPIO_vToggleOutputPinValue+0xcc>)
 8000a74:	404b      	eors	r3, r1
 8000a76:	6153      	str	r3, [r2, #20]
		break;
 8000a78:	e020      	b.n	8000abc <MGPIO_vToggleOutputPinValue+0xb8>
	case PORTD:
		GPIOD->GPIO_ODR ^= (1<<copy_eGPIO_Pin);
 8000a7a:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <MGPIO_vToggleOutputPinValue+0xd0>)
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	79ba      	ldrb	r2, [r7, #6]
 8000a80:	2101      	movs	r1, #1
 8000a82:	fa01 f202 	lsl.w	r2, r1, r2
 8000a86:	4611      	mov	r1, r2
 8000a88:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <MGPIO_vToggleOutputPinValue+0xd0>)
 8000a8a:	404b      	eors	r3, r1
 8000a8c:	6153      	str	r3, [r2, #20]
		break;
 8000a8e:	e015      	b.n	8000abc <MGPIO_vToggleOutputPinValue+0xb8>
	case PORTE:
		GPIOE->GPIO_ODR ^= (1<<copy_eGPIO_Pin);
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <MGPIO_vToggleOutputPinValue+0xd4>)
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	79ba      	ldrb	r2, [r7, #6]
 8000a96:	2101      	movs	r1, #1
 8000a98:	fa01 f202 	lsl.w	r2, r1, r2
 8000a9c:	4611      	mov	r1, r2
 8000a9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <MGPIO_vToggleOutputPinValue+0xd4>)
 8000aa0:	404b      	eors	r3, r1
 8000aa2:	6153      	str	r3, [r2, #20]
		break;
 8000aa4:	e00a      	b.n	8000abc <MGPIO_vToggleOutputPinValue+0xb8>
	case PORTH:
		GPIOH->GPIO_ODR ^= (1<<copy_eGPIO_Pin);
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <MGPIO_vToggleOutputPinValue+0xd8>)
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	79ba      	ldrb	r2, [r7, #6]
 8000aac:	2101      	movs	r1, #1
 8000aae:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	4a09      	ldr	r2, [pc, #36]	; (8000adc <MGPIO_vToggleOutputPinValue+0xd8>)
 8000ab6:	404b      	eors	r3, r1
 8000ab8:	6153      	str	r3, [r2, #20]
		break;
 8000aba:	bf00      	nop
	}

}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	40020000 	.word	0x40020000
 8000acc:	40020400 	.word	0x40020400
 8000ad0:	40020800 	.word	0x40020800
 8000ad4:	40020c00 	.word	0x40020c00
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40021c00 	.word	0x40021c00

08000ae0 <MGPIO_vSetOutputPinValueBSR>:
	}

}

void MGPIO_vSetOutputPinValueBSR(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_BS_t copy_GPIO_BS)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
 8000aea:	460b      	mov	r3, r1
 8000aec:	71bb      	strb	r3, [r7, #6]
 8000aee:	4613      	mov	r3, r2
 8000af0:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	2b05      	cmp	r3, #5
 8000af6:	f200 80ca 	bhi.w	8000c8e <MGPIO_vSetOutputPinValueBSR+0x1ae>
 8000afa:	a201      	add	r2, pc, #4	; (adr r2, 8000b00 <MGPIO_vSetOutputPinValueBSR+0x20>)
 8000afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b00:	08000b19 	.word	0x08000b19
 8000b04:	08000b55 	.word	0x08000b55
 8000b08:	08000b91 	.word	0x08000b91
 8000b0c:	08000bcb 	.word	0x08000bcb
 8000b10:	08000c05 	.word	0x08000c05
 8000b14:	08000c3f 	.word	0x08000c3f
	{
	case PORTA:
		if (copy_GPIO_BS == SET)
 8000b18:	797b      	ldrb	r3, [r7, #5]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d10a      	bne.n	8000b34 <MGPIO_vSetOutputPinValueBSR+0x54>
		{
			GPIOA->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8000b1e:	4b5f      	ldr	r3, [pc, #380]	; (8000c9c <MGPIO_vSetOutputPinValueBSR+0x1bc>)
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	79ba      	ldrb	r2, [r7, #6]
 8000b24:	2101      	movs	r1, #1
 8000b26:	fa01 f202 	lsl.w	r2, r1, r2
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	4a5b      	ldr	r2, [pc, #364]	; (8000c9c <MGPIO_vSetOutputPinValueBSR+0x1bc>)
 8000b2e:	430b      	orrs	r3, r1
 8000b30:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOA->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}
		break;
 8000b32:	e0a1      	b.n	8000c78 <MGPIO_vSetOutputPinValueBSR+0x198>
		else if(copy_GPIO_BS == RESET)
 8000b34:	797b      	ldrb	r3, [r7, #5]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f040 809e 	bne.w	8000c78 <MGPIO_vSetOutputPinValueBSR+0x198>
			GPIOA->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000b3c:	4b57      	ldr	r3, [pc, #348]	; (8000c9c <MGPIO_vSetOutputPinValueBSR+0x1bc>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	79ba      	ldrb	r2, [r7, #6]
 8000b42:	3210      	adds	r2, #16
 8000b44:	2101      	movs	r1, #1
 8000b46:	fa01 f202 	lsl.w	r2, r1, r2
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4a53      	ldr	r2, [pc, #332]	; (8000c9c <MGPIO_vSetOutputPinValueBSR+0x1bc>)
 8000b4e:	430b      	orrs	r3, r1
 8000b50:	6193      	str	r3, [r2, #24]
		break;
 8000b52:	e091      	b.n	8000c78 <MGPIO_vSetOutputPinValueBSR+0x198>
	case PORTB:
		if (copy_GPIO_BS == SET)
 8000b54:	797b      	ldrb	r3, [r7, #5]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d10a      	bne.n	8000b70 <MGPIO_vSetOutputPinValueBSR+0x90>
		{
			GPIOB->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8000b5a:	4b51      	ldr	r3, [pc, #324]	; (8000ca0 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000b5c:	699b      	ldr	r3, [r3, #24]
 8000b5e:	79ba      	ldrb	r2, [r7, #6]
 8000b60:	2101      	movs	r1, #1
 8000b62:	fa01 f202 	lsl.w	r2, r1, r2
 8000b66:	4611      	mov	r1, r2
 8000b68:	4a4d      	ldr	r2, [pc, #308]	; (8000ca0 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000b6a:	430b      	orrs	r3, r1
 8000b6c:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOB->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 8000b6e:	e085      	b.n	8000c7c <MGPIO_vSetOutputPinValueBSR+0x19c>
		else if(copy_GPIO_BS == RESET)
 8000b70:	797b      	ldrb	r3, [r7, #5]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	f040 8082 	bne.w	8000c7c <MGPIO_vSetOutputPinValueBSR+0x19c>
			GPIOB->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000b78:	4b49      	ldr	r3, [pc, #292]	; (8000ca0 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	79ba      	ldrb	r2, [r7, #6]
 8000b7e:	3210      	adds	r2, #16
 8000b80:	2101      	movs	r1, #1
 8000b82:	fa01 f202 	lsl.w	r2, r1, r2
 8000b86:	4611      	mov	r1, r2
 8000b88:	4a45      	ldr	r2, [pc, #276]	; (8000ca0 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000b8a:	430b      	orrs	r3, r1
 8000b8c:	6193      	str	r3, [r2, #24]
		}		break;
 8000b8e:	e075      	b.n	8000c7c <MGPIO_vSetOutputPinValueBSR+0x19c>
	case PORTC:
		if (copy_GPIO_BS == SET)
 8000b90:	797b      	ldrb	r3, [r7, #5]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d10a      	bne.n	8000bac <MGPIO_vSetOutputPinValueBSR+0xcc>
		{
			GPIOB->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8000b96:	4b42      	ldr	r3, [pc, #264]	; (8000ca0 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	79ba      	ldrb	r2, [r7, #6]
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	4a3e      	ldr	r2, [pc, #248]	; (8000ca0 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000ba6:	430b      	orrs	r3, r1
 8000ba8:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOB->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 8000baa:	e069      	b.n	8000c80 <MGPIO_vSetOutputPinValueBSR+0x1a0>
		else if(copy_GPIO_BS == RESET)
 8000bac:	797b      	ldrb	r3, [r7, #5]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d166      	bne.n	8000c80 <MGPIO_vSetOutputPinValueBSR+0x1a0>
			GPIOB->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000bb2:	4b3b      	ldr	r3, [pc, #236]	; (8000ca0 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	79ba      	ldrb	r2, [r7, #6]
 8000bb8:	3210      	adds	r2, #16
 8000bba:	2101      	movs	r1, #1
 8000bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc0:	4611      	mov	r1, r2
 8000bc2:	4a37      	ldr	r2, [pc, #220]	; (8000ca0 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000bc4:	430b      	orrs	r3, r1
 8000bc6:	6193      	str	r3, [r2, #24]
		}		break;
 8000bc8:	e05a      	b.n	8000c80 <MGPIO_vSetOutputPinValueBSR+0x1a0>
	case PORTD:
		if (copy_GPIO_BS == SET)
 8000bca:	797b      	ldrb	r3, [r7, #5]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d10a      	bne.n	8000be6 <MGPIO_vSetOutputPinValueBSR+0x106>
		{
			GPIOD->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8000bd0:	4b34      	ldr	r3, [pc, #208]	; (8000ca4 <MGPIO_vSetOutputPinValueBSR+0x1c4>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	79ba      	ldrb	r2, [r7, #6]
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bdc:	4611      	mov	r1, r2
 8000bde:	4a31      	ldr	r2, [pc, #196]	; (8000ca4 <MGPIO_vSetOutputPinValueBSR+0x1c4>)
 8000be0:	430b      	orrs	r3, r1
 8000be2:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOD->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 8000be4:	e04e      	b.n	8000c84 <MGPIO_vSetOutputPinValueBSR+0x1a4>
		else if(copy_GPIO_BS == RESET)
 8000be6:	797b      	ldrb	r3, [r7, #5]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d14b      	bne.n	8000c84 <MGPIO_vSetOutputPinValueBSR+0x1a4>
			GPIOD->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000bec:	4b2d      	ldr	r3, [pc, #180]	; (8000ca4 <MGPIO_vSetOutputPinValueBSR+0x1c4>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	79ba      	ldrb	r2, [r7, #6]
 8000bf2:	3210      	adds	r2, #16
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	4a29      	ldr	r2, [pc, #164]	; (8000ca4 <MGPIO_vSetOutputPinValueBSR+0x1c4>)
 8000bfe:	430b      	orrs	r3, r1
 8000c00:	6193      	str	r3, [r2, #24]
		}		break;
 8000c02:	e03f      	b.n	8000c84 <MGPIO_vSetOutputPinValueBSR+0x1a4>
	case PORTE:
		if (copy_GPIO_BS == SET)
 8000c04:	797b      	ldrb	r3, [r7, #5]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d10a      	bne.n	8000c20 <MGPIO_vSetOutputPinValueBSR+0x140>
		{
			GPIOE->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8000c0a:	4b27      	ldr	r3, [pc, #156]	; (8000ca8 <MGPIO_vSetOutputPinValueBSR+0x1c8>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	79ba      	ldrb	r2, [r7, #6]
 8000c10:	2101      	movs	r1, #1
 8000c12:	fa01 f202 	lsl.w	r2, r1, r2
 8000c16:	4611      	mov	r1, r2
 8000c18:	4a23      	ldr	r2, [pc, #140]	; (8000ca8 <MGPIO_vSetOutputPinValueBSR+0x1c8>)
 8000c1a:	430b      	orrs	r3, r1
 8000c1c:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOE->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 8000c1e:	e033      	b.n	8000c88 <MGPIO_vSetOutputPinValueBSR+0x1a8>
		else if(copy_GPIO_BS == RESET)
 8000c20:	797b      	ldrb	r3, [r7, #5]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d130      	bne.n	8000c88 <MGPIO_vSetOutputPinValueBSR+0x1a8>
			GPIOE->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000c26:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <MGPIO_vSetOutputPinValueBSR+0x1c8>)
 8000c28:	699b      	ldr	r3, [r3, #24]
 8000c2a:	79ba      	ldrb	r2, [r7, #6]
 8000c2c:	3210      	adds	r2, #16
 8000c2e:	2101      	movs	r1, #1
 8000c30:	fa01 f202 	lsl.w	r2, r1, r2
 8000c34:	4611      	mov	r1, r2
 8000c36:	4a1c      	ldr	r2, [pc, #112]	; (8000ca8 <MGPIO_vSetOutputPinValueBSR+0x1c8>)
 8000c38:	430b      	orrs	r3, r1
 8000c3a:	6193      	str	r3, [r2, #24]
		}		break;
 8000c3c:	e024      	b.n	8000c88 <MGPIO_vSetOutputPinValueBSR+0x1a8>
	case PORTH:
		if (copy_GPIO_BS == SET)
 8000c3e:	797b      	ldrb	r3, [r7, #5]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d10a      	bne.n	8000c5a <MGPIO_vSetOutputPinValueBSR+0x17a>
		{
			GPIOH->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8000c44:	4b19      	ldr	r3, [pc, #100]	; (8000cac <MGPIO_vSetOutputPinValueBSR+0x1cc>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	79ba      	ldrb	r2, [r7, #6]
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c50:	4611      	mov	r1, r2
 8000c52:	4a16      	ldr	r2, [pc, #88]	; (8000cac <MGPIO_vSetOutputPinValueBSR+0x1cc>)
 8000c54:	430b      	orrs	r3, r1
 8000c56:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOH->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 8000c58:	e018      	b.n	8000c8c <MGPIO_vSetOutputPinValueBSR+0x1ac>
		else if(copy_GPIO_BS == RESET)
 8000c5a:	797b      	ldrb	r3, [r7, #5]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d115      	bne.n	8000c8c <MGPIO_vSetOutputPinValueBSR+0x1ac>
			GPIOH->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <MGPIO_vSetOutputPinValueBSR+0x1cc>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	79ba      	ldrb	r2, [r7, #6]
 8000c66:	3210      	adds	r2, #16
 8000c68:	2101      	movs	r1, #1
 8000c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <MGPIO_vSetOutputPinValueBSR+0x1cc>)
 8000c72:	430b      	orrs	r3, r1
 8000c74:	6193      	str	r3, [r2, #24]
		}		break;
 8000c76:	e009      	b.n	8000c8c <MGPIO_vSetOutputPinValueBSR+0x1ac>
		break;
 8000c78:	bf00      	nop
 8000c7a:	e008      	b.n	8000c8e <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 8000c7c:	bf00      	nop
 8000c7e:	e006      	b.n	8000c8e <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 8000c80:	bf00      	nop
 8000c82:	e004      	b.n	8000c8e <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 8000c84:	bf00      	nop
 8000c86:	e002      	b.n	8000c8e <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 8000c88:	bf00      	nop
 8000c8a:	e000      	b.n	8000c8e <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 8000c8c:	bf00      	nop
	}

}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40020000 	.word	0x40020000
 8000ca0:	40020400 	.word	0x40020400
 8000ca4:	40020c00 	.word	0x40020c00
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40021c00 	.word	0x40021c00

08000cb0 <MGPIO_vSetPinLockSTS>:
void MGPIO_vSetPinLockSTS(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_LCK_t copy_GPIO_LCK)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
 8000cba:	460b      	mov	r3, r1
 8000cbc:	71bb      	strb	r3, [r7, #6]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	2b05      	cmp	r3, #5
 8000cc6:	f200 8093 	bhi.w	8000df0 <MGPIO_vSetPinLockSTS+0x140>
 8000cca:	a201      	add	r2, pc, #4	; (adr r2, 8000cd0 <MGPIO_vSetPinLockSTS+0x20>)
 8000ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd0:	08000ce9 	.word	0x08000ce9
 8000cd4:	08000d15 	.word	0x08000d15
 8000cd8:	08000d41 	.word	0x08000d41
 8000cdc:	08000d6d 	.word	0x08000d6d
 8000ce0:	08000d99 	.word	0x08000d99
 8000ce4:	08000dc5 	.word	0x08000dc5
	{
	case PORTA:
		GPIOA->GPIO_LCKR &= ~(0b1<<copy_eGPIO_Pin);
 8000ce8:	4b44      	ldr	r3, [pc, #272]	; (8000dfc <MGPIO_vSetPinLockSTS+0x14c>)
 8000cea:	69db      	ldr	r3, [r3, #28]
 8000cec:	79ba      	ldrb	r2, [r7, #6]
 8000cee:	2101      	movs	r1, #1
 8000cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf4:	43d2      	mvns	r2, r2
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	4a40      	ldr	r2, [pc, #256]	; (8000dfc <MGPIO_vSetPinLockSTS+0x14c>)
 8000cfa:	400b      	ands	r3, r1
 8000cfc:	61d3      	str	r3, [r2, #28]
		GPIOA->GPIO_LCKR |= (copy_GPIO_LCK<<copy_eGPIO_Pin);
 8000cfe:	4b3f      	ldr	r3, [pc, #252]	; (8000dfc <MGPIO_vSetPinLockSTS+0x14c>)
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	7979      	ldrb	r1, [r7, #5]
 8000d04:	79ba      	ldrb	r2, [r7, #6]
 8000d06:	fa01 f202 	lsl.w	r2, r1, r2
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4a3b      	ldr	r2, [pc, #236]	; (8000dfc <MGPIO_vSetPinLockSTS+0x14c>)
 8000d0e:	430b      	orrs	r3, r1
 8000d10:	61d3      	str	r3, [r2, #28]
		break;
 8000d12:	e06d      	b.n	8000df0 <MGPIO_vSetPinLockSTS+0x140>
	case PORTB:
		GPIOB->GPIO_LCKR &= ~(0b1<<copy_eGPIO_Pin);
 8000d14:	4b3a      	ldr	r3, [pc, #232]	; (8000e00 <MGPIO_vSetPinLockSTS+0x150>)
 8000d16:	69db      	ldr	r3, [r3, #28]
 8000d18:	79ba      	ldrb	r2, [r7, #6]
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d20:	43d2      	mvns	r2, r2
 8000d22:	4611      	mov	r1, r2
 8000d24:	4a36      	ldr	r2, [pc, #216]	; (8000e00 <MGPIO_vSetPinLockSTS+0x150>)
 8000d26:	400b      	ands	r3, r1
 8000d28:	61d3      	str	r3, [r2, #28]
		GPIOB->GPIO_LCKR |= (copy_GPIO_LCK<<copy_eGPIO_Pin);
 8000d2a:	4b35      	ldr	r3, [pc, #212]	; (8000e00 <MGPIO_vSetPinLockSTS+0x150>)
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	7979      	ldrb	r1, [r7, #5]
 8000d30:	79ba      	ldrb	r2, [r7, #6]
 8000d32:	fa01 f202 	lsl.w	r2, r1, r2
 8000d36:	4611      	mov	r1, r2
 8000d38:	4a31      	ldr	r2, [pc, #196]	; (8000e00 <MGPIO_vSetPinLockSTS+0x150>)
 8000d3a:	430b      	orrs	r3, r1
 8000d3c:	61d3      	str	r3, [r2, #28]
		break;
 8000d3e:	e057      	b.n	8000df0 <MGPIO_vSetPinLockSTS+0x140>
	case PORTC:
		GPIOC->GPIO_LCKR &= ~(0b1<<copy_eGPIO_Pin);
 8000d40:	4b30      	ldr	r3, [pc, #192]	; (8000e04 <MGPIO_vSetPinLockSTS+0x154>)
 8000d42:	69db      	ldr	r3, [r3, #28]
 8000d44:	79ba      	ldrb	r2, [r7, #6]
 8000d46:	2101      	movs	r1, #1
 8000d48:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4c:	43d2      	mvns	r2, r2
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4a2c      	ldr	r2, [pc, #176]	; (8000e04 <MGPIO_vSetPinLockSTS+0x154>)
 8000d52:	400b      	ands	r3, r1
 8000d54:	61d3      	str	r3, [r2, #28]
		GPIOC->GPIO_LCKR |= (copy_GPIO_LCK<<copy_eGPIO_Pin);
 8000d56:	4b2b      	ldr	r3, [pc, #172]	; (8000e04 <MGPIO_vSetPinLockSTS+0x154>)
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	7979      	ldrb	r1, [r7, #5]
 8000d5c:	79ba      	ldrb	r2, [r7, #6]
 8000d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d62:	4611      	mov	r1, r2
 8000d64:	4a27      	ldr	r2, [pc, #156]	; (8000e04 <MGPIO_vSetPinLockSTS+0x154>)
 8000d66:	430b      	orrs	r3, r1
 8000d68:	61d3      	str	r3, [r2, #28]
		break;
 8000d6a:	e041      	b.n	8000df0 <MGPIO_vSetPinLockSTS+0x140>
	case PORTD:
		GPIOD->GPIO_LCKR &= ~(0b1<<copy_eGPIO_Pin);
 8000d6c:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <MGPIO_vSetPinLockSTS+0x158>)
 8000d6e:	69db      	ldr	r3, [r3, #28]
 8000d70:	79ba      	ldrb	r2, [r7, #6]
 8000d72:	2101      	movs	r1, #1
 8000d74:	fa01 f202 	lsl.w	r2, r1, r2
 8000d78:	43d2      	mvns	r2, r2
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	4a22      	ldr	r2, [pc, #136]	; (8000e08 <MGPIO_vSetPinLockSTS+0x158>)
 8000d7e:	400b      	ands	r3, r1
 8000d80:	61d3      	str	r3, [r2, #28]
		GPIOD->GPIO_LCKR |= (copy_GPIO_LCK<<copy_eGPIO_Pin);
 8000d82:	4b21      	ldr	r3, [pc, #132]	; (8000e08 <MGPIO_vSetPinLockSTS+0x158>)
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	7979      	ldrb	r1, [r7, #5]
 8000d88:	79ba      	ldrb	r2, [r7, #6]
 8000d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4a1d      	ldr	r2, [pc, #116]	; (8000e08 <MGPIO_vSetPinLockSTS+0x158>)
 8000d92:	430b      	orrs	r3, r1
 8000d94:	61d3      	str	r3, [r2, #28]
		break;
 8000d96:	e02b      	b.n	8000df0 <MGPIO_vSetPinLockSTS+0x140>
	case PORTE:
		GPIOE->GPIO_LCKR &= ~(0b1<<copy_eGPIO_Pin);
 8000d98:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <MGPIO_vSetPinLockSTS+0x15c>)
 8000d9a:	69db      	ldr	r3, [r3, #28]
 8000d9c:	79ba      	ldrb	r2, [r7, #6]
 8000d9e:	2101      	movs	r1, #1
 8000da0:	fa01 f202 	lsl.w	r2, r1, r2
 8000da4:	43d2      	mvns	r2, r2
 8000da6:	4611      	mov	r1, r2
 8000da8:	4a18      	ldr	r2, [pc, #96]	; (8000e0c <MGPIO_vSetPinLockSTS+0x15c>)
 8000daa:	400b      	ands	r3, r1
 8000dac:	61d3      	str	r3, [r2, #28]
		GPIOE->GPIO_LCKR |= (copy_GPIO_LCK<<copy_eGPIO_Pin);
 8000dae:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <MGPIO_vSetPinLockSTS+0x15c>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	7979      	ldrb	r1, [r7, #5]
 8000db4:	79ba      	ldrb	r2, [r7, #6]
 8000db6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4a13      	ldr	r2, [pc, #76]	; (8000e0c <MGPIO_vSetPinLockSTS+0x15c>)
 8000dbe:	430b      	orrs	r3, r1
 8000dc0:	61d3      	str	r3, [r2, #28]
		break;
 8000dc2:	e015      	b.n	8000df0 <MGPIO_vSetPinLockSTS+0x140>
	case PORTH:
		GPIOH->GPIO_LCKR &= ~(0b1<<copy_eGPIO_Pin);
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <MGPIO_vSetPinLockSTS+0x160>)
 8000dc6:	69db      	ldr	r3, [r3, #28]
 8000dc8:	79ba      	ldrb	r2, [r7, #6]
 8000dca:	2101      	movs	r1, #1
 8000dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd0:	43d2      	mvns	r2, r2
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4a0e      	ldr	r2, [pc, #56]	; (8000e10 <MGPIO_vSetPinLockSTS+0x160>)
 8000dd6:	400b      	ands	r3, r1
 8000dd8:	61d3      	str	r3, [r2, #28]
		GPIOH->GPIO_LCKR |= (copy_GPIO_LCK<<copy_eGPIO_Pin);
 8000dda:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <MGPIO_vSetPinLockSTS+0x160>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	7979      	ldrb	r1, [r7, #5]
 8000de0:	79ba      	ldrb	r2, [r7, #6]
 8000de2:	fa01 f202 	lsl.w	r2, r1, r2
 8000de6:	4611      	mov	r1, r2
 8000de8:	4a09      	ldr	r2, [pc, #36]	; (8000e10 <MGPIO_vSetPinLockSTS+0x160>)
 8000dea:	430b      	orrs	r3, r1
 8000dec:	61d3      	str	r3, [r2, #28]
		break;
 8000dee:	bf00      	nop
	}

}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	40020000 	.word	0x40020000
 8000e00:	40020400 	.word	0x40020400
 8000e04:	40020800 	.word	0x40020800
 8000e08:	40020c00 	.word	0x40020c00
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40021c00 	.word	0x40021c00

08000e14 <MGPIO_vSetPinAlternativeFunction>:
void MGPIO_vSetPinAlternativeFunction(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_AF_t copy_GPIO_AF)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
 8000e1e:	460b      	mov	r3, r1
 8000e20:	71bb      	strb	r3, [r7, #6]
 8000e22:	4613      	mov	r3, r2
 8000e24:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	2b05      	cmp	r3, #5
 8000e2a:	f200 8117 	bhi.w	800105c <MGPIO_vSetPinAlternativeFunction+0x248>
 8000e2e:	a201      	add	r2, pc, #4	; (adr r2, 8000e34 <MGPIO_vSetPinAlternativeFunction+0x20>)
 8000e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e34:	08000e4d 	.word	0x08000e4d
 8000e38:	08000ea5 	.word	0x08000ea5
 8000e3c:	08000efd 	.word	0x08000efd
 8000e40:	08000f55 	.word	0x08000f55
 8000e44:	08000fad 	.word	0x08000fad
 8000e48:	08001005 	.word	0x08001005
	{
	case PORTA:
		GPIOA->GPIO_AFR[copy_eGPIO_Pin/8] &= ~(0b1111	   <<(copy_eGPIO_Pin %8)*4);
 8000e4c:	4a86      	ldr	r2, [pc, #536]	; (8001068 <MGPIO_vSetPinAlternativeFunction+0x254>)
 8000e4e:	79bb      	ldrb	r3, [r7, #6]
 8000e50:	08db      	lsrs	r3, r3, #3
 8000e52:	b2d8      	uxtb	r0, r3
 8000e54:	4603      	mov	r3, r0
 8000e56:	3308      	adds	r3, #8
 8000e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5c:	79ba      	ldrb	r2, [r7, #6]
 8000e5e:	f002 0207 	and.w	r2, r2, #7
 8000e62:	0092      	lsls	r2, r2, #2
 8000e64:	210f      	movs	r1, #15
 8000e66:	fa01 f202 	lsl.w	r2, r1, r2
 8000e6a:	43d2      	mvns	r2, r2
 8000e6c:	497e      	ldr	r1, [pc, #504]	; (8001068 <MGPIO_vSetPinAlternativeFunction+0x254>)
 8000e6e:	401a      	ands	r2, r3
 8000e70:	f100 0308 	add.w	r3, r0, #8
 8000e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		GPIOA->GPIO_AFR[copy_eGPIO_Pin/8] |= (copy_GPIO_AF <<(copy_eGPIO_Pin %8)*4);
 8000e78:	4a7b      	ldr	r2, [pc, #492]	; (8001068 <MGPIO_vSetPinAlternativeFunction+0x254>)
 8000e7a:	79bb      	ldrb	r3, [r7, #6]
 8000e7c:	08db      	lsrs	r3, r3, #3
 8000e7e:	b2d8      	uxtb	r0, r3
 8000e80:	4603      	mov	r3, r0
 8000e82:	3308      	adds	r3, #8
 8000e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e88:	7979      	ldrb	r1, [r7, #5]
 8000e8a:	79ba      	ldrb	r2, [r7, #6]
 8000e8c:	f002 0207 	and.w	r2, r2, #7
 8000e90:	0092      	lsls	r2, r2, #2
 8000e92:	fa01 f202 	lsl.w	r2, r1, r2
 8000e96:	4974      	ldr	r1, [pc, #464]	; (8001068 <MGPIO_vSetPinAlternativeFunction+0x254>)
 8000e98:	431a      	orrs	r2, r3
 8000e9a:	f100 0308 	add.w	r3, r0, #8
 8000e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		break;
 8000ea2:	e0db      	b.n	800105c <MGPIO_vSetPinAlternativeFunction+0x248>
	case PORTB:
		GPIOB->GPIO_AFR[copy_eGPIO_Pin/8] &= ~(0b1111	   <<(copy_eGPIO_Pin %8)*4);
 8000ea4:	4a71      	ldr	r2, [pc, #452]	; (800106c <MGPIO_vSetPinAlternativeFunction+0x258>)
 8000ea6:	79bb      	ldrb	r3, [r7, #6]
 8000ea8:	08db      	lsrs	r3, r3, #3
 8000eaa:	b2d8      	uxtb	r0, r3
 8000eac:	4603      	mov	r3, r0
 8000eae:	3308      	adds	r3, #8
 8000eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb4:	79ba      	ldrb	r2, [r7, #6]
 8000eb6:	f002 0207 	and.w	r2, r2, #7
 8000eba:	0092      	lsls	r2, r2, #2
 8000ebc:	210f      	movs	r1, #15
 8000ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec2:	43d2      	mvns	r2, r2
 8000ec4:	4969      	ldr	r1, [pc, #420]	; (800106c <MGPIO_vSetPinAlternativeFunction+0x258>)
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	f100 0308 	add.w	r3, r0, #8
 8000ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		GPIOB->GPIO_AFR[copy_eGPIO_Pin/8] |= (copy_GPIO_AF <<(copy_eGPIO_Pin %8)*4);
 8000ed0:	4a66      	ldr	r2, [pc, #408]	; (800106c <MGPIO_vSetPinAlternativeFunction+0x258>)
 8000ed2:	79bb      	ldrb	r3, [r7, #6]
 8000ed4:	08db      	lsrs	r3, r3, #3
 8000ed6:	b2d8      	uxtb	r0, r3
 8000ed8:	4603      	mov	r3, r0
 8000eda:	3308      	adds	r3, #8
 8000edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee0:	7979      	ldrb	r1, [r7, #5]
 8000ee2:	79ba      	ldrb	r2, [r7, #6]
 8000ee4:	f002 0207 	and.w	r2, r2, #7
 8000ee8:	0092      	lsls	r2, r2, #2
 8000eea:	fa01 f202 	lsl.w	r2, r1, r2
 8000eee:	495f      	ldr	r1, [pc, #380]	; (800106c <MGPIO_vSetPinAlternativeFunction+0x258>)
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	f100 0308 	add.w	r3, r0, #8
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8000efa:	e0af      	b.n	800105c <MGPIO_vSetPinAlternativeFunction+0x248>
	case PORTC:
		GPIOC->GPIO_AFR[copy_eGPIO_Pin/8] &= ~(0b1111	   <<(copy_eGPIO_Pin %8)*4);
 8000efc:	4a5c      	ldr	r2, [pc, #368]	; (8001070 <MGPIO_vSetPinAlternativeFunction+0x25c>)
 8000efe:	79bb      	ldrb	r3, [r7, #6]
 8000f00:	08db      	lsrs	r3, r3, #3
 8000f02:	b2d8      	uxtb	r0, r3
 8000f04:	4603      	mov	r3, r0
 8000f06:	3308      	adds	r3, #8
 8000f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0c:	79ba      	ldrb	r2, [r7, #6]
 8000f0e:	f002 0207 	and.w	r2, r2, #7
 8000f12:	0092      	lsls	r2, r2, #2
 8000f14:	210f      	movs	r1, #15
 8000f16:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1a:	43d2      	mvns	r2, r2
 8000f1c:	4954      	ldr	r1, [pc, #336]	; (8001070 <MGPIO_vSetPinAlternativeFunction+0x25c>)
 8000f1e:	401a      	ands	r2, r3
 8000f20:	f100 0308 	add.w	r3, r0, #8
 8000f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		GPIOC->GPIO_AFR[copy_eGPIO_Pin/8] |= (copy_GPIO_AF <<(copy_eGPIO_Pin %8)*4);
 8000f28:	4a51      	ldr	r2, [pc, #324]	; (8001070 <MGPIO_vSetPinAlternativeFunction+0x25c>)
 8000f2a:	79bb      	ldrb	r3, [r7, #6]
 8000f2c:	08db      	lsrs	r3, r3, #3
 8000f2e:	b2d8      	uxtb	r0, r3
 8000f30:	4603      	mov	r3, r0
 8000f32:	3308      	adds	r3, #8
 8000f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f38:	7979      	ldrb	r1, [r7, #5]
 8000f3a:	79ba      	ldrb	r2, [r7, #6]
 8000f3c:	f002 0207 	and.w	r2, r2, #7
 8000f40:	0092      	lsls	r2, r2, #2
 8000f42:	fa01 f202 	lsl.w	r2, r1, r2
 8000f46:	494a      	ldr	r1, [pc, #296]	; (8001070 <MGPIO_vSetPinAlternativeFunction+0x25c>)
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	f100 0308 	add.w	r3, r0, #8
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8000f52:	e083      	b.n	800105c <MGPIO_vSetPinAlternativeFunction+0x248>
	case PORTD:
		GPIOD->GPIO_AFR[copy_eGPIO_Pin/8] &= ~(0b1111	   <<(copy_eGPIO_Pin %8)*4);
 8000f54:	4a47      	ldr	r2, [pc, #284]	; (8001074 <MGPIO_vSetPinAlternativeFunction+0x260>)
 8000f56:	79bb      	ldrb	r3, [r7, #6]
 8000f58:	08db      	lsrs	r3, r3, #3
 8000f5a:	b2d8      	uxtb	r0, r3
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	3308      	adds	r3, #8
 8000f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f64:	79ba      	ldrb	r2, [r7, #6]
 8000f66:	f002 0207 	and.w	r2, r2, #7
 8000f6a:	0092      	lsls	r2, r2, #2
 8000f6c:	210f      	movs	r1, #15
 8000f6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f72:	43d2      	mvns	r2, r2
 8000f74:	493f      	ldr	r1, [pc, #252]	; (8001074 <MGPIO_vSetPinAlternativeFunction+0x260>)
 8000f76:	401a      	ands	r2, r3
 8000f78:	f100 0308 	add.w	r3, r0, #8
 8000f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		GPIOD->GPIO_AFR[copy_eGPIO_Pin/8] |= (copy_GPIO_AF <<(copy_eGPIO_Pin %8)*4);
 8000f80:	4a3c      	ldr	r2, [pc, #240]	; (8001074 <MGPIO_vSetPinAlternativeFunction+0x260>)
 8000f82:	79bb      	ldrb	r3, [r7, #6]
 8000f84:	08db      	lsrs	r3, r3, #3
 8000f86:	b2d8      	uxtb	r0, r3
 8000f88:	4603      	mov	r3, r0
 8000f8a:	3308      	adds	r3, #8
 8000f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f90:	7979      	ldrb	r1, [r7, #5]
 8000f92:	79ba      	ldrb	r2, [r7, #6]
 8000f94:	f002 0207 	and.w	r2, r2, #7
 8000f98:	0092      	lsls	r2, r2, #2
 8000f9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f9e:	4935      	ldr	r1, [pc, #212]	; (8001074 <MGPIO_vSetPinAlternativeFunction+0x260>)
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	f100 0308 	add.w	r3, r0, #8
 8000fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8000faa:	e057      	b.n	800105c <MGPIO_vSetPinAlternativeFunction+0x248>
	case PORTE:
		GPIOE->GPIO_AFR[copy_eGPIO_Pin/8] &= ~(0b1111	   <<(copy_eGPIO_Pin %8)*4);
 8000fac:	4a32      	ldr	r2, [pc, #200]	; (8001078 <MGPIO_vSetPinAlternativeFunction+0x264>)
 8000fae:	79bb      	ldrb	r3, [r7, #6]
 8000fb0:	08db      	lsrs	r3, r3, #3
 8000fb2:	b2d8      	uxtb	r0, r3
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	3308      	adds	r3, #8
 8000fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fbc:	79ba      	ldrb	r2, [r7, #6]
 8000fbe:	f002 0207 	and.w	r2, r2, #7
 8000fc2:	0092      	lsls	r2, r2, #2
 8000fc4:	210f      	movs	r1, #15
 8000fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fca:	43d2      	mvns	r2, r2
 8000fcc:	492a      	ldr	r1, [pc, #168]	; (8001078 <MGPIO_vSetPinAlternativeFunction+0x264>)
 8000fce:	401a      	ands	r2, r3
 8000fd0:	f100 0308 	add.w	r3, r0, #8
 8000fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		GPIOE->GPIO_AFR[copy_eGPIO_Pin/8] |= (copy_GPIO_AF <<(copy_eGPIO_Pin %8)*4);
 8000fd8:	4a27      	ldr	r2, [pc, #156]	; (8001078 <MGPIO_vSetPinAlternativeFunction+0x264>)
 8000fda:	79bb      	ldrb	r3, [r7, #6]
 8000fdc:	08db      	lsrs	r3, r3, #3
 8000fde:	b2d8      	uxtb	r0, r3
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	3308      	adds	r3, #8
 8000fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe8:	7979      	ldrb	r1, [r7, #5]
 8000fea:	79ba      	ldrb	r2, [r7, #6]
 8000fec:	f002 0207 	and.w	r2, r2, #7
 8000ff0:	0092      	lsls	r2, r2, #2
 8000ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff6:	4920      	ldr	r1, [pc, #128]	; (8001078 <MGPIO_vSetPinAlternativeFunction+0x264>)
 8000ff8:	431a      	orrs	r2, r3
 8000ffa:	f100 0308 	add.w	r3, r0, #8
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8001002:	e02b      	b.n	800105c <MGPIO_vSetPinAlternativeFunction+0x248>
	case PORTH:
		GPIOH->GPIO_AFR[copy_eGPIO_Pin/8] &= ~(0b1111	   <<(copy_eGPIO_Pin %8)*4);
 8001004:	4a1d      	ldr	r2, [pc, #116]	; (800107c <MGPIO_vSetPinAlternativeFunction+0x268>)
 8001006:	79bb      	ldrb	r3, [r7, #6]
 8001008:	08db      	lsrs	r3, r3, #3
 800100a:	b2d8      	uxtb	r0, r3
 800100c:	4603      	mov	r3, r0
 800100e:	3308      	adds	r3, #8
 8001010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001014:	79ba      	ldrb	r2, [r7, #6]
 8001016:	f002 0207 	and.w	r2, r2, #7
 800101a:	0092      	lsls	r2, r2, #2
 800101c:	210f      	movs	r1, #15
 800101e:	fa01 f202 	lsl.w	r2, r1, r2
 8001022:	43d2      	mvns	r2, r2
 8001024:	4915      	ldr	r1, [pc, #84]	; (800107c <MGPIO_vSetPinAlternativeFunction+0x268>)
 8001026:	401a      	ands	r2, r3
 8001028:	f100 0308 	add.w	r3, r0, #8
 800102c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		GPIOH->GPIO_AFR[copy_eGPIO_Pin/8] |= (copy_GPIO_AF <<(copy_eGPIO_Pin %8)*4);
 8001030:	4a12      	ldr	r2, [pc, #72]	; (800107c <MGPIO_vSetPinAlternativeFunction+0x268>)
 8001032:	79bb      	ldrb	r3, [r7, #6]
 8001034:	08db      	lsrs	r3, r3, #3
 8001036:	b2d8      	uxtb	r0, r3
 8001038:	4603      	mov	r3, r0
 800103a:	3308      	adds	r3, #8
 800103c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001040:	7979      	ldrb	r1, [r7, #5]
 8001042:	79ba      	ldrb	r2, [r7, #6]
 8001044:	f002 0207 	and.w	r2, r2, #7
 8001048:	0092      	lsls	r2, r2, #2
 800104a:	fa01 f202 	lsl.w	r2, r1, r2
 800104e:	490b      	ldr	r1, [pc, #44]	; (800107c <MGPIO_vSetPinAlternativeFunction+0x268>)
 8001050:	431a      	orrs	r2, r3
 8001052:	f100 0308 	add.w	r3, r0, #8
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 800105a:	bf00      	nop
	}


}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	40020000 	.word	0x40020000
 800106c:	40020400 	.word	0x40020400
 8001070:	40020800 	.word	0x40020800
 8001074:	40020c00 	.word	0x40020c00
 8001078:	40021000 	.word	0x40021000
 800107c:	40021c00 	.word	0x40021c00

08001080 <RCC_AHB1EnableCLK>:
	RCC->RCC_CR&= ~(1<<CSSON);
	RCC->RCC_CR|=(copy_eClock_detector<<CSSON);
}

void RCC_AHB1EnableCLK(PeripheralAHB1_t peripheral)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
	SET_BIT(RCC->RCC_AHB1ENR,peripheral);
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <RCC_AHB1EnableCLK+0x2c>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	79fa      	ldrb	r2, [r7, #7]
 8001090:	2101      	movs	r1, #1
 8001092:	fa01 f202 	lsl.w	r2, r1, r2
 8001096:	4611      	mov	r1, r2
 8001098:	4a04      	ldr	r2, [pc, #16]	; (80010ac <RCC_AHB1EnableCLK+0x2c>)
 800109a:	430b      	orrs	r3, r1
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800

080010b0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80010bc:	f001 fc56 	bl	800296c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80010c0:	4b53      	ldr	r3, [pc, #332]	; (8001210 <pvPortMalloc+0x160>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d101      	bne.n	80010cc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80010c8:	f000 f908 	bl	80012dc <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d012      	beq.n	80010f8 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80010d2:	2208      	movs	r2, #8
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	3308      	adds	r3, #8
 80010de:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	43db      	mvns	r3, r3
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d804      	bhi.n	80010f4 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	4413      	add	r3, r2
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	e001      	b.n	80010f8 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	db70      	blt.n	80011e0 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d06d      	beq.n	80011e0 <pvPortMalloc+0x130>
 8001104:	4b43      	ldr	r3, [pc, #268]	; (8001214 <pvPortMalloc+0x164>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	429a      	cmp	r2, r3
 800110c:	d868      	bhi.n	80011e0 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800110e:	4b42      	ldr	r3, [pc, #264]	; (8001218 <pvPortMalloc+0x168>)
 8001110:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8001112:	4b41      	ldr	r3, [pc, #260]	; (8001218 <pvPortMalloc+0x168>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001118:	e004      	b.n	8001124 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800111e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	429a      	cmp	r2, r3
 800112c:	d903      	bls.n	8001136 <pvPortMalloc+0x86>
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f1      	bne.n	800111a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001136:	4b36      	ldr	r3, [pc, #216]	; (8001210 <pvPortMalloc+0x160>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800113c:	429a      	cmp	r2, r3
 800113e:	d04f      	beq.n	80011e0 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001140:	6a3b      	ldr	r3, [r7, #32]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2208      	movs	r2, #8
 8001146:	4413      	add	r3, r2
 8001148:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	6a3b      	ldr	r3, [r7, #32]
 8001150:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	1ad2      	subs	r2, r2, r3
 800115a:	2308      	movs	r3, #8
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	429a      	cmp	r2, r3
 8001160:	d91f      	bls.n	80011a2 <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4413      	add	r3, r2
 8001168:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	2b00      	cmp	r3, #0
 8001172:	d00a      	beq.n	800118a <pvPortMalloc+0xda>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001178:	f383 8811 	msr	BASEPRI, r3
 800117c:	f3bf 8f6f 	isb	sy
 8001180:	f3bf 8f4f 	dsb	sy
 8001184:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001186:	bf00      	nop
 8001188:	e7fe      	b.n	8001188 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	1ad2      	subs	r2, r2, r3
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800119c:	6978      	ldr	r0, [r7, #20]
 800119e:	f000 f8f9 	bl	8001394 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <pvPortMalloc+0x164>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	4a19      	ldr	r2, [pc, #100]	; (8001214 <pvPortMalloc+0x164>)
 80011ae:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80011b0:	4b18      	ldr	r3, [pc, #96]	; (8001214 <pvPortMalloc+0x164>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b19      	ldr	r3, [pc, #100]	; (800121c <pvPortMalloc+0x16c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d203      	bcs.n	80011c4 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80011bc:	4b15      	ldr	r3, [pc, #84]	; (8001214 <pvPortMalloc+0x164>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a16      	ldr	r2, [pc, #88]	; (800121c <pvPortMalloc+0x16c>)
 80011c2:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80011c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80011cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ce:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80011d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <pvPortMalloc+0x170>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	3301      	adds	r3, #1
 80011dc:	4a10      	ldr	r2, [pc, #64]	; (8001220 <pvPortMalloc+0x170>)
 80011de:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80011e0:	f001 fbd2 	bl	8002988 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00a      	beq.n	8001204 <pvPortMalloc+0x154>
        __asm volatile
 80011ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011f2:	f383 8811 	msr	BASEPRI, r3
 80011f6:	f3bf 8f6f 	isb	sy
 80011fa:	f3bf 8f4f 	dsb	sy
 80011fe:	60fb      	str	r3, [r7, #12]
    }
 8001200:	bf00      	nop
 8001202:	e7fe      	b.n	8001202 <pvPortMalloc+0x152>
    return pvReturn;
 8001204:	69fb      	ldr	r3, [r7, #28]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3728      	adds	r7, #40	; 0x28
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20005088 	.word	0x20005088
 8001214:	2000508c 	.word	0x2000508c
 8001218:	20005080 	.word	0x20005080
 800121c:	20005090 	.word	0x20005090
 8001220:	20005094 	.word	0x20005094

08001224 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d049      	beq.n	80012ca <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001236:	2308      	movs	r3, #8
 8001238:	425b      	negs	r3, r3
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	4413      	add	r3, r2
 800123e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	db0a      	blt.n	8001262 <vPortFree+0x3e>
        __asm volatile
 800124c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001250:	f383 8811 	msr	BASEPRI, r3
 8001254:	f3bf 8f6f 	isb	sy
 8001258:	f3bf 8f4f 	dsb	sy
 800125c:	60fb      	str	r3, [r7, #12]
    }
 800125e:	bf00      	nop
 8001260:	e7fe      	b.n	8001260 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00a      	beq.n	8001280 <vPortFree+0x5c>
        __asm volatile
 800126a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800126e:	f383 8811 	msr	BASEPRI, r3
 8001272:	f3bf 8f6f 	isb	sy
 8001276:	f3bf 8f4f 	dsb	sy
 800127a:	60bb      	str	r3, [r7, #8]
    }
 800127c:	bf00      	nop
 800127e:	e7fe      	b.n	800127e <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	0fdb      	lsrs	r3, r3, #31
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	d01c      	beq.n	80012ca <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d118      	bne.n	80012ca <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80012a4:	f001 fb62 	bl	800296c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <vPortFree+0xb0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4413      	add	r3, r2
 80012b2:	4a08      	ldr	r2, [pc, #32]	; (80012d4 <vPortFree+0xb0>)
 80012b4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80012b6:	6938      	ldr	r0, [r7, #16]
 80012b8:	f000 f86c 	bl	8001394 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <vPortFree+0xb4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	3301      	adds	r3, #1
 80012c2:	4a05      	ldr	r2, [pc, #20]	; (80012d8 <vPortFree+0xb4>)
 80012c4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80012c6:	f001 fb5f 	bl	8002988 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2000508c 	.word	0x2000508c
 80012d8:	20005098 	.word	0x20005098

080012dc <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80012e2:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80012e6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80012e8:	4b25      	ldr	r3, [pc, #148]	; (8001380 <prvHeapInit+0xa4>)
 80012ea:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00c      	beq.n	8001310 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	3307      	adds	r3, #7
 80012fa:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f023 0307 	bic.w	r3, r3, #7
 8001302:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001304:	68ba      	ldr	r2, [r7, #8]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	4a1d      	ldr	r2, [pc, #116]	; (8001380 <prvHeapInit+0xa4>)
 800130c:	4413      	add	r3, r2
 800130e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001314:	4a1b      	ldr	r2, [pc, #108]	; (8001384 <prvHeapInit+0xa8>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800131a:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <prvHeapInit+0xa8>)
 800131c:	2200      	movs	r2, #0
 800131e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	4413      	add	r3, r2
 8001326:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8001328:	2208      	movs	r2, #8
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	1a9b      	subs	r3, r3, r2
 800132e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f023 0307 	bic.w	r3, r3, #7
 8001336:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4a13      	ldr	r2, [pc, #76]	; (8001388 <prvHeapInit+0xac>)
 800133c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800133e:	4b12      	ldr	r3, [pc, #72]	; (8001388 <prvHeapInit+0xac>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2200      	movs	r2, #0
 8001344:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <prvHeapInit+0xac>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	1ad2      	subs	r2, r2, r3
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <prvHeapInit+0xac>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	4a08      	ldr	r2, [pc, #32]	; (800138c <prvHeapInit+0xb0>)
 800136a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	4a07      	ldr	r2, [pc, #28]	; (8001390 <prvHeapInit+0xb4>)
 8001372:	6013      	str	r3, [r2, #0]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	20000080 	.word	0x20000080
 8001384:	20005080 	.word	0x20005080
 8001388:	20005088 	.word	0x20005088
 800138c:	20005090 	.word	0x20005090
 8001390:	2000508c 	.word	0x2000508c

08001394 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800139c:	4b28      	ldr	r3, [pc, #160]	; (8001440 <prvInsertBlockIntoFreeList+0xac>)
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	e002      	b.n	80013a8 <prvInsertBlockIntoFreeList+0x14>
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d8f7      	bhi.n	80013a2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	4413      	add	r3, r2
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d108      	bne.n	80013d6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	441a      	add	r2, r3
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	441a      	add	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d118      	bne.n	800141c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <prvInsertBlockIntoFreeList+0xb0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d00d      	beq.n	8001412 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	441a      	add	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	e008      	b.n	8001424 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <prvInsertBlockIntoFreeList+0xb0>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	e003      	b.n	8001424 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	429a      	cmp	r2, r3
 800142a:	d002      	beq.n	8001432 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001432:	bf00      	nop
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20005080 	.word	0x20005080
 8001444:	20005088 	.word	0x20005088

08001448 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f103 0208 	add.w	r2, r3, #8
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f04f 32ff 	mov.w	r2, #4294967295
 8001460:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f103 0208 	add.w	r2, r3, #8
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f103 0208 	add.w	r2, r3, #8
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80014a2:	b480      	push	{r7}
 80014a4:	b085      	sub	sp, #20
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b8:	d103      	bne.n	80014c2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	e00c      	b.n	80014dc <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3308      	adds	r3, #8
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	e002      	b.n	80014d0 <vListInsert+0x2e>
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d2f6      	bcs.n	80014ca <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	601a      	str	r2, [r3, #0]
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	6892      	ldr	r2, [r2, #8]
 800152a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6852      	ldr	r2, [r2, #4]
 8001534:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	429a      	cmp	r2, r3
 800153e:	d103      	bne.n	8001548 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	1e5a      	subs	r2, r3, #1
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <Task_RED0>:

xSemaphoreHandle rgbSem ;
BaseType_t rgbsemStatus;

void Task_RED0(void* pvParams)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		vTaskDelay(500);
 8001570:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001574:	f001 f974 	bl	8002860 <vTaskDelay>

		rgbsemStatus=xSemaphoreTake(rgbSem,600);
 8001578:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <Task_RED0+0x4c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001580:	4618      	mov	r0, r3
 8001582:	f000 fdb5 	bl	80020f0 <xQueueSemaphoreTake>
 8001586:	4603      	mov	r3, r0
 8001588:	4a0b      	ldr	r2, [pc, #44]	; (80015b8 <Task_RED0+0x50>)
 800158a:	6013      	str	r3, [r2, #0]
		if(rgbsemStatus==pdPASS)
 800158c:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <Task_RED0+0x50>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d1ed      	bne.n	8001570 <Task_RED0+0x8>
		{

			MGPIO_vToggleOutputPinValue(pin_arr[0].PIN_Port,pin_arr[0].PIN_Number);
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <Task_RED0+0x54>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4a08      	ldr	r2, [pc, #32]	; (80015bc <Task_RED0+0x54>)
 800159a:	7852      	ldrb	r2, [r2, #1]
 800159c:	4611      	mov	r1, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fa30 	bl	8000a04 <MGPIO_vToggleOutputPinValue>
			xSemaphoreGive(rgbSem);
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <Task_RED0+0x4c>)
 80015a6:	6818      	ldr	r0, [r3, #0]
 80015a8:	2300      	movs	r3, #0
 80015aa:	2200      	movs	r2, #0
 80015ac:	2100      	movs	r1, #0
 80015ae:	f000 fbc1 	bl	8001d34 <xQueueGenericSend>
		vTaskDelay(500);
 80015b2:	e7dd      	b.n	8001570 <Task_RED0+0x8>
 80015b4:	2000509c 	.word	0x2000509c
 80015b8:	200050a0 	.word	0x200050a0
 80015bc:	20000000 	.word	0x20000000

080015c0 <Task_BLUE1>:
		}

	}
}
void Task_BLUE1(void* pvParams)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		vTaskDelay(1000);
 80015c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015cc:	f001 f948 	bl	8002860 <vTaskDelay>
		rgbsemStatus=xSemaphoreTake(rgbSem,800);
 80015d0:	4b0e      	ldr	r3, [pc, #56]	; (800160c <Task_BLUE1+0x4c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f44f 7148 	mov.w	r1, #800	; 0x320
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 fd89 	bl	80020f0 <xQueueSemaphoreTake>
 80015de:	4603      	mov	r3, r0
 80015e0:	4a0b      	ldr	r2, [pc, #44]	; (8001610 <Task_BLUE1+0x50>)
 80015e2:	6013      	str	r3, [r2, #0]
		if(rgbsemStatus==pdPASS)
 80015e4:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <Task_BLUE1+0x50>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d1ed      	bne.n	80015c8 <Task_BLUE1+0x8>
		{
			MGPIO_vToggleOutputPinValue(pin_arr[1].PIN_Port,pin_arr[1].PIN_Number);
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <Task_BLUE1+0x54>)
 80015ee:	7a5b      	ldrb	r3, [r3, #9]
 80015f0:	4a08      	ldr	r2, [pc, #32]	; (8001614 <Task_BLUE1+0x54>)
 80015f2:	7a92      	ldrb	r2, [r2, #10]
 80015f4:	4611      	mov	r1, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fa04 	bl	8000a04 <MGPIO_vToggleOutputPinValue>

			xSemaphoreGive(rgbSem);
 80015fc:	4b03      	ldr	r3, [pc, #12]	; (800160c <Task_BLUE1+0x4c>)
 80015fe:	6818      	ldr	r0, [r3, #0]
 8001600:	2300      	movs	r3, #0
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	f000 fb95 	bl	8001d34 <xQueueGenericSend>
		vTaskDelay(1000);
 800160a:	e7dd      	b.n	80015c8 <Task_BLUE1+0x8>
 800160c:	2000509c 	.word	0x2000509c
 8001610:	200050a0 	.word	0x200050a0
 8001614:	20000000 	.word	0x20000000

08001618 <Task_LED2>:


	}
}
void Task_LED2(void* pvParams)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		vTaskDelay(1500);
 8001620:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001624:	f001 f91c 	bl	8002860 <vTaskDelay>

		rgbsemStatus=xSemaphoreTake(rgbSem,800);
 8001628:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <Task_LED2+0x4c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001630:	4618      	mov	r0, r3
 8001632:	f000 fd5d 	bl	80020f0 <xQueueSemaphoreTake>
 8001636:	4603      	mov	r3, r0
 8001638:	4a0b      	ldr	r2, [pc, #44]	; (8001668 <Task_LED2+0x50>)
 800163a:	6013      	str	r3, [r2, #0]
		if(rgbsemStatus==pdPASS)
 800163c:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <Task_LED2+0x50>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d1ed      	bne.n	8001620 <Task_LED2+0x8>
		{
			MGPIO_vToggleOutputPinValue(pin_arr[2].PIN_Port,pin_arr[2].PIN_Number);
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <Task_LED2+0x54>)
 8001646:	7c9b      	ldrb	r3, [r3, #18]
 8001648:	4a08      	ldr	r2, [pc, #32]	; (800166c <Task_LED2+0x54>)
 800164a:	7cd2      	ldrb	r2, [r2, #19]
 800164c:	4611      	mov	r1, r2
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff f9d8 	bl	8000a04 <MGPIO_vToggleOutputPinValue>

			xSemaphoreGive(rgbSem);
 8001654:	4b03      	ldr	r3, [pc, #12]	; (8001664 <Task_LED2+0x4c>)
 8001656:	6818      	ldr	r0, [r3, #0]
 8001658:	2300      	movs	r3, #0
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	f000 fb69 	bl	8001d34 <xQueueGenericSend>
		vTaskDelay(1500);
 8001662:	e7dd      	b.n	8001620 <Task_LED2+0x8>
 8001664:	2000509c 	.word	0x2000509c
 8001668:	200050a0 	.word	0x200050a0
 800166c:	20000000 	.word	0x20000000

08001670 <main>:


	}
}
int main(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af02      	add	r7, sp, #8

	vSemaphoreCreateBinary(rgbSem);
 8001676:	2203      	movs	r2, #3
 8001678:	2100      	movs	r1, #0
 800167a:	2001      	movs	r0, #1
 800167c:	f000 faec 	bl	8001c58 <xQueueGenericCreate>
 8001680:	4603      	mov	r3, r0
 8001682:	4a23      	ldr	r2, [pc, #140]	; (8001710 <main+0xa0>)
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	4b22      	ldr	r3, [pc, #136]	; (8001710 <main+0xa0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d006      	beq.n	800169c <main+0x2c>
 800168e:	4b20      	ldr	r3, [pc, #128]	; (8001710 <main+0xa0>)
 8001690:	6818      	ldr	r0, [r3, #0]
 8001692:	2300      	movs	r3, #0
 8001694:	2200      	movs	r2, #0
 8001696:	2100      	movs	r1, #0
 8001698:	f000 fb4c 	bl	8001d34 <xQueueGenericSend>
	MGPIO_Init( &pin_arr[0]);
 800169c:	481d      	ldr	r0, [pc, #116]	; (8001714 <main+0xa4>)
 800169e:	f7fe fdc3 	bl	8000228 <MGPIO_Init>
	MGPIO_Init( &pin_arr[1]);
 80016a2:	481d      	ldr	r0, [pc, #116]	; (8001718 <main+0xa8>)
 80016a4:	f7fe fdc0 	bl	8000228 <MGPIO_Init>
	MGPIO_Init( &pin_arr[2]);
 80016a8:	481c      	ldr	r0, [pc, #112]	; (800171c <main+0xac>)
 80016aa:	f7fe fdbd 	bl	8000228 <MGPIO_Init>
	//	 vTaskDelay(2000);
		 MGPIO_vSetOutputPinValue(pin_arr[0].PIN_Port,pin_arr[0].PIN_Number,OUTPUT_HIGH);
 80016ae:	4b19      	ldr	r3, [pc, #100]	; (8001714 <main+0xa4>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	4a18      	ldr	r2, [pc, #96]	; (8001714 <main+0xa4>)
 80016b4:	7851      	ldrb	r1, [r2, #1]
 80016b6:	2201      	movs	r2, #1
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff f8f1 	bl	80008a0 <MGPIO_vSetOutputPinValue>
		 MGPIO_vSetOutputPinValue(pin_arr[1].PIN_Port,pin_arr[1].PIN_Number,OUTPUT_HIGH);
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <main+0xa4>)
 80016c0:	7a5b      	ldrb	r3, [r3, #9]
 80016c2:	4a14      	ldr	r2, [pc, #80]	; (8001714 <main+0xa4>)
 80016c4:	7a91      	ldrb	r1, [r2, #10]
 80016c6:	2201      	movs	r2, #1
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff f8e9 	bl	80008a0 <MGPIO_vSetOutputPinValue>

	xTaskCreate(Task_RED0,NULL,65,NULL,1,NULL);
 80016ce:	2300      	movs	r3, #0
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	2301      	movs	r3, #1
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2300      	movs	r3, #0
 80016d8:	2241      	movs	r2, #65	; 0x41
 80016da:	2100      	movs	r1, #0
 80016dc:	4810      	ldr	r0, [pc, #64]	; (8001720 <main+0xb0>)
 80016de:	f000 ff61 	bl	80025a4 <xTaskCreate>
	xTaskCreate(Task_BLUE1,NULL,65,NULL,2,NULL);
 80016e2:	2300      	movs	r3, #0
 80016e4:	9301      	str	r3, [sp, #4]
 80016e6:	2302      	movs	r3, #2
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	2300      	movs	r3, #0
 80016ec:	2241      	movs	r2, #65	; 0x41
 80016ee:	2100      	movs	r1, #0
 80016f0:	480c      	ldr	r0, [pc, #48]	; (8001724 <main+0xb4>)
 80016f2:	f000 ff57 	bl	80025a4 <xTaskCreate>
	xTaskCreate(Task_LED2,NULL,65,NULL,3,NULL);
 80016f6:	2300      	movs	r3, #0
 80016f8:	9301      	str	r3, [sp, #4]
 80016fa:	2303      	movs	r3, #3
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	2300      	movs	r3, #0
 8001700:	2241      	movs	r2, #65	; 0x41
 8001702:	2100      	movs	r1, #0
 8001704:	4808      	ldr	r0, [pc, #32]	; (8001728 <main+0xb8>)
 8001706:	f000 ff4d 	bl	80025a4 <xTaskCreate>


	vTaskStartScheduler();
 800170a:	f001 f8dd 	bl	80028c8 <vTaskStartScheduler>


	/* Loop forever */
	for(;;);
 800170e:	e7fe      	b.n	800170e <main+0x9e>
 8001710:	2000509c 	.word	0x2000509c
 8001714:	20000000 	.word	0x20000000
 8001718:	20000009 	.word	0x20000009
 800171c:	20000012 	.word	0x20000012
 8001720:	08001569 	.word	0x08001569
 8001724:	080015c1 	.word	0x080015c1
 8001728:	08001619 	.word	0x08001619

0800172c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	3b04      	subs	r3, #4
 800173c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001744:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	3b04      	subs	r3, #4
 800174a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	f023 0201 	bic.w	r2, r3, #1
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	3b04      	subs	r3, #4
 800175a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800175c:	4a0c      	ldr	r2, [pc, #48]	; (8001790 <pxPortInitialiseStack+0x64>)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	3b14      	subs	r3, #20
 8001766:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	3b04      	subs	r3, #4
 8001772:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f06f 0202 	mvn.w	r2, #2
 800177a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	3b20      	subs	r3, #32
 8001780:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001782:	68fb      	ldr	r3, [r7, #12]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	08001795 	.word	0x08001795

08001794 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800179e:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <prvTaskExitError+0x54>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a6:	d00a      	beq.n	80017be <prvTaskExitError+0x2a>
        __asm volatile
 80017a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ac:	f383 8811 	msr	BASEPRI, r3
 80017b0:	f3bf 8f6f 	isb	sy
 80017b4:	f3bf 8f4f 	dsb	sy
 80017b8:	60fb      	str	r3, [r7, #12]
    }
 80017ba:	bf00      	nop
 80017bc:	e7fe      	b.n	80017bc <prvTaskExitError+0x28>
        __asm volatile
 80017be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017c2:	f383 8811 	msr	BASEPRI, r3
 80017c6:	f3bf 8f6f 	isb	sy
 80017ca:	f3bf 8f4f 	dsb	sy
 80017ce:	60bb      	str	r3, [r7, #8]
    }
 80017d0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80017d2:	bf00      	nop
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0fc      	beq.n	80017d4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80017da:	bf00      	nop
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	2000001c 	.word	0x2000001c
 80017ec:	00000000 	.word	0x00000000

080017f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80017f0:	4b07      	ldr	r3, [pc, #28]	; (8001810 <pxCurrentTCBConst2>)
 80017f2:	6819      	ldr	r1, [r3, #0]
 80017f4:	6808      	ldr	r0, [r1, #0]
 80017f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017fa:	f380 8809 	msr	PSP, r0
 80017fe:	f3bf 8f6f 	isb	sy
 8001802:	f04f 0000 	mov.w	r0, #0
 8001806:	f380 8811 	msr	BASEPRI, r0
 800180a:	4770      	bx	lr
 800180c:	f3af 8000 	nop.w

08001810 <pxCurrentTCBConst2>:
 8001810:	200050ac 	.word	0x200050ac
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001814:	bf00      	nop
 8001816:	bf00      	nop

08001818 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001818:	4808      	ldr	r0, [pc, #32]	; (800183c <prvPortStartFirstTask+0x24>)
 800181a:	6800      	ldr	r0, [r0, #0]
 800181c:	6800      	ldr	r0, [r0, #0]
 800181e:	f380 8808 	msr	MSP, r0
 8001822:	f04f 0000 	mov.w	r0, #0
 8001826:	f380 8814 	msr	CONTROL, r0
 800182a:	b662      	cpsie	i
 800182c:	b661      	cpsie	f
 800182e:	f3bf 8f4f 	dsb	sy
 8001832:	f3bf 8f6f 	isb	sy
 8001836:	df00      	svc	0
 8001838:	bf00      	nop
 800183a:	0000      	.short	0x0000
 800183c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop

08001844 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800184a:	4b46      	ldr	r3, [pc, #280]	; (8001964 <xPortStartScheduler+0x120>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a46      	ldr	r2, [pc, #280]	; (8001968 <xPortStartScheduler+0x124>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d10a      	bne.n	800186a <xPortStartScheduler+0x26>
        __asm volatile
 8001854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001858:	f383 8811 	msr	BASEPRI, r3
 800185c:	f3bf 8f6f 	isb	sy
 8001860:	f3bf 8f4f 	dsb	sy
 8001864:	613b      	str	r3, [r7, #16]
    }
 8001866:	bf00      	nop
 8001868:	e7fe      	b.n	8001868 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800186a:	4b3e      	ldr	r3, [pc, #248]	; (8001964 <xPortStartScheduler+0x120>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a3f      	ldr	r2, [pc, #252]	; (800196c <xPortStartScheduler+0x128>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d10a      	bne.n	800188a <xPortStartScheduler+0x46>
        __asm volatile
 8001874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001878:	f383 8811 	msr	BASEPRI, r3
 800187c:	f3bf 8f6f 	isb	sy
 8001880:	f3bf 8f4f 	dsb	sy
 8001884:	60fb      	str	r3, [r7, #12]
    }
 8001886:	bf00      	nop
 8001888:	e7fe      	b.n	8001888 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800188a:	4b39      	ldr	r3, [pc, #228]	; (8001970 <xPortStartScheduler+0x12c>)
 800188c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	22ff      	movs	r2, #255	; 0xff
 800189a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80018a4:	78fb      	ldrb	r3, [r7, #3]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4b31      	ldr	r3, [pc, #196]	; (8001974 <xPortStartScheduler+0x130>)
 80018b0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80018b2:	4b31      	ldr	r3, [pc, #196]	; (8001978 <xPortStartScheduler+0x134>)
 80018b4:	2207      	movs	r2, #7
 80018b6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80018b8:	e009      	b.n	80018ce <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80018ba:	4b2f      	ldr	r3, [pc, #188]	; (8001978 <xPortStartScheduler+0x134>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	3b01      	subs	r3, #1
 80018c0:	4a2d      	ldr	r2, [pc, #180]	; (8001978 <xPortStartScheduler+0x134>)
 80018c2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80018c4:	78fb      	ldrb	r3, [r7, #3]
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80018ce:	78fb      	ldrb	r3, [r7, #3]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d6:	2b80      	cmp	r3, #128	; 0x80
 80018d8:	d0ef      	beq.n	80018ba <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80018da:	4b27      	ldr	r3, [pc, #156]	; (8001978 <xPortStartScheduler+0x134>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	d00a      	beq.n	80018fc <xPortStartScheduler+0xb8>
        __asm volatile
 80018e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018ea:	f383 8811 	msr	BASEPRI, r3
 80018ee:	f3bf 8f6f 	isb	sy
 80018f2:	f3bf 8f4f 	dsb	sy
 80018f6:	60bb      	str	r3, [r7, #8]
    }
 80018f8:	bf00      	nop
 80018fa:	e7fe      	b.n	80018fa <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80018fc:	4b1e      	ldr	r3, [pc, #120]	; (8001978 <xPortStartScheduler+0x134>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	4a1d      	ldr	r2, [pc, #116]	; (8001978 <xPortStartScheduler+0x134>)
 8001904:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001906:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <xPortStartScheduler+0x134>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800190e:	4a1a      	ldr	r2, [pc, #104]	; (8001978 <xPortStartScheduler+0x134>)
 8001910:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	b2da      	uxtb	r2, r3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800191a:	4b18      	ldr	r3, [pc, #96]	; (800197c <xPortStartScheduler+0x138>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a17      	ldr	r2, [pc, #92]	; (800197c <xPortStartScheduler+0x138>)
 8001920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001924:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <xPortStartScheduler+0x138>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a14      	ldr	r2, [pc, #80]	; (800197c <xPortStartScheduler+0x138>)
 800192c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001930:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001932:	f000 f8db 	bl	8001aec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <xPortStartScheduler+0x13c>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800193c:	f000 f8f0 	bl	8001b20 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001940:	4b10      	ldr	r3, [pc, #64]	; (8001984 <xPortStartScheduler+0x140>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0f      	ldr	r2, [pc, #60]	; (8001984 <xPortStartScheduler+0x140>)
 8001946:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800194a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800194c:	f7ff ff64 	bl	8001818 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001950:	f001 fa3c 	bl	8002dcc <vTaskSwitchContext>
    prvTaskExitError();
 8001954:	f7ff ff1e 	bl	8001794 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	e000ed00 	.word	0xe000ed00
 8001968:	410fc271 	.word	0x410fc271
 800196c:	410fc270 	.word	0x410fc270
 8001970:	e000e400 	.word	0xe000e400
 8001974:	200050a4 	.word	0x200050a4
 8001978:	200050a8 	.word	0x200050a8
 800197c:	e000ed20 	.word	0xe000ed20
 8001980:	2000001c 	.word	0x2000001c
 8001984:	e000ef34 	.word	0xe000ef34

08001988 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
        __asm volatile
 800198e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001992:	f383 8811 	msr	BASEPRI, r3
 8001996:	f3bf 8f6f 	isb	sy
 800199a:	f3bf 8f4f 	dsb	sy
 800199e:	607b      	str	r3, [r7, #4]
    }
 80019a0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80019a2:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <vPortEnterCritical+0x58>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	3301      	adds	r3, #1
 80019a8:	4a0d      	ldr	r2, [pc, #52]	; (80019e0 <vPortEnterCritical+0x58>)
 80019aa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <vPortEnterCritical+0x58>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d10f      	bne.n	80019d4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80019b4:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <vPortEnterCritical+0x5c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00a      	beq.n	80019d4 <vPortEnterCritical+0x4c>
        __asm volatile
 80019be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019c2:	f383 8811 	msr	BASEPRI, r3
 80019c6:	f3bf 8f6f 	isb	sy
 80019ca:	f3bf 8f4f 	dsb	sy
 80019ce:	603b      	str	r3, [r7, #0]
    }
 80019d0:	bf00      	nop
 80019d2:	e7fe      	b.n	80019d2 <vPortEnterCritical+0x4a>
    }
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	2000001c 	.word	0x2000001c
 80019e4:	e000ed04 	.word	0xe000ed04

080019e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <vPortExitCritical+0x50>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10a      	bne.n	8001a0c <vPortExitCritical+0x24>
        __asm volatile
 80019f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019fa:	f383 8811 	msr	BASEPRI, r3
 80019fe:	f3bf 8f6f 	isb	sy
 8001a02:	f3bf 8f4f 	dsb	sy
 8001a06:	607b      	str	r3, [r7, #4]
    }
 8001a08:	bf00      	nop
 8001a0a:	e7fe      	b.n	8001a0a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8001a0c:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <vPortExitCritical+0x50>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	4a09      	ldr	r2, [pc, #36]	; (8001a38 <vPortExitCritical+0x50>)
 8001a14:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001a16:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <vPortExitCritical+0x50>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d105      	bne.n	8001a2a <vPortExitCritical+0x42>
 8001a1e:	2300      	movs	r3, #0
 8001a20:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001a28:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	2000001c 	.word	0x2000001c
 8001a3c:	00000000 	.word	0x00000000

08001a40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001a40:	f3ef 8009 	mrs	r0, PSP
 8001a44:	f3bf 8f6f 	isb	sy
 8001a48:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <pxCurrentTCBConst>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	f01e 0f10 	tst.w	lr, #16
 8001a50:	bf08      	it	eq
 8001a52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001a56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a5a:	6010      	str	r0, [r2, #0]
 8001a5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001a60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001a64:	f380 8811 	msr	BASEPRI, r0
 8001a68:	f3bf 8f4f 	dsb	sy
 8001a6c:	f3bf 8f6f 	isb	sy
 8001a70:	f001 f9ac 	bl	8002dcc <vTaskSwitchContext>
 8001a74:	f04f 0000 	mov.w	r0, #0
 8001a78:	f380 8811 	msr	BASEPRI, r0
 8001a7c:	bc09      	pop	{r0, r3}
 8001a7e:	6819      	ldr	r1, [r3, #0]
 8001a80:	6808      	ldr	r0, [r1, #0]
 8001a82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a86:	f01e 0f10 	tst.w	lr, #16
 8001a8a:	bf08      	it	eq
 8001a8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001a90:	f380 8809 	msr	PSP, r0
 8001a94:	f3bf 8f6f 	isb	sy
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	f3af 8000 	nop.w

08001aa0 <pxCurrentTCBConst>:
 8001aa0:	200050ac 	.word	0x200050ac
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop

08001aa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
        __asm volatile
 8001aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ab2:	f383 8811 	msr	BASEPRI, r3
 8001ab6:	f3bf 8f6f 	isb	sy
 8001aba:	f3bf 8f4f 	dsb	sy
 8001abe:	607b      	str	r3, [r7, #4]
    }
 8001ac0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001ac2:	f001 f86d 	bl	8002ba0 <xTaskIncrementTick>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <SysTick_Handler+0x40>)
 8001ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	f383 8811 	msr	BASEPRI, r3
    }
 8001ade:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	e000ed04 	.word	0xe000ed04

08001aec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001af0:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <vPortSetupTimerInterrupt+0x28>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001af6:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <vPortSetupTimerInterrupt+0x2c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001afc:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <vPortSetupTimerInterrupt+0x30>)
 8001afe:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8001b02:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001b04:	4b03      	ldr	r3, [pc, #12]	; (8001b14 <vPortSetupTimerInterrupt+0x28>)
 8001b06:	2207      	movs	r2, #7
 8001b08:	601a      	str	r2, [r3, #0]
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000e010 	.word	0xe000e010
 8001b18:	e000e018 	.word	0xe000e018
 8001b1c:	e000e014 	.word	0xe000e014

08001b20 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8001b20:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001b30 <vPortEnableVFP+0x10>
 8001b24:	6801      	ldr	r1, [r0, #0]
 8001b26:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001b2a:	6001      	str	r1, [r0, #0]
 8001b2c:	4770      	bx	lr
 8001b2e:	0000      	.short	0x0000
 8001b30:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop

08001b38 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001b42:	2301      	movs	r3, #1
 8001b44:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10a      	bne.n	8001b66 <xQueueGenericReset+0x2e>
        __asm volatile
 8001b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b54:	f383 8811 	msr	BASEPRI, r3
 8001b58:	f3bf 8f6f 	isb	sy
 8001b5c:	f3bf 8f4f 	dsb	sy
 8001b60:	60fb      	str	r3, [r7, #12]
    }
 8001b62:	bf00      	nop
 8001b64:	e7fe      	b.n	8001b64 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d05d      	beq.n	8001c28 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d059      	beq.n	8001c28 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	fba3 2302 	umull	r2, r3, r3, r2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d000      	beq.n	8001b88 <xQueueGenericReset+0x50>
 8001b86:	2101      	movs	r1, #1
 8001b88:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d14c      	bne.n	8001c28 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8001b8e:	f7ff fefb 	bl	8001988 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9a:	6939      	ldr	r1, [r7, #16]
 8001b9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ba2:	441a      	add	r2, r3
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	2200      	movs	r2, #0
 8001bac:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	6939      	ldr	r1, [r7, #16]
 8001bc2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001bc4:	fb01 f303 	mul.w	r3, r1, r3
 8001bc8:	441a      	add	r2, r3
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	22ff      	movs	r2, #255	; 0xff
 8001bd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	22ff      	movs	r2, #255	; 0xff
 8001bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d114      	bne.n	8001c0e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d01a      	beq.n	8001c22 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	3310      	adds	r3, #16
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f001 f9b1 	bl	8002f58 <xTaskRemoveFromEventList>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d012      	beq.n	8001c22 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001bfc:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <xQueueGenericReset+0x11c>)
 8001bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	f3bf 8f4f 	dsb	sy
 8001c08:	f3bf 8f6f 	isb	sy
 8001c0c:	e009      	b.n	8001c22 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	3310      	adds	r3, #16
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fc18 	bl	8001448 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	3324      	adds	r3, #36	; 0x24
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fc13 	bl	8001448 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001c22:	f7ff fee1 	bl	80019e8 <vPortExitCritical>
 8001c26:	e001      	b.n	8001c2c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10a      	bne.n	8001c48 <xQueueGenericReset+0x110>
        __asm volatile
 8001c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c36:	f383 8811 	msr	BASEPRI, r3
 8001c3a:	f3bf 8f6f 	isb	sy
 8001c3e:	f3bf 8f4f 	dsb	sy
 8001c42:	60bb      	str	r3, [r7, #8]
    }
 8001c44:	bf00      	nop
 8001c46:	e7fe      	b.n	8001c46 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001c48:	697b      	ldr	r3, [r7, #20]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	e000ed04 	.word	0xe000ed04

08001c58 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08a      	sub	sp, #40	; 0x28
 8001c5c:	af02      	add	r7, sp, #8
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	4613      	mov	r3, r2
 8001c64:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d02e      	beq.n	8001cce <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001c70:	2100      	movs	r1, #0
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	fba3 2302 	umull	r2, r3, r3, r2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d000      	beq.n	8001c80 <xQueueGenericCreate+0x28>
 8001c7e:	2101      	movs	r1, #1
 8001c80:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d123      	bne.n	8001cce <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001c8e:	f113 0f49 	cmn.w	r3, #73	; 0x49
 8001c92:	d81c      	bhi.n	8001cce <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	fb02 f303 	mul.w	r3, r2, r3
 8001c9c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	3348      	adds	r3, #72	; 0x48
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fa04 	bl	80010b0 <pvPortMalloc>
 8001ca8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d01c      	beq.n	8001cea <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	3348      	adds	r3, #72	; 0x48
 8001cb8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001cba:	79fa      	ldrb	r2, [r7, #7]
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f000 f814 	bl	8001cf4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001ccc:	e00d      	b.n	8001cea <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10a      	bne.n	8001cea <xQueueGenericCreate+0x92>
        __asm volatile
 8001cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cd8:	f383 8811 	msr	BASEPRI, r3
 8001cdc:	f3bf 8f6f 	isb	sy
 8001ce0:	f3bf 8f4f 	dsb	sy
 8001ce4:	613b      	str	r3, [r7, #16]
    }
 8001ce6:	bf00      	nop
 8001ce8:	e7fe      	b.n	8001ce8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001cea:	69fb      	ldr	r3, [r7, #28]
    }
 8001cec:	4618      	mov	r0, r3
 8001cee:	3720      	adds	r7, #32
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
 8001d00:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d103      	bne.n	8001d10 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	e002      	b.n	8001d16 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001d22:	2101      	movs	r1, #1
 8001d24:	69b8      	ldr	r0, [r7, #24]
 8001d26:	f7ff ff07 	bl	8001b38 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001d2a:	bf00      	nop
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08e      	sub	sp, #56	; 0x38
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
 8001d40:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001d42:	2300      	movs	r3, #0
 8001d44:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8001d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10a      	bne.n	8001d66 <xQueueGenericSend+0x32>
        __asm volatile
 8001d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d54:	f383 8811 	msr	BASEPRI, r3
 8001d58:	f3bf 8f6f 	isb	sy
 8001d5c:	f3bf 8f4f 	dsb	sy
 8001d60:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001d62:	bf00      	nop
 8001d64:	e7fe      	b.n	8001d64 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d103      	bne.n	8001d74 <xQueueGenericSend+0x40>
 8001d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <xQueueGenericSend+0x44>
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <xQueueGenericSend+0x46>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10a      	bne.n	8001d94 <xQueueGenericSend+0x60>
        __asm volatile
 8001d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d82:	f383 8811 	msr	BASEPRI, r3
 8001d86:	f3bf 8f6f 	isb	sy
 8001d8a:	f3bf 8f4f 	dsb	sy
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001d90:	bf00      	nop
 8001d92:	e7fe      	b.n	8001d92 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d103      	bne.n	8001da2 <xQueueGenericSend+0x6e>
 8001d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d101      	bne.n	8001da6 <xQueueGenericSend+0x72>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e000      	b.n	8001da8 <xQueueGenericSend+0x74>
 8001da6:	2300      	movs	r3, #0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d10a      	bne.n	8001dc2 <xQueueGenericSend+0x8e>
        __asm volatile
 8001dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db0:	f383 8811 	msr	BASEPRI, r3
 8001db4:	f3bf 8f6f 	isb	sy
 8001db8:	f3bf 8f4f 	dsb	sy
 8001dbc:	623b      	str	r3, [r7, #32]
    }
 8001dbe:	bf00      	nop
 8001dc0:	e7fe      	b.n	8001dc0 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001dc2:	f001 fa91 	bl	80032e8 <xTaskGetSchedulerState>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d102      	bne.n	8001dd2 <xQueueGenericSend+0x9e>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <xQueueGenericSend+0xa2>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <xQueueGenericSend+0xa4>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10a      	bne.n	8001df2 <xQueueGenericSend+0xbe>
        __asm volatile
 8001ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de0:	f383 8811 	msr	BASEPRI, r3
 8001de4:	f3bf 8f6f 	isb	sy
 8001de8:	f3bf 8f4f 	dsb	sy
 8001dec:	61fb      	str	r3, [r7, #28]
    }
 8001dee:	bf00      	nop
 8001df0:	e7fe      	b.n	8001df0 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001df2:	f7ff fdc9 	bl	8001988 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d302      	bcc.n	8001e08 <xQueueGenericSend+0xd4>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d129      	bne.n	8001e5c <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	68b9      	ldr	r1, [r7, #8]
 8001e0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e0e:	f000 fa85 	bl	800231c <prvCopyDataToQueue>
 8001e12:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d010      	beq.n	8001e3e <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e1e:	3324      	adds	r3, #36	; 0x24
 8001e20:	4618      	mov	r0, r3
 8001e22:	f001 f899 	bl	8002f58 <xTaskRemoveFromEventList>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d013      	beq.n	8001e54 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001e2c:	4b3f      	ldr	r3, [pc, #252]	; (8001f2c <xQueueGenericSend+0x1f8>)
 8001e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	f3bf 8f4f 	dsb	sy
 8001e38:	f3bf 8f6f 	isb	sy
 8001e3c:	e00a      	b.n	8001e54 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8001e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d007      	beq.n	8001e54 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8001e44:	4b39      	ldr	r3, [pc, #228]	; (8001f2c <xQueueGenericSend+0x1f8>)
 8001e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	f3bf 8f4f 	dsb	sy
 8001e50:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001e54:	f7ff fdc8 	bl	80019e8 <vPortExitCritical>
                return pdPASS;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e063      	b.n	8001f24 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d103      	bne.n	8001e6a <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001e62:	f7ff fdc1 	bl	80019e8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	e05c      	b.n	8001f24 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d106      	bne.n	8001e7e <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4618      	mov	r0, r3
 8001e76:	f001 f945 	bl	8003104 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001e7e:	f7ff fdb3 	bl	80019e8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001e82:	f000 fd73 	bl	800296c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001e86:	f7ff fd7f 	bl	8001988 <vPortEnterCritical>
 8001e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e90:	b25b      	sxtb	r3, r3
 8001e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e96:	d103      	bne.n	8001ea0 <xQueueGenericSend+0x16c>
 8001e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ea6:	b25b      	sxtb	r3, r3
 8001ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eac:	d103      	bne.n	8001eb6 <xQueueGenericSend+0x182>
 8001eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001eb6:	f7ff fd97 	bl	80019e8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001eba:	1d3a      	adds	r2, r7, #4
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f001 f934 	bl	8003130 <xTaskCheckForTimeOut>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d124      	bne.n	8001f18 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001ece:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ed0:	f000 fb1c 	bl	800250c <prvIsQueueFull>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d018      	beq.n	8001f0c <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001edc:	3310      	adds	r3, #16
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 ffce 	bl	8002e84 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001ee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001eea:	f000 faa7 	bl	800243c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001eee:	f000 fd4b 	bl	8002988 <xTaskResumeAll>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f47f af7c 	bne.w	8001df2 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8001efa:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <xQueueGenericSend+0x1f8>)
 8001efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	f3bf 8f4f 	dsb	sy
 8001f06:	f3bf 8f6f 	isb	sy
 8001f0a:	e772      	b.n	8001df2 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f0e:	f000 fa95 	bl	800243c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001f12:	f000 fd39 	bl	8002988 <xTaskResumeAll>
 8001f16:	e76c      	b.n	8001df2 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001f18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f1a:	f000 fa8f 	bl	800243c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001f1e:	f000 fd33 	bl	8002988 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8001f22:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3738      	adds	r7, #56	; 0x38
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	e000ed04 	.word	0xe000ed04

08001f30 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08c      	sub	sp, #48	; 0x30
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10a      	bne.n	8001f60 <xQueueReceive+0x30>
        __asm volatile
 8001f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f4e:	f383 8811 	msr	BASEPRI, r3
 8001f52:	f3bf 8f6f 	isb	sy
 8001f56:	f3bf 8f4f 	dsb	sy
 8001f5a:	623b      	str	r3, [r7, #32]
    }
 8001f5c:	bf00      	nop
 8001f5e:	e7fe      	b.n	8001f5e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d103      	bne.n	8001f6e <xQueueReceive+0x3e>
 8001f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <xQueueReceive+0x42>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <xQueueReceive+0x44>
 8001f72:	2300      	movs	r3, #0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10a      	bne.n	8001f8e <xQueueReceive+0x5e>
        __asm volatile
 8001f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f7c:	f383 8811 	msr	BASEPRI, r3
 8001f80:	f3bf 8f6f 	isb	sy
 8001f84:	f3bf 8f4f 	dsb	sy
 8001f88:	61fb      	str	r3, [r7, #28]
    }
 8001f8a:	bf00      	nop
 8001f8c:	e7fe      	b.n	8001f8c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001f8e:	f001 f9ab 	bl	80032e8 <xTaskGetSchedulerState>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d102      	bne.n	8001f9e <xQueueReceive+0x6e>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <xQueueReceive+0x72>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <xQueueReceive+0x74>
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10a      	bne.n	8001fbe <xQueueReceive+0x8e>
        __asm volatile
 8001fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fac:	f383 8811 	msr	BASEPRI, r3
 8001fb0:	f3bf 8f6f 	isb	sy
 8001fb4:	f3bf 8f4f 	dsb	sy
 8001fb8:	61bb      	str	r3, [r7, #24]
    }
 8001fba:	bf00      	nop
 8001fbc:	e7fe      	b.n	8001fbc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001fbe:	f7ff fce3 	bl	8001988 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d01f      	beq.n	800200e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001fce:	68b9      	ldr	r1, [r7, #8]
 8001fd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fd2:	f000 fa0d 	bl	80023f0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	1e5a      	subs	r2, r3, #1
 8001fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fdc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00f      	beq.n	8002006 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe8:	3310      	adds	r3, #16
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 ffb4 	bl	8002f58 <xTaskRemoveFromEventList>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d007      	beq.n	8002006 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001ff6:	4b3d      	ldr	r3, [pc, #244]	; (80020ec <xQueueReceive+0x1bc>)
 8001ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	f3bf 8f4f 	dsb	sy
 8002002:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002006:	f7ff fcef 	bl	80019e8 <vPortExitCritical>
                return pdPASS;
 800200a:	2301      	movs	r3, #1
 800200c:	e069      	b.n	80020e2 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d103      	bne.n	800201c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002014:	f7ff fce8 	bl	80019e8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002018:	2300      	movs	r3, #0
 800201a:	e062      	b.n	80020e2 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 800201c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800201e:	2b00      	cmp	r3, #0
 8002020:	d106      	bne.n	8002030 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002022:	f107 0310 	add.w	r3, r7, #16
 8002026:	4618      	mov	r0, r3
 8002028:	f001 f86c 	bl	8003104 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800202c:	2301      	movs	r3, #1
 800202e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002030:	f7ff fcda 	bl	80019e8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002034:	f000 fc9a 	bl	800296c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002038:	f7ff fca6 	bl	8001988 <vPortEnterCritical>
 800203c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002042:	b25b      	sxtb	r3, r3
 8002044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002048:	d103      	bne.n	8002052 <xQueueReceive+0x122>
 800204a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002054:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002058:	b25b      	sxtb	r3, r3
 800205a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205e:	d103      	bne.n	8002068 <xQueueReceive+0x138>
 8002060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002068:	f7ff fcbe 	bl	80019e8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800206c:	1d3a      	adds	r2, r7, #4
 800206e:	f107 0310 	add.w	r3, r7, #16
 8002072:	4611      	mov	r1, r2
 8002074:	4618      	mov	r0, r3
 8002076:	f001 f85b 	bl	8003130 <xTaskCheckForTimeOut>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d123      	bne.n	80020c8 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002080:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002082:	f000 fa2d 	bl	80024e0 <prvIsQueueEmpty>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d017      	beq.n	80020bc <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800208c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208e:	3324      	adds	r3, #36	; 0x24
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	4611      	mov	r1, r2
 8002094:	4618      	mov	r0, r3
 8002096:	f000 fef5 	bl	8002e84 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800209a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800209c:	f000 f9ce 	bl	800243c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80020a0:	f000 fc72 	bl	8002988 <xTaskResumeAll>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d189      	bne.n	8001fbe <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <xQueueReceive+0x1bc>)
 80020ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	f3bf 8f4f 	dsb	sy
 80020b6:	f3bf 8f6f 	isb	sy
 80020ba:	e780      	b.n	8001fbe <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80020bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020be:	f000 f9bd 	bl	800243c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80020c2:	f000 fc61 	bl	8002988 <xTaskResumeAll>
 80020c6:	e77a      	b.n	8001fbe <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80020c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020ca:	f000 f9b7 	bl	800243c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80020ce:	f000 fc5b 	bl	8002988 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80020d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020d4:	f000 fa04 	bl	80024e0 <prvIsQueueEmpty>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f43f af6f 	beq.w	8001fbe <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80020e0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3730      	adds	r7, #48	; 0x30
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	e000ed04 	.word	0xe000ed04

080020f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08c      	sub	sp, #48	; 0x30
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8002102:	2300      	movs	r3, #0
 8002104:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10a      	bne.n	8002122 <xQueueSemaphoreTake+0x32>
        __asm volatile
 800210c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002110:	f383 8811 	msr	BASEPRI, r3
 8002114:	f3bf 8f6f 	isb	sy
 8002118:	f3bf 8f4f 	dsb	sy
 800211c:	61bb      	str	r3, [r7, #24]
    }
 800211e:	bf00      	nop
 8002120:	e7fe      	b.n	8002120 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00a      	beq.n	8002140 <xQueueSemaphoreTake+0x50>
        __asm volatile
 800212a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800212e:	f383 8811 	msr	BASEPRI, r3
 8002132:	f3bf 8f6f 	isb	sy
 8002136:	f3bf 8f4f 	dsb	sy
 800213a:	617b      	str	r3, [r7, #20]
    }
 800213c:	bf00      	nop
 800213e:	e7fe      	b.n	800213e <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002140:	f001 f8d2 	bl	80032e8 <xTaskGetSchedulerState>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d102      	bne.n	8002150 <xQueueSemaphoreTake+0x60>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <xQueueSemaphoreTake+0x64>
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <xQueueSemaphoreTake+0x66>
 8002154:	2300      	movs	r3, #0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10a      	bne.n	8002170 <xQueueSemaphoreTake+0x80>
        __asm volatile
 800215a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800215e:	f383 8811 	msr	BASEPRI, r3
 8002162:	f3bf 8f6f 	isb	sy
 8002166:	f3bf 8f4f 	dsb	sy
 800216a:	613b      	str	r3, [r7, #16]
    }
 800216c:	bf00      	nop
 800216e:	e7fe      	b.n	800216e <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002170:	f7ff fc0a 	bl	8001988 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002178:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800217a:	6a3b      	ldr	r3, [r7, #32]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d024      	beq.n	80021ca <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002180:	6a3b      	ldr	r3, [r7, #32]
 8002182:	1e5a      	subs	r2, r3, #1
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d104      	bne.n	800219a <xQueueSemaphoreTake+0xaa>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002190:	f001 fac2 	bl	8003718 <pvTaskIncrementMutexHeldCount>
 8002194:	4602      	mov	r2, r0
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00f      	beq.n	80021c2 <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	3310      	adds	r3, #16
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 fed6 	bl	8002f58 <xTaskRemoveFromEventList>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d007      	beq.n	80021c2 <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80021b2:	4b4d      	ldr	r3, [pc, #308]	; (80022e8 <xQueueSemaphoreTake+0x1f8>)
 80021b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	f3bf 8f4f 	dsb	sy
 80021be:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80021c2:	f7ff fc11 	bl	80019e8 <vPortExitCritical>
                return pdPASS;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e089      	b.n	80022de <xQueueSemaphoreTake+0x1ee>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d103      	bne.n	80021d8 <xQueueSemaphoreTake+0xe8>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80021d0:	f7ff fc0a 	bl	80019e8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80021d4:	2300      	movs	r3, #0
 80021d6:	e082      	b.n	80022de <xQueueSemaphoreTake+0x1ee>
                }
                else if( xEntryTimeSet == pdFALSE )
 80021d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d106      	bne.n	80021ec <xQueueSemaphoreTake+0xfc>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80021de:	f107 0308 	add.w	r3, r7, #8
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 ff8e 	bl	8003104 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80021e8:	2301      	movs	r3, #1
 80021ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80021ec:	f7ff fbfc 	bl	80019e8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80021f0:	f000 fbbc 	bl	800296c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80021f4:	f7ff fbc8 	bl	8001988 <vPortEnterCritical>
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021fe:	b25b      	sxtb	r3, r3
 8002200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002204:	d103      	bne.n	800220e <xQueueSemaphoreTake+0x11e>
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002214:	b25b      	sxtb	r3, r3
 8002216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221a:	d103      	bne.n	8002224 <xQueueSemaphoreTake+0x134>
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002224:	f7ff fbe0 	bl	80019e8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002228:	463a      	mov	r2, r7
 800222a:	f107 0308 	add.w	r3, r7, #8
 800222e:	4611      	mov	r1, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f000 ff7d 	bl	8003130 <xTaskCheckForTimeOut>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d132      	bne.n	80022a2 <xQueueSemaphoreTake+0x1b2>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800223c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800223e:	f000 f94f 	bl	80024e0 <prvIsQueueEmpty>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d026      	beq.n	8002296 <xQueueSemaphoreTake+0x1a6>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d109      	bne.n	8002264 <xQueueSemaphoreTake+0x174>
                    {
                        taskENTER_CRITICAL();
 8002250:	f7ff fb9a 	bl	8001988 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	4618      	mov	r0, r3
 800225a:	f001 f863 	bl	8003324 <xTaskPriorityInherit>
 800225e:	62b8      	str	r0, [r7, #40]	; 0x28
                        }
                        taskEXIT_CRITICAL();
 8002260:	f7ff fbc2 	bl	80019e8 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	3324      	adds	r3, #36	; 0x24
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f000 fe09 	bl	8002e84 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002272:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002274:	f000 f8e2 	bl	800243c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002278:	f000 fb86 	bl	8002988 <xTaskResumeAll>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	f47f af76 	bne.w	8002170 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8002284:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <xQueueSemaphoreTake+0x1f8>)
 8002286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	f3bf 8f4f 	dsb	sy
 8002290:	f3bf 8f6f 	isb	sy
 8002294:	e76c      	b.n	8002170 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8002296:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002298:	f000 f8d0 	bl	800243c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800229c:	f000 fb74 	bl	8002988 <xTaskResumeAll>
 80022a0:	e766      	b.n	8002170 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80022a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022a4:	f000 f8ca 	bl	800243c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80022a8:	f000 fb6e 	bl	8002988 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80022ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022ae:	f000 f917 	bl	80024e0 <prvIsQueueEmpty>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f43f af5b 	beq.w	8002170 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 80022ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00d      	beq.n	80022dc <xQueueSemaphoreTake+0x1ec>
                    {
                        taskENTER_CRITICAL();
 80022c0:	f7ff fb62 	bl	8001988 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80022c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022c6:	f000 f811 	bl	80022ec <prvGetDisinheritPriorityAfterTimeout>
 80022ca:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	69f9      	ldr	r1, [r7, #28]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f001 f968 	bl	80035a8 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 80022d8:	f7ff fb86 	bl	80019e8 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80022dc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3730      	adds	r7, #48	; 0x30
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	e000ed04 	.word	0xe000ed04

080022ec <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d006      	beq.n	800230a <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f1c3 0305 	rsb	r3, r3, #5
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	e001      	b.n	800230e <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800230e:	68fb      	ldr	r3, [r7, #12]
    }
 8002310:	4618      	mov	r0, r3
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002330:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10d      	bne.n	8002356 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d14d      	bne.n	80023de <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	4618      	mov	r0, r3
 8002348:	f001 f88a 	bl	8003460 <xTaskPriorityDisinherit>
 800234c:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	e043      	b.n	80023de <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d119      	bne.n	8002390 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6858      	ldr	r0, [r3, #4]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	461a      	mov	r2, r3
 8002366:	68b9      	ldr	r1, [r7, #8]
 8002368:	f001 fd04 	bl	8003d74 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	441a      	add	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	429a      	cmp	r2, r3
 8002384:	d32b      	bcc.n	80023de <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	e026      	b.n	80023de <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	68d8      	ldr	r0, [r3, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	461a      	mov	r2, r3
 800239a:	68b9      	ldr	r1, [r7, #8]
 800239c:	f001 fcea 	bl	8003d74 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	425b      	negs	r3, r3
 80023aa:	441a      	add	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d207      	bcs.n	80023cc <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	425b      	negs	r3, r3
 80023c6:	441a      	add	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d105      	bne.n	80023de <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d002      	beq.n	80023de <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	3b01      	subs	r3, #1
 80023dc:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80023e6:	697b      	ldr	r3, [r7, #20]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d018      	beq.n	8002434 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	441a      	add	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	429a      	cmp	r2, r3
 800241a:	d303      	bcc.n	8002424 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68d9      	ldr	r1, [r3, #12]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	461a      	mov	r2, r3
 800242e:	6838      	ldr	r0, [r7, #0]
 8002430:	f001 fca0 	bl	8003d74 <memcpy>
    }
}
 8002434:	bf00      	nop
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002444:	f7ff faa0 	bl	8001988 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800244e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002450:	e011      	b.n	8002476 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	2b00      	cmp	r3, #0
 8002458:	d012      	beq.n	8002480 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3324      	adds	r3, #36	; 0x24
 800245e:	4618      	mov	r0, r3
 8002460:	f000 fd7a 	bl	8002f58 <xTaskRemoveFromEventList>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800246a:	f000 febf 	bl	80031ec <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	3b01      	subs	r3, #1
 8002472:	b2db      	uxtb	r3, r3
 8002474:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800247a:	2b00      	cmp	r3, #0
 800247c:	dce9      	bgt.n	8002452 <prvUnlockQueue+0x16>
 800247e:	e000      	b.n	8002482 <prvUnlockQueue+0x46>
                    break;
 8002480:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	22ff      	movs	r2, #255	; 0xff
 8002486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800248a:	f7ff faad 	bl	80019e8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800248e:	f7ff fa7b 	bl	8001988 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002498:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800249a:	e011      	b.n	80024c0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d012      	beq.n	80024ca <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3310      	adds	r3, #16
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 fd55 	bl	8002f58 <xTaskRemoveFromEventList>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80024b4:	f000 fe9a 	bl	80031ec <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80024b8:	7bbb      	ldrb	r3, [r7, #14]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80024c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	dce9      	bgt.n	800249c <prvUnlockQueue+0x60>
 80024c8:	e000      	b.n	80024cc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80024ca:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	22ff      	movs	r2, #255	; 0xff
 80024d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80024d4:	f7ff fa88 	bl	80019e8 <vPortExitCritical>
}
 80024d8:	bf00      	nop
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80024e8:	f7ff fa4e 	bl	8001988 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d102      	bne.n	80024fa <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80024f4:	2301      	movs	r3, #1
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	e001      	b.n	80024fe <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80024fe:	f7ff fa73 	bl	80019e8 <vPortExitCritical>

    return xReturn;
 8002502:	68fb      	ldr	r3, [r7, #12]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002514:	f7ff fa38 	bl	8001988 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002520:	429a      	cmp	r2, r3
 8002522:	d102      	bne.n	800252a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002524:	2301      	movs	r3, #1
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	e001      	b.n	800252e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800252e:	f7ff fa5b 	bl	80019e8 <vPortExitCritical>

    return xReturn;
 8002532:	68fb      	ldr	r3, [r7, #12]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800254c:	f7ff fa1c 	bl	8001988 <vPortEnterCritical>
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002556:	b25b      	sxtb	r3, r3
 8002558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255c:	d103      	bne.n	8002566 <vQueueWaitForMessageRestricted+0x2a>
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800256c:	b25b      	sxtb	r3, r3
 800256e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002572:	d103      	bne.n	800257c <vQueueWaitForMessageRestricted+0x40>
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800257c:	f7ff fa34 	bl	80019e8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002584:	2b00      	cmp	r3, #0
 8002586:	d106      	bne.n	8002596 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	3324      	adds	r3, #36	; 0x24
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	68b9      	ldr	r1, [r7, #8]
 8002590:	4618      	mov	r0, r3
 8002592:	f000 fc9b 	bl	8002ecc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002596:	6978      	ldr	r0, [r7, #20]
 8002598:	f7ff ff50 	bl	800243c <prvUnlockQueue>
    }
 800259c:	bf00      	nop
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08c      	sub	sp, #48	; 0x30
 80025a8:	af04      	add	r7, sp, #16
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	4613      	mov	r3, r2
 80025b2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80025b4:	88fb      	ldrh	r3, [r7, #6]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fe fd79 	bl	80010b0 <pvPortMalloc>
 80025be:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d013      	beq.n	80025ee <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80025c6:	2050      	movs	r0, #80	; 0x50
 80025c8:	f7fe fd72 	bl	80010b0 <pvPortMalloc>
 80025cc:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80025d4:	2250      	movs	r2, #80	; 0x50
 80025d6:	2100      	movs	r1, #0
 80025d8:	69f8      	ldr	r0, [r7, #28]
 80025da:	f001 fbd9 	bl	8003d90 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	631a      	str	r2, [r3, #48]	; 0x30
 80025e4:	e005      	b.n	80025f2 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80025e6:	6978      	ldr	r0, [r7, #20]
 80025e8:	f7fe fe1c 	bl	8001224 <vPortFree>
 80025ec:	e001      	b.n	80025f2 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d013      	beq.n	8002620 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80025f8:	88fa      	ldrh	r2, [r7, #6]
 80025fa:	2300      	movs	r3, #0
 80025fc:	9303      	str	r3, [sp, #12]
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	9302      	str	r3, [sp, #8]
 8002602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002604:	9301      	str	r3, [sp, #4]
 8002606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 f80e 	bl	8002630 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002614:	69f8      	ldr	r0, [r7, #28]
 8002616:	f000 f891 	bl	800273c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800261a:	2301      	movs	r3, #1
 800261c:	61bb      	str	r3, [r7, #24]
 800261e:	e002      	b.n	8002626 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002620:	f04f 33ff 	mov.w	r3, #4294967295
 8002624:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002626:	69bb      	ldr	r3, [r7, #24]
    }
 8002628:	4618      	mov	r0, r3
 800262a:	3720      	adds	r7, #32
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b088      	sub	sp, #32
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800263e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002648:	3b01      	subs	r3, #1
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	f023 0307 	bic.w	r3, r3, #7
 8002656:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <prvInitialiseNewTask+0x48>
        __asm volatile
 8002662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002666:	f383 8811 	msr	BASEPRI, r3
 800266a:	f3bf 8f6f 	isb	sy
 800266e:	f3bf 8f4f 	dsb	sy
 8002672:	617b      	str	r3, [r7, #20]
    }
 8002674:	bf00      	nop
 8002676:	e7fe      	b.n	8002676 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d01e      	beq.n	80026bc <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
 8002682:	e012      	b.n	80026aa <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	4413      	add	r3, r2
 800268a:	7819      	ldrb	r1, [r3, #0]
 800268c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	4413      	add	r3, r2
 8002692:	3334      	adds	r3, #52	; 0x34
 8002694:	460a      	mov	r2, r1
 8002696:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	4413      	add	r3, r2
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d006      	beq.n	80026b2 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	3301      	adds	r3, #1
 80026a8:	61fb      	str	r3, [r7, #28]
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	2b09      	cmp	r3, #9
 80026ae:	d9e9      	bls.n	8002684 <prvInitialiseNewTask+0x54>
 80026b0:	e000      	b.n	80026b4 <prvInitialiseNewTask+0x84>
            {
                break;
 80026b2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80026b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80026bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d90a      	bls.n	80026d8 <prvInitialiseNewTask+0xa8>
        __asm volatile
 80026c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c6:	f383 8811 	msr	BASEPRI, r3
 80026ca:	f3bf 8f6f 	isb	sy
 80026ce:	f3bf 8f4f 	dsb	sy
 80026d2:	613b      	str	r3, [r7, #16]
    }
 80026d4:	bf00      	nop
 80026d6:	e7fe      	b.n	80026d6 <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80026d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d901      	bls.n	80026e2 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80026de:	2304      	movs	r3, #4
 80026e0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80026e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026e6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80026e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80026ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f0:	3304      	adds	r3, #4
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe fec8 	bl	8001488 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80026f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fa:	3318      	adds	r3, #24
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fe fec3 	bl	8001488 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002706:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270a:	f1c3 0205 	rsb	r2, r3, #5
 800270e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002710:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002716:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	68f9      	ldr	r1, [r7, #12]
 800271c:	69b8      	ldr	r0, [r7, #24]
 800271e:	f7ff f805 	bl	800172c <pxPortInitialiseStack>
 8002722:	4602      	mov	r2, r0
 8002724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002726:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <prvInitialiseNewTask+0x104>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800272e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002732:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002734:	bf00      	nop
 8002736:	3720      	adds	r7, #32
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002744:	f7ff f920 	bl	8001988 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002748:	4b3e      	ldr	r3, [pc, #248]	; (8002844 <prvAddNewTaskToReadyList+0x108>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	3301      	adds	r3, #1
 800274e:	4a3d      	ldr	r2, [pc, #244]	; (8002844 <prvAddNewTaskToReadyList+0x108>)
 8002750:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002752:	4b3d      	ldr	r3, [pc, #244]	; (8002848 <prvAddNewTaskToReadyList+0x10c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d109      	bne.n	800276e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800275a:	4a3b      	ldr	r2, [pc, #236]	; (8002848 <prvAddNewTaskToReadyList+0x10c>)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002760:	4b38      	ldr	r3, [pc, #224]	; (8002844 <prvAddNewTaskToReadyList+0x108>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d110      	bne.n	800278a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002768:	f000 fd64 	bl	8003234 <prvInitialiseTaskLists>
 800276c:	e00d      	b.n	800278a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800276e:	4b37      	ldr	r3, [pc, #220]	; (800284c <prvAddNewTaskToReadyList+0x110>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002776:	4b34      	ldr	r3, [pc, #208]	; (8002848 <prvAddNewTaskToReadyList+0x10c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	429a      	cmp	r2, r3
 8002782:	d802      	bhi.n	800278a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002784:	4a30      	ldr	r2, [pc, #192]	; (8002848 <prvAddNewTaskToReadyList+0x10c>)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800278a:	4b31      	ldr	r3, [pc, #196]	; (8002850 <prvAddNewTaskToReadyList+0x114>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	3301      	adds	r3, #1
 8002790:	4a2f      	ldr	r2, [pc, #188]	; (8002850 <prvAddNewTaskToReadyList+0x114>)
 8002792:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002798:	2201      	movs	r2, #1
 800279a:	409a      	lsls	r2, r3
 800279c:	4b2d      	ldr	r3, [pc, #180]	; (8002854 <prvAddNewTaskToReadyList+0x118>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	4a2c      	ldr	r2, [pc, #176]	; (8002854 <prvAddNewTaskToReadyList+0x118>)
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027aa:	492b      	ldr	r1, [pc, #172]	; (8002858 <prvAddNewTaskToReadyList+0x11c>)
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	3304      	adds	r3, #4
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	609a      	str	r2, [r3, #8]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	3204      	adds	r2, #4
 80027d2:	605a      	str	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	1d1a      	adds	r2, r3, #4
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4a1b      	ldr	r2, [pc, #108]	; (8002858 <prvAddNewTaskToReadyList+0x11c>)
 80027ea:	441a      	add	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	615a      	str	r2, [r3, #20]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f4:	4918      	ldr	r1, [pc, #96]	; (8002858 <prvAddNewTaskToReadyList+0x11c>)
 80027f6:	4613      	mov	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	1c59      	adds	r1, r3, #1
 8002804:	4814      	ldr	r0, [pc, #80]	; (8002858 <prvAddNewTaskToReadyList+0x11c>)
 8002806:	4613      	mov	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4403      	add	r3, r0
 8002810:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002812:	f7ff f8e9 	bl	80019e8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002816:	4b0d      	ldr	r3, [pc, #52]	; (800284c <prvAddNewTaskToReadyList+0x110>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00e      	beq.n	800283c <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800281e:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <prvAddNewTaskToReadyList+0x10c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002828:	429a      	cmp	r2, r3
 800282a:	d207      	bcs.n	800283c <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <prvAddNewTaskToReadyList+0x120>)
 800282e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	f3bf 8f4f 	dsb	sy
 8002838:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800283c:	bf00      	nop
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20005158 	.word	0x20005158
 8002848:	200050ac 	.word	0x200050ac
 800284c:	20005164 	.word	0x20005164
 8002850:	20005174 	.word	0x20005174
 8002854:	20005160 	.word	0x20005160
 8002858:	200050b0 	.word	0x200050b0
 800285c:	e000ed04 	.word	0xe000ed04

08002860 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002868:	2300      	movs	r3, #0
 800286a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d017      	beq.n	80028a2 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002872:	4b13      	ldr	r3, [pc, #76]	; (80028c0 <vTaskDelay+0x60>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <vTaskDelay+0x30>
        __asm volatile
 800287a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287e:	f383 8811 	msr	BASEPRI, r3
 8002882:	f3bf 8f6f 	isb	sy
 8002886:	f3bf 8f4f 	dsb	sy
 800288a:	60bb      	str	r3, [r7, #8]
    }
 800288c:	bf00      	nop
 800288e:	e7fe      	b.n	800288e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002890:	f000 f86c 	bl	800296c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002894:	2100      	movs	r1, #0
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 ff52 	bl	8003740 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800289c:	f000 f874 	bl	8002988 <xTaskResumeAll>
 80028a0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d107      	bne.n	80028b8 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 80028a8:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <vTaskDelay+0x64>)
 80028aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	f3bf 8f4f 	dsb	sy
 80028b4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80028b8:	bf00      	nop
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	20005180 	.word	0x20005180
 80028c4:	e000ed04 	.word	0xe000ed04

080028c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80028ce:	4b20      	ldr	r3, [pc, #128]	; (8002950 <vTaskStartScheduler+0x88>)
 80028d0:	9301      	str	r3, [sp, #4]
 80028d2:	2300      	movs	r3, #0
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	2300      	movs	r3, #0
 80028d8:	2280      	movs	r2, #128	; 0x80
 80028da:	491e      	ldr	r1, [pc, #120]	; (8002954 <vTaskStartScheduler+0x8c>)
 80028dc:	481e      	ldr	r0, [pc, #120]	; (8002958 <vTaskStartScheduler+0x90>)
 80028de:	f7ff fe61 	bl	80025a4 <xTaskCreate>
 80028e2:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d102      	bne.n	80028f0 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80028ea:	f000 ff7d 	bl	80037e8 <xTimerCreateTimerTask>
 80028ee:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d116      	bne.n	8002924 <vTaskStartScheduler+0x5c>
        __asm volatile
 80028f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fa:	f383 8811 	msr	BASEPRI, r3
 80028fe:	f3bf 8f6f 	isb	sy
 8002902:	f3bf 8f4f 	dsb	sy
 8002906:	60bb      	str	r3, [r7, #8]
    }
 8002908:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800290a:	4b14      	ldr	r3, [pc, #80]	; (800295c <vTaskStartScheduler+0x94>)
 800290c:	f04f 32ff 	mov.w	r2, #4294967295
 8002910:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002912:	4b13      	ldr	r3, [pc, #76]	; (8002960 <vTaskStartScheduler+0x98>)
 8002914:	2201      	movs	r2, #1
 8002916:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002918:	4b12      	ldr	r3, [pc, #72]	; (8002964 <vTaskStartScheduler+0x9c>)
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800291e:	f7fe ff91 	bl	8001844 <xPortStartScheduler>
 8002922:	e00e      	b.n	8002942 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292a:	d10a      	bne.n	8002942 <vTaskStartScheduler+0x7a>
        __asm volatile
 800292c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002930:	f383 8811 	msr	BASEPRI, r3
 8002934:	f3bf 8f6f 	isb	sy
 8002938:	f3bf 8f4f 	dsb	sy
 800293c:	607b      	str	r3, [r7, #4]
    }
 800293e:	bf00      	nop
 8002940:	e7fe      	b.n	8002940 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002942:	4b09      	ldr	r3, [pc, #36]	; (8002968 <vTaskStartScheduler+0xa0>)
 8002944:	681b      	ldr	r3, [r3, #0]
}
 8002946:	bf00      	nop
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	2000517c 	.word	0x2000517c
 8002954:	08003db8 	.word	0x08003db8
 8002958:	08003205 	.word	0x08003205
 800295c:	20005178 	.word	0x20005178
 8002960:	20005164 	.word	0x20005164
 8002964:	2000515c 	.word	0x2000515c
 8002968:	20000020 	.word	0x20000020

0800296c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002970:	4b04      	ldr	r3, [pc, #16]	; (8002984 <vTaskSuspendAll+0x18>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	3301      	adds	r3, #1
 8002976:	4a03      	ldr	r2, [pc, #12]	; (8002984 <vTaskSuspendAll+0x18>)
 8002978:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800297a:	bf00      	nop
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	20005180 	.word	0x20005180

08002988 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b088      	sub	sp, #32
 800298c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002992:	2300      	movs	r3, #0
 8002994:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002996:	4b71      	ldr	r3, [pc, #452]	; (8002b5c <xTaskResumeAll+0x1d4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10a      	bne.n	80029b4 <xTaskResumeAll+0x2c>
        __asm volatile
 800299e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a2:	f383 8811 	msr	BASEPRI, r3
 80029a6:	f3bf 8f6f 	isb	sy
 80029aa:	f3bf 8f4f 	dsb	sy
 80029ae:	607b      	str	r3, [r7, #4]
    }
 80029b0:	bf00      	nop
 80029b2:	e7fe      	b.n	80029b2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80029b4:	f7fe ffe8 	bl	8001988 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80029b8:	4b68      	ldr	r3, [pc, #416]	; (8002b5c <xTaskResumeAll+0x1d4>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	3b01      	subs	r3, #1
 80029be:	4a67      	ldr	r2, [pc, #412]	; (8002b5c <xTaskResumeAll+0x1d4>)
 80029c0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029c2:	4b66      	ldr	r3, [pc, #408]	; (8002b5c <xTaskResumeAll+0x1d4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f040 80c0 	bne.w	8002b4c <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80029cc:	4b64      	ldr	r3, [pc, #400]	; (8002b60 <xTaskResumeAll+0x1d8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 80bb 	beq.w	8002b4c <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029d6:	e08a      	b.n	8002aee <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029d8:	4b62      	ldr	r3, [pc, #392]	; (8002b64 <xTaskResumeAll+0x1dc>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	69fa      	ldr	r2, [r7, #28]
 80029ec:	6a12      	ldr	r2, [r2, #32]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	69fa      	ldr	r2, [r7, #28]
 80029f6:	69d2      	ldr	r2, [r2, #28]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	3318      	adds	r3, #24
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d103      	bne.n	8002a0e <xTaskResumeAll+0x86>
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	6a1a      	ldr	r2, [r3, #32]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	2200      	movs	r2, #0
 8002a12:	629a      	str	r2, [r3, #40]	; 0x28
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	1e5a      	subs	r2, r3, #1
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	69fa      	ldr	r2, [r7, #28]
 8002a2a:	68d2      	ldr	r2, [r2, #12]
 8002a2c:	609a      	str	r2, [r3, #8]
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	69fa      	ldr	r2, [r7, #28]
 8002a34:	6892      	ldr	r2, [r2, #8]
 8002a36:	605a      	str	r2, [r3, #4]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	3304      	adds	r3, #4
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d103      	bne.n	8002a4c <xTaskResumeAll+0xc4>
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	605a      	str	r2, [r3, #4]
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	615a      	str	r2, [r3, #20]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	1e5a      	subs	r2, r3, #1
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a60:	2201      	movs	r2, #1
 8002a62:	409a      	lsls	r2, r3
 8002a64:	4b40      	ldr	r3, [pc, #256]	; (8002b68 <xTaskResumeAll+0x1e0>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	4a3f      	ldr	r2, [pc, #252]	; (8002b68 <xTaskResumeAll+0x1e0>)
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a72:	493e      	ldr	r1, [pc, #248]	; (8002b6c <xTaskResumeAll+0x1e4>)
 8002a74:	4613      	mov	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	3304      	adds	r3, #4
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	60bb      	str	r3, [r7, #8]
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	609a      	str	r2, [r3, #8]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	69fa      	ldr	r2, [r7, #28]
 8002a98:	3204      	adds	r2, #4
 8002a9a:	605a      	str	r2, [r3, #4]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	1d1a      	adds	r2, r3, #4
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4a2e      	ldr	r2, [pc, #184]	; (8002b6c <xTaskResumeAll+0x1e4>)
 8002ab2:	441a      	add	r2, r3
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	615a      	str	r2, [r3, #20]
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002abc:	492b      	ldr	r1, [pc, #172]	; (8002b6c <xTaskResumeAll+0x1e4>)
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	1c59      	adds	r1, r3, #1
 8002acc:	4827      	ldr	r0, [pc, #156]	; (8002b6c <xTaskResumeAll+0x1e4>)
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4403      	add	r3, r0
 8002ad8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ade:	4b24      	ldr	r3, [pc, #144]	; (8002b70 <xTaskResumeAll+0x1e8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d302      	bcc.n	8002aee <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002ae8:	4b22      	ldr	r3, [pc, #136]	; (8002b74 <xTaskResumeAll+0x1ec>)
 8002aea:	2201      	movs	r2, #1
 8002aec:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002aee:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <xTaskResumeAll+0x1dc>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f47f af70 	bne.w	80029d8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002afe:	f000 fbd7 	bl	80032b0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002b02:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <xTaskResumeAll+0x1f0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d010      	beq.n	8002b30 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002b0e:	f000 f847 	bl	8002ba0 <xTaskIncrementTick>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d002      	beq.n	8002b1e <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002b18:	4b16      	ldr	r3, [pc, #88]	; (8002b74 <xTaskResumeAll+0x1ec>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	3b01      	subs	r3, #1
 8002b22:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f1      	bne.n	8002b0e <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8002b2a:	4b13      	ldr	r3, [pc, #76]	; (8002b78 <xTaskResumeAll+0x1f0>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002b30:	4b10      	ldr	r3, [pc, #64]	; (8002b74 <xTaskResumeAll+0x1ec>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d009      	beq.n	8002b4c <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002b3c:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <xTaskResumeAll+0x1f4>)
 8002b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002b4c:	f7fe ff4c 	bl	80019e8 <vPortExitCritical>

    return xAlreadyYielded;
 8002b50:	69bb      	ldr	r3, [r7, #24]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3720      	adds	r7, #32
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20005180 	.word	0x20005180
 8002b60:	20005158 	.word	0x20005158
 8002b64:	20005144 	.word	0x20005144
 8002b68:	20005160 	.word	0x20005160
 8002b6c:	200050b0 	.word	0x200050b0
 8002b70:	200050ac 	.word	0x200050ac
 8002b74:	2000516c 	.word	0x2000516c
 8002b78:	20005168 	.word	0x20005168
 8002b7c:	e000ed04 	.word	0xe000ed04

08002b80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002b86:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <xTaskGetTickCount+0x1c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002b8c:	687b      	ldr	r3, [r7, #4]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	2000515c 	.word	0x2000515c

08002ba0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	; 0x28
 8002ba4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002baa:	4b7d      	ldr	r3, [pc, #500]	; (8002da0 <xTaskIncrementTick+0x200>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f040 80ec 	bne.w	8002d8c <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002bb4:	4b7b      	ldr	r3, [pc, #492]	; (8002da4 <xTaskIncrementTick+0x204>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002bbc:	4a79      	ldr	r2, [pc, #484]	; (8002da4 <xTaskIncrementTick+0x204>)
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d120      	bne.n	8002c0a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002bc8:	4b77      	ldr	r3, [pc, #476]	; (8002da8 <xTaskIncrementTick+0x208>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00a      	beq.n	8002be8 <xTaskIncrementTick+0x48>
        __asm volatile
 8002bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd6:	f383 8811 	msr	BASEPRI, r3
 8002bda:	f3bf 8f6f 	isb	sy
 8002bde:	f3bf 8f4f 	dsb	sy
 8002be2:	607b      	str	r3, [r7, #4]
    }
 8002be4:	bf00      	nop
 8002be6:	e7fe      	b.n	8002be6 <xTaskIncrementTick+0x46>
 8002be8:	4b6f      	ldr	r3, [pc, #444]	; (8002da8 <xTaskIncrementTick+0x208>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	61fb      	str	r3, [r7, #28]
 8002bee:	4b6f      	ldr	r3, [pc, #444]	; (8002dac <xTaskIncrementTick+0x20c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a6d      	ldr	r2, [pc, #436]	; (8002da8 <xTaskIncrementTick+0x208>)
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	4a6d      	ldr	r2, [pc, #436]	; (8002dac <xTaskIncrementTick+0x20c>)
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	6013      	str	r3, [r2, #0]
 8002bfc:	4b6c      	ldr	r3, [pc, #432]	; (8002db0 <xTaskIncrementTick+0x210>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	3301      	adds	r3, #1
 8002c02:	4a6b      	ldr	r2, [pc, #428]	; (8002db0 <xTaskIncrementTick+0x210>)
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	f000 fb53 	bl	80032b0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002c0a:	4b6a      	ldr	r3, [pc, #424]	; (8002db4 <xTaskIncrementTick+0x214>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6a3a      	ldr	r2, [r7, #32]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	f0c0 80a6 	bcc.w	8002d62 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c16:	4b64      	ldr	r3, [pc, #400]	; (8002da8 <xTaskIncrementTick+0x208>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d104      	bne.n	8002c2a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c20:	4b64      	ldr	r3, [pc, #400]	; (8002db4 <xTaskIncrementTick+0x214>)
 8002c22:	f04f 32ff 	mov.w	r2, #4294967295
 8002c26:	601a      	str	r2, [r3, #0]
                    break;
 8002c28:	e09b      	b.n	8002d62 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c2a:	4b5f      	ldr	r3, [pc, #380]	; (8002da8 <xTaskIncrementTick+0x208>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002c3a:	6a3a      	ldr	r2, [r7, #32]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d203      	bcs.n	8002c4a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002c42:	4a5c      	ldr	r2, [pc, #368]	; (8002db4 <xTaskIncrementTick+0x214>)
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002c48:	e08b      	b.n	8002d62 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	613b      	str	r3, [r7, #16]
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	68d2      	ldr	r2, [r2, #12]
 8002c58:	609a      	str	r2, [r3, #8]
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	6892      	ldr	r2, [r2, #8]
 8002c62:	605a      	str	r2, [r3, #4]
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d103      	bne.n	8002c78 <xTaskIncrementTick+0xd8>
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	605a      	str	r2, [r3, #4]
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	615a      	str	r2, [r3, #20]
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	1e5a      	subs	r2, r3, #1
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d01e      	beq.n	8002cce <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	6a12      	ldr	r2, [r2, #32]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	69d2      	ldr	r2, [r2, #28]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	3318      	adds	r3, #24
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d103      	bne.n	8002cbe <xTaskIncrementTick+0x11e>
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	6a1a      	ldr	r2, [r3, #32]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	629a      	str	r2, [r3, #40]	; 0x28
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	1e5a      	subs	r2, r3, #1
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	409a      	lsls	r2, r3
 8002cd6:	4b38      	ldr	r3, [pc, #224]	; (8002db8 <xTaskIncrementTick+0x218>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	4a36      	ldr	r2, [pc, #216]	; (8002db8 <xTaskIncrementTick+0x218>)
 8002cde:	6013      	str	r3, [r2, #0]
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce4:	4935      	ldr	r1, [pc, #212]	; (8002dbc <xTaskIncrementTick+0x21c>)
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	440b      	add	r3, r1
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	60da      	str	r2, [r3, #12]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	3204      	adds	r2, #4
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	1d1a      	adds	r2, r3, #4
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	609a      	str	r2, [r3, #8]
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4a26      	ldr	r2, [pc, #152]	; (8002dbc <xTaskIncrementTick+0x21c>)
 8002d24:	441a      	add	r2, r3
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	615a      	str	r2, [r3, #20]
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d2e:	4923      	ldr	r1, [pc, #140]	; (8002dbc <xTaskIncrementTick+0x21c>)
 8002d30:	4613      	mov	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	1c59      	adds	r1, r3, #1
 8002d3e:	481f      	ldr	r0, [pc, #124]	; (8002dbc <xTaskIncrementTick+0x21c>)
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4403      	add	r3, r0
 8002d4a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d50:	4b1b      	ldr	r3, [pc, #108]	; (8002dc0 <xTaskIncrementTick+0x220>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d56:	429a      	cmp	r2, r3
 8002d58:	f67f af5d 	bls.w	8002c16 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d60:	e759      	b.n	8002c16 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d62:	4b17      	ldr	r3, [pc, #92]	; (8002dc0 <xTaskIncrementTick+0x220>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d68:	4914      	ldr	r1, [pc, #80]	; (8002dbc <xTaskIncrementTick+0x21c>)
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d901      	bls.n	8002d7e <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002d7e:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <xTaskIncrementTick+0x224>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d007      	beq.n	8002d96 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8002d86:	2301      	movs	r3, #1
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24
 8002d8a:	e004      	b.n	8002d96 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002d8c:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <xTaskIncrementTick+0x228>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	3301      	adds	r3, #1
 8002d92:	4a0d      	ldr	r2, [pc, #52]	; (8002dc8 <xTaskIncrementTick+0x228>)
 8002d94:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3728      	adds	r7, #40	; 0x28
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	20005180 	.word	0x20005180
 8002da4:	2000515c 	.word	0x2000515c
 8002da8:	2000513c 	.word	0x2000513c
 8002dac:	20005140 	.word	0x20005140
 8002db0:	20005170 	.word	0x20005170
 8002db4:	20005178 	.word	0x20005178
 8002db8:	20005160 	.word	0x20005160
 8002dbc:	200050b0 	.word	0x200050b0
 8002dc0:	200050ac 	.word	0x200050ac
 8002dc4:	2000516c 	.word	0x2000516c
 8002dc8:	20005168 	.word	0x20005168

08002dcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002dd2:	4b27      	ldr	r3, [pc, #156]	; (8002e70 <vTaskSwitchContext+0xa4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002dda:	4b26      	ldr	r3, [pc, #152]	; (8002e74 <vTaskSwitchContext+0xa8>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002de0:	e03f      	b.n	8002e62 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002de2:	4b24      	ldr	r3, [pc, #144]	; (8002e74 <vTaskSwitchContext+0xa8>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002de8:	4b23      	ldr	r3, [pc, #140]	; (8002e78 <vTaskSwitchContext+0xac>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	fab3 f383 	clz	r3, r3
 8002df4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002df6:	7afb      	ldrb	r3, [r7, #11]
 8002df8:	f1c3 031f 	rsb	r3, r3, #31
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	491f      	ldr	r1, [pc, #124]	; (8002e7c <vTaskSwitchContext+0xb0>)
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10a      	bne.n	8002e28 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e16:	f383 8811 	msr	BASEPRI, r3
 8002e1a:	f3bf 8f6f 	isb	sy
 8002e1e:	f3bf 8f4f 	dsb	sy
 8002e22:	607b      	str	r3, [r7, #4]
    }
 8002e24:	bf00      	nop
 8002e26:	e7fe      	b.n	8002e26 <vTaskSwitchContext+0x5a>
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4a12      	ldr	r2, [pc, #72]	; (8002e7c <vTaskSwitchContext+0xb0>)
 8002e34:	4413      	add	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	3308      	adds	r3, #8
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d104      	bne.n	8002e58 <vTaskSwitchContext+0x8c>
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	605a      	str	r2, [r3, #4]
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	4a08      	ldr	r2, [pc, #32]	; (8002e80 <vTaskSwitchContext+0xb4>)
 8002e60:	6013      	str	r3, [r2, #0]
}
 8002e62:	bf00      	nop
 8002e64:	371c      	adds	r7, #28
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	20005180 	.word	0x20005180
 8002e74:	2000516c 	.word	0x2000516c
 8002e78:	20005160 	.word	0x20005160
 8002e7c:	200050b0 	.word	0x200050b0
 8002e80:	200050ac 	.word	0x200050ac

08002e84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10a      	bne.n	8002eaa <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e98:	f383 8811 	msr	BASEPRI, r3
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	60fb      	str	r3, [r7, #12]
    }
 8002ea6:	bf00      	nop
 8002ea8:	e7fe      	b.n	8002ea8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002eaa:	4b07      	ldr	r3, [pc, #28]	; (8002ec8 <vTaskPlaceOnEventList+0x44>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	3318      	adds	r3, #24
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7fe faf5 	bl	80014a2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002eb8:	2101      	movs	r1, #1
 8002eba:	6838      	ldr	r0, [r7, #0]
 8002ebc:	f000 fc40 	bl	8003740 <prvAddCurrentTaskToDelayedList>
}
 8002ec0:	bf00      	nop
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	200050ac 	.word	0x200050ac

08002ecc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10a      	bne.n	8002ef4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee2:	f383 8811 	msr	BASEPRI, r3
 8002ee6:	f3bf 8f6f 	isb	sy
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	613b      	str	r3, [r7, #16]
    }
 8002ef0:	bf00      	nop
 8002ef2:	e7fe      	b.n	8002ef2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	617b      	str	r3, [r7, #20]
 8002efa:	4b16      	ldr	r3, [pc, #88]	; (8002f54 <vTaskPlaceOnEventListRestricted+0x88>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	61da      	str	r2, [r3, #28]
 8002f02:	4b14      	ldr	r3, [pc, #80]	; (8002f54 <vTaskPlaceOnEventListRestricted+0x88>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	6892      	ldr	r2, [r2, #8]
 8002f0a:	621a      	str	r2, [r3, #32]
 8002f0c:	4b11      	ldr	r3, [pc, #68]	; (8002f54 <vTaskPlaceOnEventListRestricted+0x88>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	3218      	adds	r2, #24
 8002f16:	605a      	str	r2, [r3, #4]
 8002f18:	4b0e      	ldr	r3, [pc, #56]	; (8002f54 <vTaskPlaceOnEventListRestricted+0x88>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f103 0218 	add.w	r2, r3, #24
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	609a      	str	r2, [r3, #8]
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <vTaskPlaceOnEventListRestricted+0x88>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d002      	beq.n	8002f42 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8002f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f40:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	68b8      	ldr	r0, [r7, #8]
 8002f46:	f000 fbfb 	bl	8003740 <prvAddCurrentTaskToDelayedList>
    }
 8002f4a:	bf00      	nop
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	200050ac 	.word	0x200050ac

08002f58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b08b      	sub	sp, #44	; 0x2c
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10a      	bne.n	8002f84 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f72:	f383 8811 	msr	BASEPRI, r3
 8002f76:	f3bf 8f6f 	isb	sy
 8002f7a:	f3bf 8f4f 	dsb	sy
 8002f7e:	60fb      	str	r3, [r7, #12]
    }
 8002f80:	bf00      	nop
 8002f82:	e7fe      	b.n	8002f82 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	61fb      	str	r3, [r7, #28]
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	6a3a      	ldr	r2, [r7, #32]
 8002f90:	6a12      	ldr	r2, [r2, #32]
 8002f92:	609a      	str	r2, [r3, #8]
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	6a3a      	ldr	r2, [r7, #32]
 8002f9a:	69d2      	ldr	r2, [r2, #28]
 8002f9c:	605a      	str	r2, [r3, #4]
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	3318      	adds	r3, #24
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d103      	bne.n	8002fb2 <xTaskRemoveFromEventList+0x5a>
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	6a1a      	ldr	r2, [r3, #32]
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	629a      	str	r2, [r3, #40]	; 0x28
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	1e5a      	subs	r2, r3, #1
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fc2:	4b4a      	ldr	r3, [pc, #296]	; (80030ec <xTaskRemoveFromEventList+0x194>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d15e      	bne.n	8003088 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	6a3a      	ldr	r2, [r7, #32]
 8002fd6:	68d2      	ldr	r2, [r2, #12]
 8002fd8:	609a      	str	r2, [r3, #8]
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	6a3a      	ldr	r2, [r7, #32]
 8002fe0:	6892      	ldr	r2, [r2, #8]
 8002fe2:	605a      	str	r2, [r3, #4]
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	3304      	adds	r3, #4
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d103      	bne.n	8002ff8 <xTaskRemoveFromEventList+0xa0>
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	605a      	str	r2, [r3, #4]
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	615a      	str	r2, [r3, #20]
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	1e5a      	subs	r2, r3, #1
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300c:	2201      	movs	r2, #1
 800300e:	409a      	lsls	r2, r3
 8003010:	4b37      	ldr	r3, [pc, #220]	; (80030f0 <xTaskRemoveFromEventList+0x198>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4313      	orrs	r3, r2
 8003016:	4a36      	ldr	r2, [pc, #216]	; (80030f0 <xTaskRemoveFromEventList+0x198>)
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800301e:	4935      	ldr	r1, [pc, #212]	; (80030f4 <xTaskRemoveFromEventList+0x19c>)
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	3304      	adds	r3, #4
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	613b      	str	r3, [r7, #16]
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	609a      	str	r2, [r3, #8]
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	60da      	str	r2, [r3, #12]
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	6a3a      	ldr	r2, [r7, #32]
 8003044:	3204      	adds	r2, #4
 8003046:	605a      	str	r2, [r3, #4]
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	1d1a      	adds	r2, r3, #4
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	609a      	str	r2, [r3, #8]
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4a25      	ldr	r2, [pc, #148]	; (80030f4 <xTaskRemoveFromEventList+0x19c>)
 800305e:	441a      	add	r2, r3
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	615a      	str	r2, [r3, #20]
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003068:	4922      	ldr	r1, [pc, #136]	; (80030f4 <xTaskRemoveFromEventList+0x19c>)
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	1c59      	adds	r1, r3, #1
 8003078:	481e      	ldr	r0, [pc, #120]	; (80030f4 <xTaskRemoveFromEventList+0x19c>)
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4403      	add	r3, r0
 8003084:	6019      	str	r1, [r3, #0]
 8003086:	e01b      	b.n	80030c0 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003088:	4b1b      	ldr	r3, [pc, #108]	; (80030f8 <xTaskRemoveFromEventList+0x1a0>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	61bb      	str	r3, [r7, #24]
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	61da      	str	r2, [r3, #28]
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	621a      	str	r2, [r3, #32]
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	6a3a      	ldr	r2, [r7, #32]
 80030a2:	3218      	adds	r2, #24
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	f103 0218 	add.w	r2, r3, #24
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	609a      	str	r2, [r3, #8]
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	4a11      	ldr	r2, [pc, #68]	; (80030f8 <xTaskRemoveFromEventList+0x1a0>)
 80030b4:	629a      	str	r2, [r3, #40]	; 0x28
 80030b6:	4b10      	ldr	r3, [pc, #64]	; (80030f8 <xTaskRemoveFromEventList+0x1a0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	3301      	adds	r3, #1
 80030bc:	4a0e      	ldr	r2, [pc, #56]	; (80030f8 <xTaskRemoveFromEventList+0x1a0>)
 80030be:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c4:	4b0d      	ldr	r3, [pc, #52]	; (80030fc <xTaskRemoveFromEventList+0x1a4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d905      	bls.n	80030da <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80030ce:	2301      	movs	r3, #1
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80030d2:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <xTaskRemoveFromEventList+0x1a8>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	e001      	b.n	80030de <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 80030da:	2300      	movs	r3, #0
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	372c      	adds	r7, #44	; 0x2c
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	20005180 	.word	0x20005180
 80030f0:	20005160 	.word	0x20005160
 80030f4:	200050b0 	.word	0x200050b0
 80030f8:	20005144 	.word	0x20005144
 80030fc:	200050ac 	.word	0x200050ac
 8003100:	2000516c 	.word	0x2000516c

08003104 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800310c:	4b06      	ldr	r3, [pc, #24]	; (8003128 <vTaskInternalSetTimeOutState+0x24>)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003114:	4b05      	ldr	r3, [pc, #20]	; (800312c <vTaskInternalSetTimeOutState+0x28>)
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	605a      	str	r2, [r3, #4]
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	20005170 	.word	0x20005170
 800312c:	2000515c 	.word	0x2000515c

08003130 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b088      	sub	sp, #32
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10a      	bne.n	8003156 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003144:	f383 8811 	msr	BASEPRI, r3
 8003148:	f3bf 8f6f 	isb	sy
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	613b      	str	r3, [r7, #16]
    }
 8003152:	bf00      	nop
 8003154:	e7fe      	b.n	8003154 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10a      	bne.n	8003172 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800315c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003160:	f383 8811 	msr	BASEPRI, r3
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	f3bf 8f4f 	dsb	sy
 800316c:	60fb      	str	r3, [r7, #12]
    }
 800316e:	bf00      	nop
 8003170:	e7fe      	b.n	8003170 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003172:	f7fe fc09 	bl	8001988 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003176:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <xTaskCheckForTimeOut+0xb4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	617b      	str	r3, [r7, #20]
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	4b17      	ldr	r3, [pc, #92]	; (80031e8 <xTaskCheckForTimeOut+0xb8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d00a      	beq.n	80031a8 <xTaskCheckForTimeOut+0x78>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	429a      	cmp	r2, r3
 800319a:	d305      	bcc.n	80031a8 <xTaskCheckForTimeOut+0x78>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800319c:	2301      	movs	r3, #1
 800319e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	e015      	b.n	80031d4 <xTaskCheckForTimeOut+0xa4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d20b      	bcs.n	80031ca <xTaskCheckForTimeOut+0x9a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	1ad2      	subs	r2, r2, r3
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7ff ffa0 	bl	8003104 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80031c4:	2300      	movs	r3, #0
 80031c6:	61fb      	str	r3, [r7, #28]
 80031c8:	e004      	b.n	80031d4 <xTaskCheckForTimeOut+0xa4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80031d0:	2301      	movs	r3, #1
 80031d2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80031d4:	f7fe fc08 	bl	80019e8 <vPortExitCritical>

    return xReturn;
 80031d8:	69fb      	ldr	r3, [r7, #28]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3720      	adds	r7, #32
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	2000515c 	.word	0x2000515c
 80031e8:	20005170 	.word	0x20005170

080031ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80031f0:	4b03      	ldr	r3, [pc, #12]	; (8003200 <vTaskMissedYield+0x14>)
 80031f2:	2201      	movs	r2, #1
 80031f4:	601a      	str	r2, [r3, #0]
}
 80031f6:	bf00      	nop
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	2000516c 	.word	0x2000516c

08003204 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800320c:	f000 f848 	bl	80032a0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003210:	4b06      	ldr	r3, [pc, #24]	; (800322c <prvIdleTask+0x28>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d9f9      	bls.n	800320c <prvIdleTask+0x8>
            {
                taskYIELD();
 8003218:	4b05      	ldr	r3, [pc, #20]	; (8003230 <prvIdleTask+0x2c>)
 800321a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	f3bf 8f4f 	dsb	sy
 8003224:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003228:	e7f0      	b.n	800320c <prvIdleTask+0x8>
 800322a:	bf00      	nop
 800322c:	200050b0 	.word	0x200050b0
 8003230:	e000ed04 	.word	0xe000ed04

08003234 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800323a:	2300      	movs	r3, #0
 800323c:	607b      	str	r3, [r7, #4]
 800323e:	e00c      	b.n	800325a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4a0f      	ldr	r2, [pc, #60]	; (8003288 <prvInitialiseTaskLists+0x54>)
 800324c:	4413      	add	r3, r2
 800324e:	4618      	mov	r0, r3
 8003250:	f7fe f8fa 	bl	8001448 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3301      	adds	r3, #1
 8003258:	607b      	str	r3, [r7, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b04      	cmp	r3, #4
 800325e:	d9ef      	bls.n	8003240 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003260:	480a      	ldr	r0, [pc, #40]	; (800328c <prvInitialiseTaskLists+0x58>)
 8003262:	f7fe f8f1 	bl	8001448 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003266:	480a      	ldr	r0, [pc, #40]	; (8003290 <prvInitialiseTaskLists+0x5c>)
 8003268:	f7fe f8ee 	bl	8001448 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800326c:	4809      	ldr	r0, [pc, #36]	; (8003294 <prvInitialiseTaskLists+0x60>)
 800326e:	f7fe f8eb 	bl	8001448 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003272:	4b09      	ldr	r3, [pc, #36]	; (8003298 <prvInitialiseTaskLists+0x64>)
 8003274:	4a05      	ldr	r2, [pc, #20]	; (800328c <prvInitialiseTaskLists+0x58>)
 8003276:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003278:	4b08      	ldr	r3, [pc, #32]	; (800329c <prvInitialiseTaskLists+0x68>)
 800327a:	4a05      	ldr	r2, [pc, #20]	; (8003290 <prvInitialiseTaskLists+0x5c>)
 800327c:	601a      	str	r2, [r3, #0]
}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	200050b0 	.word	0x200050b0
 800328c:	20005114 	.word	0x20005114
 8003290:	20005128 	.word	0x20005128
 8003294:	20005144 	.word	0x20005144
 8003298:	2000513c 	.word	0x2000513c
 800329c:	20005140 	.word	0x20005140

080032a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0

            prvDeleteTCB( pxTCB );
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80032a4:	bf00      	nop
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
	...

080032b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032b4:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <prvResetNextTaskUnblockTime+0x30>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d104      	bne.n	80032c8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80032be:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <prvResetNextTaskUnblockTime+0x34>)
 80032c0:	f04f 32ff 	mov.w	r2, #4294967295
 80032c4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80032c6:	e005      	b.n	80032d4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80032c8:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <prvResetNextTaskUnblockTime+0x30>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a04      	ldr	r2, [pc, #16]	; (80032e4 <prvResetNextTaskUnblockTime+0x34>)
 80032d2:	6013      	str	r3, [r2, #0]
}
 80032d4:	bf00      	nop
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	2000513c 	.word	0x2000513c
 80032e4:	20005178 	.word	0x20005178

080032e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80032ee:	4b0b      	ldr	r3, [pc, #44]	; (800331c <xTaskGetSchedulerState+0x34>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d102      	bne.n	80032fc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80032f6:	2301      	movs	r3, #1
 80032f8:	607b      	str	r3, [r7, #4]
 80032fa:	e008      	b.n	800330e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032fc:	4b08      	ldr	r3, [pc, #32]	; (8003320 <xTaskGetSchedulerState+0x38>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d102      	bne.n	800330a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003304:	2302      	movs	r3, #2
 8003306:	607b      	str	r3, [r7, #4]
 8003308:	e001      	b.n	800330e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800330a:	2300      	movs	r3, #0
 800330c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800330e:	687b      	ldr	r3, [r7, #4]
    }
 8003310:	4618      	mov	r0, r3
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	20005164 	.word	0x20005164
 8003320:	20005180 	.word	0x20005180

08003324 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003330:	2300      	movs	r3, #0
 8003332:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 8087 	beq.w	800344a <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003340:	4b44      	ldr	r3, [pc, #272]	; (8003454 <xTaskPriorityInherit+0x130>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003346:	429a      	cmp	r2, r3
 8003348:	d276      	bcs.n	8003438 <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	2b00      	cmp	r3, #0
 8003350:	db06      	blt.n	8003360 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003352:	4b40      	ldr	r3, [pc, #256]	; (8003454 <xTaskPriorityInherit+0x130>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	f1c3 0205 	rsb	r2, r3, #5
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	6959      	ldr	r1, [r3, #20]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4a39      	ldr	r2, [pc, #228]	; (8003458 <xTaskPriorityInherit+0x134>)
 8003372:	4413      	add	r3, r2
 8003374:	4299      	cmp	r1, r3
 8003376:	d157      	bne.n	8003428 <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	3304      	adds	r3, #4
 800337c:	4618      	mov	r0, r3
 800337e:	f7fe f8c9 	bl	8001514 <uxListRemove>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10a      	bne.n	800339e <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	2201      	movs	r2, #1
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43da      	mvns	r2, r3
 8003394:	4b31      	ldr	r3, [pc, #196]	; (800345c <xTaskPriorityInherit+0x138>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4013      	ands	r3, r2
 800339a:	4a30      	ldr	r2, [pc, #192]	; (800345c <xTaskPriorityInherit+0x138>)
 800339c:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800339e:	4b2d      	ldr	r3, [pc, #180]	; (8003454 <xTaskPriorityInherit+0x130>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	2201      	movs	r2, #1
 80033ae:	409a      	lsls	r2, r3
 80033b0:	4b2a      	ldr	r3, [pc, #168]	; (800345c <xTaskPriorityInherit+0x138>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	4a29      	ldr	r2, [pc, #164]	; (800345c <xTaskPriorityInherit+0x138>)
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033be:	4926      	ldr	r1, [pc, #152]	; (8003458 <xTaskPriorityInherit+0x134>)
 80033c0:	4613      	mov	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	3304      	adds	r3, #4
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	609a      	str	r2, [r3, #8]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	60da      	str	r2, [r3, #12]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	3204      	adds	r2, #4
 80033e6:	605a      	str	r2, [r3, #4]
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1d1a      	adds	r2, r3, #4
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f4:	4613      	mov	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4a16      	ldr	r2, [pc, #88]	; (8003458 <xTaskPriorityInherit+0x134>)
 80033fe:	441a      	add	r2, r3
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	615a      	str	r2, [r3, #20]
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003408:	4913      	ldr	r1, [pc, #76]	; (8003458 <xTaskPriorityInherit+0x134>)
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	1c59      	adds	r1, r3, #1
 8003418:	480f      	ldr	r0, [pc, #60]	; (8003458 <xTaskPriorityInherit+0x134>)
 800341a:	4613      	mov	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4403      	add	r3, r0
 8003424:	6019      	str	r1, [r3, #0]
 8003426:	e004      	b.n	8003432 <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003428:	4b0a      	ldr	r3, [pc, #40]	; (8003454 <xTaskPriorityInherit+0x130>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8003432:	2301      	movs	r3, #1
 8003434:	617b      	str	r3, [r7, #20]
 8003436:	e008      	b.n	800344a <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800343c:	4b05      	ldr	r3, [pc, #20]	; (8003454 <xTaskPriorityInherit+0x130>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003442:	429a      	cmp	r2, r3
 8003444:	d201      	bcs.n	800344a <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8003446:	2301      	movs	r3, #1
 8003448:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800344a:	697b      	ldr	r3, [r7, #20]
    }
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	200050ac 	.word	0x200050ac
 8003458:	200050b0 	.word	0x200050b0
 800345c:	20005160 	.word	0x20005160

08003460 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800346c:	2300      	movs	r3, #0
 800346e:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 808c 	beq.w	8003590 <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003478:	4b48      	ldr	r3, [pc, #288]	; (800359c <xTaskPriorityDisinherit+0x13c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	429a      	cmp	r2, r3
 8003480:	d00a      	beq.n	8003498 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8003482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003486:	f383 8811 	msr	BASEPRI, r3
 800348a:	f3bf 8f6f 	isb	sy
 800348e:	f3bf 8f4f 	dsb	sy
 8003492:	613b      	str	r3, [r7, #16]
    }
 8003494:	bf00      	nop
 8003496:	e7fe      	b.n	8003496 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10a      	bne.n	80034b6 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 80034a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a4:	f383 8811 	msr	BASEPRI, r3
 80034a8:	f3bf 8f6f 	isb	sy
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	60fb      	str	r3, [r7, #12]
    }
 80034b2:	bf00      	nop
 80034b4:	e7fe      	b.n	80034b4 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ba:	1e5a      	subs	r2, r3, #1
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	645a      	str	r2, [r3, #68]	; 0x44

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d061      	beq.n	8003590 <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d15d      	bne.n	8003590 <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	3304      	adds	r3, #4
 80034d8:	4618      	mov	r0, r3
 80034da:	f7fe f81b 	bl	8001514 <uxListRemove>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10a      	bne.n	80034fa <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	2201      	movs	r2, #1
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	43da      	mvns	r2, r3
 80034f0:	4b2b      	ldr	r3, [pc, #172]	; (80035a0 <xTaskPriorityDisinherit+0x140>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4013      	ands	r3, r2
 80034f6:	4a2a      	ldr	r2, [pc, #168]	; (80035a0 <xTaskPriorityDisinherit+0x140>)
 80034f8:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003506:	f1c3 0205 	rsb	r2, r3, #5
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	2201      	movs	r2, #1
 8003514:	409a      	lsls	r2, r3
 8003516:	4b22      	ldr	r3, [pc, #136]	; (80035a0 <xTaskPriorityDisinherit+0x140>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4313      	orrs	r3, r2
 800351c:	4a20      	ldr	r2, [pc, #128]	; (80035a0 <xTaskPriorityDisinherit+0x140>)
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003524:	491f      	ldr	r1, [pc, #124]	; (80035a4 <xTaskPriorityDisinherit+0x144>)
 8003526:	4613      	mov	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	440b      	add	r3, r1
 8003530:	3304      	adds	r3, #4
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	609a      	str	r2, [r3, #8]
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	60da      	str	r2, [r3, #12]
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	3204      	adds	r2, #4
 800354c:	605a      	str	r2, [r3, #4]
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	1d1a      	adds	r2, r3, #4
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	609a      	str	r2, [r3, #8]
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800355a:	4613      	mov	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4a10      	ldr	r2, [pc, #64]	; (80035a4 <xTaskPriorityDisinherit+0x144>)
 8003564:	441a      	add	r2, r3
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	615a      	str	r2, [r3, #20]
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800356e:	490d      	ldr	r1, [pc, #52]	; (80035a4 <xTaskPriorityDisinherit+0x144>)
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	1c59      	adds	r1, r3, #1
 800357e:	4809      	ldr	r0, [pc, #36]	; (80035a4 <xTaskPriorityDisinherit+0x144>)
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4403      	add	r3, r0
 800358a:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800358c:	2301      	movs	r3, #1
 800358e:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003590:	69fb      	ldr	r3, [r7, #28]
    }
 8003592:	4618      	mov	r0, r3
 8003594:	3720      	adds	r7, #32
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	200050ac 	.word	0x200050ac
 80035a0:	20005160 	.word	0x20005160
 80035a4:	200050b0 	.word	0x200050b0

080035a8 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08a      	sub	sp, #40	; 0x28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80035b6:	2301      	movs	r3, #1
 80035b8:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 80a1 	beq.w	8003704 <vTaskPriorityDisinheritAfterTimeout+0x15c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10a      	bne.n	80035e0 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 80035ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ce:	f383 8811 	msr	BASEPRI, r3
 80035d2:	f3bf 8f6f 	isb	sy
 80035d6:	f3bf 8f4f 	dsb	sy
 80035da:	613b      	str	r3, [r7, #16]
    }
 80035dc:	bf00      	nop
 80035de:	e7fe      	b.n	80035de <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d902      	bls.n	80035f0 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24
 80035ee:	e002      	b.n	80035f6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035fc:	429a      	cmp	r2, r3
 80035fe:	f000 8081 	beq.w	8003704 <vTaskPriorityDisinheritAfterTimeout+0x15c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	69fa      	ldr	r2, [r7, #28]
 8003608:	429a      	cmp	r2, r3
 800360a:	d17b      	bne.n	8003704 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800360c:	4b3f      	ldr	r3, [pc, #252]	; (800370c <vTaskPriorityDisinheritAfterTimeout+0x164>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6a3a      	ldr	r2, [r7, #32]
 8003612:	429a      	cmp	r2, r3
 8003614:	d10a      	bne.n	800362c <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 8003616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361a:	f383 8811 	msr	BASEPRI, r3
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	f3bf 8f4f 	dsb	sy
 8003626:	60fb      	str	r3, [r7, #12]
    }
 8003628:	bf00      	nop
 800362a:	e7fe      	b.n	800362a <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003636:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	2b00      	cmp	r3, #0
 800363e:	db04      	blt.n	800364a <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	f1c3 0205 	rsb	r2, r3, #5
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	6959      	ldr	r1, [r3, #20]
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4613      	mov	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4a2d      	ldr	r2, [pc, #180]	; (8003710 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800365a:	4413      	add	r3, r2
 800365c:	4299      	cmp	r1, r3
 800365e:	d151      	bne.n	8003704 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	3304      	adds	r3, #4
 8003664:	4618      	mov	r0, r3
 8003666:	f7fd ff55 	bl	8001514 <uxListRemove>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10a      	bne.n	8003686 <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	2201      	movs	r2, #1
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43da      	mvns	r2, r3
 800367c:	4b25      	ldr	r3, [pc, #148]	; (8003714 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4013      	ands	r3, r2
 8003682:	4a24      	ldr	r2, [pc, #144]	; (8003714 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8003684:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	2201      	movs	r2, #1
 800368c:	409a      	lsls	r2, r3
 800368e:	4b21      	ldr	r3, [pc, #132]	; (8003714 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4313      	orrs	r3, r2
 8003694:	4a1f      	ldr	r2, [pc, #124]	; (8003714 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8003696:	6013      	str	r3, [r2, #0]
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800369c:	491c      	ldr	r1, [pc, #112]	; (8003710 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800369e:	4613      	mov	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	3304      	adds	r3, #4
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	609a      	str	r2, [r3, #8]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	60da      	str	r2, [r3, #12]
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	6a3a      	ldr	r2, [r7, #32]
 80036c2:	3204      	adds	r2, #4
 80036c4:	605a      	str	r2, [r3, #4]
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	1d1a      	adds	r2, r3, #4
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	609a      	str	r2, [r3, #8]
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4a0d      	ldr	r2, [pc, #52]	; (8003710 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 80036dc:	441a      	add	r2, r3
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	615a      	str	r2, [r3, #20]
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e6:	490a      	ldr	r1, [pc, #40]	; (8003710 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 80036e8:	4613      	mov	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	1c59      	adds	r1, r3, #1
 80036f6:	4806      	ldr	r0, [pc, #24]	; (8003710 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 80036f8:	4613      	mov	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4403      	add	r3, r0
 8003702:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003704:	bf00      	nop
 8003706:	3728      	adds	r7, #40	; 0x28
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	200050ac 	.word	0x200050ac
 8003710:	200050b0 	.word	0x200050b0
 8003714:	20005160 	.word	0x20005160

08003718 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800371c:	4b07      	ldr	r3, [pc, #28]	; (800373c <pvTaskIncrementMutexHeldCount+0x24>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d004      	beq.n	800372e <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8003724:	4b05      	ldr	r3, [pc, #20]	; (800373c <pvTaskIncrementMutexHeldCount+0x24>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800372a:	3201      	adds	r2, #1
 800372c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        return pxCurrentTCB;
 800372e:	4b03      	ldr	r3, [pc, #12]	; (800373c <pvTaskIncrementMutexHeldCount+0x24>)
 8003730:	681b      	ldr	r3, [r3, #0]
    }
 8003732:	4618      	mov	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	200050ac 	.word	0x200050ac

08003740 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800374a:	4b21      	ldr	r3, [pc, #132]	; (80037d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60fb      	str	r3, [r7, #12]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003750:	4b20      	ldr	r3, [pc, #128]	; (80037d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	3304      	adds	r3, #4
 8003756:	4618      	mov	r0, r3
 8003758:	f7fd fedc 	bl	8001514 <uxListRemove>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10b      	bne.n	800377a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003762:	4b1c      	ldr	r3, [pc, #112]	; (80037d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	2201      	movs	r2, #1
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	43da      	mvns	r2, r3
 8003770:	4b19      	ldr	r3, [pc, #100]	; (80037d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4013      	ands	r3, r2
 8003776:	4a18      	ldr	r2, [pc, #96]	; (80037d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8003778:	6013      	str	r3, [r2, #0]
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4413      	add	r3, r2
 8003780:	60bb      	str	r3, [r7, #8]

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003782:	4b14      	ldr	r3, [pc, #80]	; (80037d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	605a      	str	r2, [r3, #4]

        if( xTimeToWake < xConstTickCount )
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	429a      	cmp	r2, r3
 8003790:	d209      	bcs.n	80037a6 <prvAddCurrentTaskToDelayedList+0x66>
        {
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003792:	4b12      	ldr	r3, [pc, #72]	; (80037dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	4b0f      	ldr	r3, [pc, #60]	; (80037d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	3304      	adds	r3, #4
 800379c:	4619      	mov	r1, r3
 800379e:	4610      	mov	r0, r2
 80037a0:	f7fd fe7f 	bl	80014a2 <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80037a4:	e010      	b.n	80037c8 <prvAddCurrentTaskToDelayedList+0x88>
            vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037a6:	4b0e      	ldr	r3, [pc, #56]	; (80037e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	3304      	adds	r3, #4
 80037b0:	4619      	mov	r1, r3
 80037b2:	4610      	mov	r0, r2
 80037b4:	f7fd fe75 	bl	80014a2 <vListInsert>
            if( xTimeToWake < xNextTaskUnblockTime )
 80037b8:	4b0a      	ldr	r3, [pc, #40]	; (80037e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d202      	bcs.n	80037c8 <prvAddCurrentTaskToDelayedList+0x88>
                xNextTaskUnblockTime = xTimeToWake;
 80037c2:	4a08      	ldr	r2, [pc, #32]	; (80037e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	6013      	str	r3, [r2, #0]
}
 80037c8:	bf00      	nop
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	2000515c 	.word	0x2000515c
 80037d4:	200050ac 	.word	0x200050ac
 80037d8:	20005160 	.word	0x20005160
 80037dc:	20005140 	.word	0x20005140
 80037e0:	2000513c 	.word	0x2000513c
 80037e4:	20005178 	.word	0x20005178

080037e8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80037f2:	f000 fa47 	bl	8003c84 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80037f6:	4b11      	ldr	r3, [pc, #68]	; (800383c <xTimerCreateTimerTask+0x54>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <xTimerCreateTimerTask+0x2c>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80037fe:	4b10      	ldr	r3, [pc, #64]	; (8003840 <xTimerCreateTimerTask+0x58>)
 8003800:	9301      	str	r3, [sp, #4]
 8003802:	2303      	movs	r3, #3
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	2300      	movs	r3, #0
 8003808:	2280      	movs	r2, #128	; 0x80
 800380a:	490e      	ldr	r1, [pc, #56]	; (8003844 <xTimerCreateTimerTask+0x5c>)
 800380c:	480e      	ldr	r0, [pc, #56]	; (8003848 <xTimerCreateTimerTask+0x60>)
 800380e:	f7fe fec9 	bl	80025a4 <xTaskCreate>
 8003812:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10a      	bne.n	8003830 <xTimerCreateTimerTask+0x48>
        __asm volatile
 800381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	603b      	str	r3, [r7, #0]
    }
 800382c:	bf00      	nop
 800382e:	e7fe      	b.n	800382e <xTimerCreateTimerTask+0x46>
        return xReturn;
 8003830:	687b      	ldr	r3, [r7, #4]
    }
 8003832:	4618      	mov	r0, r3
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	200051b4 	.word	0x200051b4
 8003840:	200051b8 	.word	0x200051b8
 8003844:	08003dc0 	.word	0x08003dc0
 8003848:	080038f1 	.word	0x080038f1

0800384c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003858:	e008      	b.n	800386c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	4413      	add	r3, r2
 8003862:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	699a      	ldr	r2, [r3, #24]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	18d1      	adds	r1, r2, r3
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f8dd 	bl	8003a38 <prvInsertTimerInActiveList>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1ea      	bne.n	800385a <prvReloadTimer+0xe>
        }
    }
 8003884:	bf00      	nop
 8003886:	bf00      	nop
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
	...

08003890 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800389a:	4b14      	ldr	r3, [pc, #80]	; (80038ec <prvProcessExpiredTimer+0x5c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	3304      	adds	r3, #4
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fd fe33 	bl	8001514 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f7ff ffc3 	bl	800384c <prvReloadTimer>
 80038c6:	e008      	b.n	80038da <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038ce:	f023 0301 	bic.w	r3, r3, #1
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	4798      	blx	r3
    }
 80038e2:	bf00      	nop
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	200051ac 	.word	0x200051ac

080038f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80038f8:	f107 0308 	add.w	r3, r7, #8
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 f857 	bl	80039b0 <prvGetNextExpireTime>
 8003902:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	4619      	mov	r1, r3
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 f803 	bl	8003914 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800390e:	f000 f8d5 	bl	8003abc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003912:	e7f1      	b.n	80038f8 <prvTimerTask+0x8>

08003914 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800391e:	f7ff f825 	bl	800296c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003922:	f107 0308 	add.w	r3, r7, #8
 8003926:	4618      	mov	r0, r3
 8003928:	f000 f866 	bl	80039f8 <prvSampleTimeNow>
 800392c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d130      	bne.n	8003996 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10a      	bne.n	8003950 <prvProcessTimerOrBlockTask+0x3c>
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	429a      	cmp	r2, r3
 8003940:	d806      	bhi.n	8003950 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003942:	f7ff f821 	bl	8002988 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003946:	68f9      	ldr	r1, [r7, #12]
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff ffa1 	bl	8003890 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800394e:	e024      	b.n	800399a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d008      	beq.n	8003968 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003956:	4b13      	ldr	r3, [pc, #76]	; (80039a4 <prvProcessTimerOrBlockTask+0x90>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <prvProcessTimerOrBlockTask+0x50>
 8003960:	2301      	movs	r3, #1
 8003962:	e000      	b.n	8003966 <prvProcessTimerOrBlockTask+0x52>
 8003964:	2300      	movs	r3, #0
 8003966:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003968:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <prvProcessTimerOrBlockTask+0x94>)
 800396a:	6818      	ldr	r0, [r3, #0]
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	4619      	mov	r1, r3
 8003976:	f7fe fde1 	bl	800253c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800397a:	f7ff f805 	bl	8002988 <xTaskResumeAll>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10a      	bne.n	800399a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003984:	4b09      	ldr	r3, [pc, #36]	; (80039ac <prvProcessTimerOrBlockTask+0x98>)
 8003986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	f3bf 8f6f 	isb	sy
    }
 8003994:	e001      	b.n	800399a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003996:	f7fe fff7 	bl	8002988 <xTaskResumeAll>
    }
 800399a:	bf00      	nop
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	200051b0 	.word	0x200051b0
 80039a8:	200051b4 	.word	0x200051b4
 80039ac:	e000ed04 	.word	0xe000ed04

080039b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80039b8:	4b0e      	ldr	r3, [pc, #56]	; (80039f4 <prvGetNextExpireTime+0x44>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <prvGetNextExpireTime+0x16>
 80039c2:	2201      	movs	r2, #1
 80039c4:	e000      	b.n	80039c8 <prvGetNextExpireTime+0x18>
 80039c6:	2200      	movs	r2, #0
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d105      	bne.n	80039e0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80039d4:	4b07      	ldr	r3, [pc, #28]	; (80039f4 <prvGetNextExpireTime+0x44>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	e001      	b.n	80039e4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80039e4:	68fb      	ldr	r3, [r7, #12]
    }
 80039e6:	4618      	mov	r0, r3
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	200051ac 	.word	0x200051ac

080039f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003a00:	f7ff f8be 	bl	8002b80 <xTaskGetTickCount>
 8003a04:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003a06:	4b0b      	ldr	r3, [pc, #44]	; (8003a34 <prvSampleTimeNow+0x3c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d205      	bcs.n	8003a1c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003a10:	f000 f912 	bl	8003c38 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	e002      	b.n	8003a22 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003a22:	4a04      	ldr	r2, [pc, #16]	; (8003a34 <prvSampleTimeNow+0x3c>)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003a28:	68fb      	ldr	r3, [r7, #12]
    }
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	200051bc 	.word	0x200051bc

08003a38 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003a46:	2300      	movs	r3, #0
 8003a48:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d812      	bhi.n	8003a84 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	1ad2      	subs	r2, r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d302      	bcc.n	8003a72 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	e01b      	b.n	8003aaa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003a72:	4b10      	ldr	r3, [pc, #64]	; (8003ab4 <prvInsertTimerInActiveList+0x7c>)
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	f7fd fd10 	bl	80014a2 <vListInsert>
 8003a82:	e012      	b.n	8003aaa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d206      	bcs.n	8003a9a <prvInsertTimerInActiveList+0x62>
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d302      	bcc.n	8003a9a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003a94:	2301      	movs	r3, #1
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	e007      	b.n	8003aaa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a9a:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <prvInsertTimerInActiveList+0x80>)
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4610      	mov	r0, r2
 8003aa6:	f7fd fcfc 	bl	80014a2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003aaa:	697b      	ldr	r3, [r7, #20]
    }
 8003aac:	4618      	mov	r0, r3
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	200051b0 	.word	0x200051b0
 8003ab8:	200051ac 	.word	0x200051ac

08003abc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ac2:	e0a6      	b.n	8003c12 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f2c0 80a2 	blt.w	8003c10 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d004      	beq.n	8003ae2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	3304      	adds	r3, #4
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fd fd19 	bl	8001514 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ae2:	1d3b      	adds	r3, r7, #4
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff ff87 	bl	80039f8 <prvSampleTimeNow>
 8003aea:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	2b08      	cmp	r3, #8
 8003af2:	f200 808e 	bhi.w	8003c12 <prvProcessReceivedCommands+0x156>
 8003af6:	a201      	add	r2, pc, #4	; (adr r2, 8003afc <prvProcessReceivedCommands+0x40>)
 8003af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afc:	08003b21 	.word	0x08003b21
 8003b00:	08003b21 	.word	0x08003b21
 8003b04:	08003b89 	.word	0x08003b89
 8003b08:	08003b9d 	.word	0x08003b9d
 8003b0c:	08003be7 	.word	0x08003be7
 8003b10:	08003b21 	.word	0x08003b21
 8003b14:	08003b21 	.word	0x08003b21
 8003b18:	08003b89 	.word	0x08003b89
 8003b1c:	08003b9d 	.word	0x08003b9d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	18d1      	adds	r1, r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	69f8      	ldr	r0, [r7, #28]
 8003b40:	f7ff ff7a 	bl	8003a38 <prvInsertTimerInActiveList>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d063      	beq.n	8003c12 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d009      	beq.n	8003b6c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	4413      	add	r3, r2
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	4619      	mov	r1, r3
 8003b64:	69f8      	ldr	r0, [r7, #28]
 8003b66:	f7ff fe71 	bl	800384c <prvReloadTimer>
 8003b6a:	e008      	b.n	8003b7e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b72:	f023 0301 	bic.w	r3, r3, #1
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	69f8      	ldr	r0, [r7, #28]
 8003b84:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003b86:	e044      	b.n	8003c12 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b8e:	f023 0301 	bic.w	r3, r3, #1
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        break;
 8003b9a:	e03a      	b.n	8003c12 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ba2:	f043 0301 	orr.w	r3, r3, #1
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10a      	bne.n	8003bd2 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc0:	f383 8811 	msr	BASEPRI, r3
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	617b      	str	r3, [r7, #20]
    }
 8003bce:	bf00      	nop
 8003bd0:	e7fe      	b.n	8003bd0 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	699a      	ldr	r2, [r3, #24]
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	18d1      	adds	r1, r2, r3
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	69f8      	ldr	r0, [r7, #28]
 8003be0:	f7ff ff2a 	bl	8003a38 <prvInsertTimerInActiveList>
                        break;
 8003be4:	e015      	b.n	8003c12 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d103      	bne.n	8003bfc <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003bf4:	69f8      	ldr	r0, [r7, #28]
 8003bf6:	f7fd fb15 	bl	8001224 <vPortFree>
 8003bfa:	e00a      	b.n	8003c12 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c02:	f023 0301 	bic.w	r3, r3, #1
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003c0e:	e000      	b.n	8003c12 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003c10:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c12:	4b08      	ldr	r3, [pc, #32]	; (8003c34 <prvProcessReceivedCommands+0x178>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f107 0108 	add.w	r1, r7, #8
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7fe f987 	bl	8001f30 <xQueueReceive>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f47f af4d 	bne.w	8003ac4 <prvProcessReceivedCommands+0x8>
        }
    }
 8003c2a:	bf00      	nop
 8003c2c:	bf00      	nop
 8003c2e:	3720      	adds	r7, #32
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	200051b4 	.word	0x200051b4

08003c38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c3e:	e009      	b.n	8003c54 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c40:	4b0e      	ldr	r3, [pc, #56]	; (8003c7c <prvSwitchTimerLists+0x44>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003c4a:	f04f 31ff 	mov.w	r1, #4294967295
 8003c4e:	6838      	ldr	r0, [r7, #0]
 8003c50:	f7ff fe1e 	bl	8003890 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c54:	4b09      	ldr	r3, [pc, #36]	; (8003c7c <prvSwitchTimerLists+0x44>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1f0      	bne.n	8003c40 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003c5e:	4b07      	ldr	r3, [pc, #28]	; (8003c7c <prvSwitchTimerLists+0x44>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003c64:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <prvSwitchTimerLists+0x48>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a04      	ldr	r2, [pc, #16]	; (8003c7c <prvSwitchTimerLists+0x44>)
 8003c6a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003c6c:	4a04      	ldr	r2, [pc, #16]	; (8003c80 <prvSwitchTimerLists+0x48>)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6013      	str	r3, [r2, #0]
    }
 8003c72:	bf00      	nop
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	200051ac 	.word	0x200051ac
 8003c80:	200051b0 	.word	0x200051b0

08003c84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003c88:	f7fd fe7e 	bl	8001988 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003c8c:	4b0d      	ldr	r3, [pc, #52]	; (8003cc4 <prvCheckForValidListAndQueue+0x40>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d113      	bne.n	8003cbc <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 8003c94:	480c      	ldr	r0, [pc, #48]	; (8003cc8 <prvCheckForValidListAndQueue+0x44>)
 8003c96:	f7fd fbd7 	bl	8001448 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003c9a:	480c      	ldr	r0, [pc, #48]	; (8003ccc <prvCheckForValidListAndQueue+0x48>)
 8003c9c:	f7fd fbd4 	bl	8001448 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <prvCheckForValidListAndQueue+0x4c>)
 8003ca2:	4a09      	ldr	r2, [pc, #36]	; (8003cc8 <prvCheckForValidListAndQueue+0x44>)
 8003ca4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003ca6:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <prvCheckForValidListAndQueue+0x50>)
 8003ca8:	4a08      	ldr	r2, [pc, #32]	; (8003ccc <prvCheckForValidListAndQueue+0x48>)
 8003caa:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003cac:	2200      	movs	r2, #0
 8003cae:	210c      	movs	r1, #12
 8003cb0:	2005      	movs	r0, #5
 8003cb2:	f7fd ffd1 	bl	8001c58 <xQueueGenericCreate>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	4a02      	ldr	r2, [pc, #8]	; (8003cc4 <prvCheckForValidListAndQueue+0x40>)
 8003cba:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003cbc:	f7fd fe94 	bl	80019e8 <vPortExitCritical>
    }
 8003cc0:	bf00      	nop
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	200051b4 	.word	0x200051b4
 8003cc8:	20005184 	.word	0x20005184
 8003ccc:	20005198 	.word	0x20005198
 8003cd0:	200051ac 	.word	0x200051ac
 8003cd4:	200051b0 	.word	0x200051b0

08003cd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003cd8:	480d      	ldr	r0, [pc, #52]	; (8003d10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003cda:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003cdc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ce0:	480c      	ldr	r0, [pc, #48]	; (8003d14 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ce2:	490d      	ldr	r1, [pc, #52]	; (8003d18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ce4:	4a0d      	ldr	r2, [pc, #52]	; (8003d1c <LoopForever+0xe>)
  movs r3, #0
 8003ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ce8:	e002      	b.n	8003cf0 <LoopCopyDataInit>

08003cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cee:	3304      	adds	r3, #4

08003cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cf4:	d3f9      	bcc.n	8003cea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cf6:	4a0a      	ldr	r2, [pc, #40]	; (8003d20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003cf8:	4c0a      	ldr	r4, [pc, #40]	; (8003d24 <LoopForever+0x16>)
  movs r3, #0
 8003cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cfc:	e001      	b.n	8003d02 <LoopFillZerobss>

08003cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d00:	3204      	adds	r2, #4

08003d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d04:	d3fb      	bcc.n	8003cfe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003d06:	f000 f811 	bl	8003d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003d0a:	f7fd fcb1 	bl	8001670 <main>

08003d0e <LoopForever>:

LoopForever:
  b LoopForever
 8003d0e:	e7fe      	b.n	8003d0e <LoopForever>
  ldr   r0, =_estack
 8003d10:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d18:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8003d1c:	08003dd0 	.word	0x08003dd0
  ldr r2, =_sbss
 8003d20:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8003d24:	200051c0 	.word	0x200051c0

08003d28 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003d28:	e7fe      	b.n	8003d28 <ADC_IRQHandler>
	...

08003d2c <__libc_init_array>:
 8003d2c:	b570      	push	{r4, r5, r6, lr}
 8003d2e:	4d0d      	ldr	r5, [pc, #52]	; (8003d64 <__libc_init_array+0x38>)
 8003d30:	4c0d      	ldr	r4, [pc, #52]	; (8003d68 <__libc_init_array+0x3c>)
 8003d32:	1b64      	subs	r4, r4, r5
 8003d34:	10a4      	asrs	r4, r4, #2
 8003d36:	2600      	movs	r6, #0
 8003d38:	42a6      	cmp	r6, r4
 8003d3a:	d109      	bne.n	8003d50 <__libc_init_array+0x24>
 8003d3c:	4d0b      	ldr	r5, [pc, #44]	; (8003d6c <__libc_init_array+0x40>)
 8003d3e:	4c0c      	ldr	r4, [pc, #48]	; (8003d70 <__libc_init_array+0x44>)
 8003d40:	f000 f82e 	bl	8003da0 <_init>
 8003d44:	1b64      	subs	r4, r4, r5
 8003d46:	10a4      	asrs	r4, r4, #2
 8003d48:	2600      	movs	r6, #0
 8003d4a:	42a6      	cmp	r6, r4
 8003d4c:	d105      	bne.n	8003d5a <__libc_init_array+0x2e>
 8003d4e:	bd70      	pop	{r4, r5, r6, pc}
 8003d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d54:	4798      	blx	r3
 8003d56:	3601      	adds	r6, #1
 8003d58:	e7ee      	b.n	8003d38 <__libc_init_array+0xc>
 8003d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d5e:	4798      	blx	r3
 8003d60:	3601      	adds	r6, #1
 8003d62:	e7f2      	b.n	8003d4a <__libc_init_array+0x1e>
 8003d64:	08003dc8 	.word	0x08003dc8
 8003d68:	08003dc8 	.word	0x08003dc8
 8003d6c:	08003dc8 	.word	0x08003dc8
 8003d70:	08003dcc 	.word	0x08003dcc

08003d74 <memcpy>:
 8003d74:	440a      	add	r2, r1
 8003d76:	4291      	cmp	r1, r2
 8003d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d7c:	d100      	bne.n	8003d80 <memcpy+0xc>
 8003d7e:	4770      	bx	lr
 8003d80:	b510      	push	{r4, lr}
 8003d82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d8a:	4291      	cmp	r1, r2
 8003d8c:	d1f9      	bne.n	8003d82 <memcpy+0xe>
 8003d8e:	bd10      	pop	{r4, pc}

08003d90 <memset>:
 8003d90:	4402      	add	r2, r0
 8003d92:	4603      	mov	r3, r0
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d100      	bne.n	8003d9a <memset+0xa>
 8003d98:	4770      	bx	lr
 8003d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d9e:	e7f9      	b.n	8003d94 <memset+0x4>

08003da0 <_init>:
 8003da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da2:	bf00      	nop
 8003da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003da6:	bc08      	pop	{r3}
 8003da8:	469e      	mov	lr, r3
 8003daa:	4770      	bx	lr

08003dac <_fini>:
 8003dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dae:	bf00      	nop
 8003db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003db2:	bc08      	pop	{r3}
 8003db4:	469e      	mov	lr, r3
 8003db6:	4770      	bx	lr
