
10-IR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001258  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080013ec  080013ec  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080013ec  080013ec  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080013ec  080013ec  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013ec  080013ec  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013ec  080013ec  000113ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013f0  080013f0  000113f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080013f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000001c  08001410  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08001410  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000026e1  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008c4  00000000  00000000  0002272d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000298  00000000  00000000  00022ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000220  00000000  00000000  00023290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000011b5  00000000  00000000  000234b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003ac8  00000000  00000000  00024665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000989a  00000000  00000000  0002812d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000319c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000008f8  00000000  00000000  00031a18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000001c 	.word	0x2000001c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080013d4 	.word	0x080013d4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000020 	.word	0x20000020
 80001d0:	080013d4 	.word	0x080013d4

080001d4 <ParseFrame>:

static uint8_t Global_u8counter=0;
static uint8_t Global_u8firstTimeFlag=0;

void ParseFrame()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
	MSTK_vStopTimer();
 80001da:	f001 f841 	bl	8001260 <MSTK_vStopTimer>
	for(uint8_t local_u8i=0;local_u8i<8;local_u8i++)
 80001de:	2300      	movs	r3, #0
 80001e0:	71fb      	strb	r3, [r7, #7]
 80001e2:	e041      	b.n	8000268 <ParseFrame+0x94>
	{
		if (Results[17+local_u8i] >=2000 && Results[17+local_u8i] <=2600)
 80001e4:	79fb      	ldrb	r3, [r7, #7]
 80001e6:	3311      	adds	r3, #17
 80001e8:	4a26      	ldr	r2, [pc, #152]	; (8000284 <ParseFrame+0xb0>)
 80001ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001ee:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80001f2:	d318      	bcc.n	8000226 <ParseFrame+0x52>
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	3311      	adds	r3, #17
 80001f8:	4a22      	ldr	r2, [pc, #136]	; (8000284 <ParseFrame+0xb0>)
 80001fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001fe:	f640 2228 	movw	r2, #2600	; 0xa28
 8000202:	4293      	cmp	r3, r2
 8000204:	d80f      	bhi.n	8000226 <ParseFrame+0x52>
		{
			CLEAR_BIT(data,local_u8i);
 8000206:	79fb      	ldrb	r3, [r7, #7]
 8000208:	2201      	movs	r2, #1
 800020a:	fa02 f303 	lsl.w	r3, r2, r3
 800020e:	b25b      	sxtb	r3, r3
 8000210:	43db      	mvns	r3, r3
 8000212:	b25a      	sxtb	r2, r3
 8000214:	4b1c      	ldr	r3, [pc, #112]	; (8000288 <ParseFrame+0xb4>)
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	b25b      	sxtb	r3, r3
 800021a:	4013      	ands	r3, r2
 800021c:	b25b      	sxtb	r3, r3
 800021e:	b2da      	uxtb	r2, r3
 8000220:	4b19      	ldr	r3, [pc, #100]	; (8000288 <ParseFrame+0xb4>)
 8000222:	701a      	strb	r2, [r3, #0]
 8000224:	e01d      	b.n	8000262 <ParseFrame+0x8e>
		}
		else if (Results[17+local_u8i] >=4000 && Results[17+local_u8i] <=5000)
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	3311      	adds	r3, #17
 800022a:	4a16      	ldr	r2, [pc, #88]	; (8000284 <ParseFrame+0xb0>)
 800022c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000230:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000234:	d315      	bcc.n	8000262 <ParseFrame+0x8e>
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	3311      	adds	r3, #17
 800023a:	4a12      	ldr	r2, [pc, #72]	; (8000284 <ParseFrame+0xb0>)
 800023c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000240:	f241 3288 	movw	r2, #5000	; 0x1388
 8000244:	4293      	cmp	r3, r2
 8000246:	d80c      	bhi.n	8000262 <ParseFrame+0x8e>
		{
			SET_BIT(data,local_u8i);
 8000248:	79fb      	ldrb	r3, [r7, #7]
 800024a:	2201      	movs	r2, #1
 800024c:	fa02 f303 	lsl.w	r3, r2, r3
 8000250:	b25a      	sxtb	r2, r3
 8000252:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <ParseFrame+0xb4>)
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	b25b      	sxtb	r3, r3
 8000258:	4313      	orrs	r3, r2
 800025a:	b25b      	sxtb	r3, r3
 800025c:	b2da      	uxtb	r2, r3
 800025e:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <ParseFrame+0xb4>)
 8000260:	701a      	strb	r2, [r3, #0]
	for(uint8_t local_u8i=0;local_u8i<8;local_u8i++)
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	3301      	adds	r3, #1
 8000266:	71fb      	strb	r3, [r7, #7]
 8000268:	79fb      	ldrb	r3, [r7, #7]
 800026a:	2b07      	cmp	r3, #7
 800026c:	d9ba      	bls.n	80001e4 <ParseFrame+0x10>

		}
	}

	Global_u8counter=0;
 800026e:	4b07      	ldr	r3, [pc, #28]	; (800028c <ParseFrame+0xb8>)
 8000270:	2200      	movs	r2, #0
 8000272:	701a      	strb	r2, [r3, #0]
	Global_u8firstTimeFlag=0;
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <ParseFrame+0xbc>)
 8000276:	2200      	movs	r2, #0
 8000278:	701a      	strb	r2, [r3, #0]
}
 800027a:	bf00      	nop
 800027c:	3708      	adds	r7, #8
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	20000038 	.word	0x20000038
 8000288:	200000bc 	.word	0x200000bc
 800028c:	200000bd 	.word	0x200000bd
 8000290:	200000be 	.word	0x200000be

08000294 <GetFrame>:

void GetFrame()
{
 8000294:	b598      	push	{r3, r4, r7, lr}
 8000296:	af00      	add	r7, sp, #0

	if (Global_u8firstTimeFlag == 0)
 8000298:	4b11      	ldr	r3, [pc, #68]	; (80002e0 <GetFrame+0x4c>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d108      	bne.n	80002b2 <GetFrame+0x1e>
	{
		Global_u8firstTimeFlag=1;
 80002a0:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <GetFrame+0x4c>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	701a      	strb	r2, [r3, #0]
		MSTK_vSetIntervalSingle(30000,ParseFrame);
 80002a6:	490f      	ldr	r1, [pc, #60]	; (80002e4 <GetFrame+0x50>)
 80002a8:	f247 5030 	movw	r0, #30000	; 0x7530
 80002ac:	f000 ffea 	bl	8001284 <MSTK_vSetIntervalSingle>
 80002b0:	e011      	b.n	80002d6 <GetFrame+0x42>


	}
	else
	{
		Results[Global_u8counter++]=MSTK_vGetElapsedTime();
 80002b2:	4b0d      	ldr	r3, [pc, #52]	; (80002e8 <GetFrame+0x54>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	1c5a      	adds	r2, r3, #1
 80002b8:	b2d1      	uxtb	r1, r2
 80002ba:	4a0b      	ldr	r2, [pc, #44]	; (80002e8 <GetFrame+0x54>)
 80002bc:	7011      	strb	r1, [r2, #0]
 80002be:	461c      	mov	r4, r3
 80002c0:	f001 f804 	bl	80012cc <MSTK_vGetElapsedTime>
 80002c4:	4603      	mov	r3, r0
 80002c6:	4a09      	ldr	r2, [pc, #36]	; (80002ec <GetFrame+0x58>)
 80002c8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		MSTK_vSetIntervalSingle(30000,ParseFrame);
 80002cc:	4905      	ldr	r1, [pc, #20]	; (80002e4 <GetFrame+0x50>)
 80002ce:	f247 5030 	movw	r0, #30000	; 0x7530
 80002d2:	f000 ffd7 	bl	8001284 <MSTK_vSetIntervalSingle>

	}
	MEXTI_vClearInterruptTrigger(EXTI_LINE_0);
 80002d6:	2000      	movs	r0, #0
 80002d8:	f000 f8b6 	bl	8000448 <MEXTI_vClearInterruptTrigger>

}
 80002dc:	bf00      	nop
 80002de:	bd98      	pop	{r3, r4, r7, pc}
 80002e0:	200000be 	.word	0x200000be
 80002e4:	080001d5 	.word	0x080001d5
 80002e8:	200000bd 	.word	0x200000bd
 80002ec:	20000038 	.word	0x20000038

080002f0 <IR_Init>:
void IR_Init()
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	RCC_APB2EnableCLK(SYSCFGEN);
 80002f4:	200e      	movs	r0, #14
 80002f6:	f000 ff69 	bl	80011cc <RCC_APB2EnableCLK>
	MSTK_vInit();
 80002fa:	f000 ff9b 	bl	8001234 <MSTK_vInit>
	MEXTI_vSetCallBack(EXTI_LINE_0,GetFrame);
 80002fe:	4908      	ldr	r1, [pc, #32]	; (8000320 <IR_Init+0x30>)
 8000300:	2000      	movs	r0, #0
 8000302:	f000 f8f3 	bl	80004ec <MEXTI_vSetCallBack>
	MEXTI_vSetFallingTrigger(EXTI_LINE_0);
 8000306:	2000      	movs	r0, #0
 8000308:	f000 f86c 	bl	80003e4 <MEXTI_vSetFallingTrigger>
	MEXTI_vSetEXTI_LineOnPort(EXTI_LINE_0,EXTI_PORTA);
 800030c:	2100      	movs	r1, #0
 800030e:	2000      	movs	r0, #0
 8000310:	f000 f8b2 	bl	8000478 <MEXTI_vSetEXTI_LineOnPort>
	MEXTI_vSetInterruptMask(EXTI_LINE_0,EXTI_NotMasked);
 8000314:	2101      	movs	r1, #1
 8000316:	2000      	movs	r0, #0
 8000318:	f000 f828 	bl	800036c <MEXTI_vSetInterruptMask>

}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}
 8000320:	08000295 	.word	0x08000295

08000324 <EXTI0_IRQHandler>:
#include "RCC_Interface.h"

EXTI_Callback_t Global_EXTICallBack[16];

void EXTI0_IRQHandler(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	//if (Global_EXTICallBack[0] != NULL)
	Global_EXTICallBack[0]();
 8000328:	4b05      	ldr	r3, [pc, #20]	; (8000340 <EXTI0_IRQHandler+0x1c>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4798      	blx	r3
	SET_BIT(MEXTI->EXTI_PR,EXTI_LINE_0);
 800032e:	4b05      	ldr	r3, [pc, #20]	; (8000344 <EXTI0_IRQHandler+0x20>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	4a04      	ldr	r2, [pc, #16]	; (8000344 <EXTI0_IRQHandler+0x20>)
 8000334:	f043 0301 	orr.w	r3, r3, #1
 8000338:	6153      	str	r3, [r2, #20]
}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	200000c0 	.word	0x200000c0
 8000344:	40013c00 	.word	0x40013c00

08000348 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
//	if (Global_EXTICallBack[1] != NULL)
	Global_EXTICallBack[1]();
 800034c:	4b05      	ldr	r3, [pc, #20]	; (8000364 <EXTI1_IRQHandler+0x1c>)
 800034e:	685b      	ldr	r3, [r3, #4]
 8000350:	4798      	blx	r3
	SET_BIT(MEXTI->EXTI_PR,EXTI_LINE_1);
 8000352:	4b05      	ldr	r3, [pc, #20]	; (8000368 <EXTI1_IRQHandler+0x20>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	4a04      	ldr	r2, [pc, #16]	; (8000368 <EXTI1_IRQHandler+0x20>)
 8000358:	f043 0302 	orr.w	r3, r3, #2
 800035c:	6153      	str	r3, [r2, #20]

}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	200000c0 	.word	0x200000c0
 8000368:	40013c00 	.word	0x40013c00

0800036c <MEXTI_vSetInterruptMask>:
{
	RCC_APB2EnableCLK(SYSCFGEN);
}

void MEXTI_vSetInterruptMask(EXTI_Line_t copy_eEXTI_Line,EXTI_Masking_t copy_eEXTI_Masking)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	4603      	mov	r3, r0
 8000374:	460a      	mov	r2, r1
 8000376:	71fb      	strb	r3, [r7, #7]
 8000378:	4613      	mov	r3, r2
 800037a:	71bb      	strb	r3, [r7, #6]
	switch(copy_eEXTI_Masking)
 800037c:	79bb      	ldrb	r3, [r7, #6]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d002      	beq.n	8000388 <MEXTI_vSetInterruptMask+0x1c>
 8000382:	2b01      	cmp	r3, #1
 8000384:	d010      	beq.n	80003a8 <MEXTI_vSetInterruptMask+0x3c>
		MEXTI->EXTI_IMR&= ~(1<<copy_eEXTI_Line);
		MEXTI->EXTI_IMR|=  (1<<copy_eEXTI_Line);
		break;

	}
}
 8000386:	e025      	b.n	80003d4 <MEXTI_vSetInterruptMask+0x68>
		MEXTI->EXTI_IMR&= ~(1<<copy_eEXTI_Line);
 8000388:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <MEXTI_vSetInterruptMask+0x74>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	79fa      	ldrb	r2, [r7, #7]
 800038e:	2101      	movs	r1, #1
 8000390:	fa01 f202 	lsl.w	r2, r1, r2
 8000394:	43d2      	mvns	r2, r2
 8000396:	4611      	mov	r1, r2
 8000398:	4a11      	ldr	r2, [pc, #68]	; (80003e0 <MEXTI_vSetInterruptMask+0x74>)
 800039a:	400b      	ands	r3, r1
 800039c:	6013      	str	r3, [r2, #0]
		MEXTI->EXTI_IMR|=  (0<<copy_eEXTI_Line);
 800039e:	4b10      	ldr	r3, [pc, #64]	; (80003e0 <MEXTI_vSetInterruptMask+0x74>)
 80003a0:	4a0f      	ldr	r2, [pc, #60]	; (80003e0 <MEXTI_vSetInterruptMask+0x74>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	6013      	str	r3, [r2, #0]
		break;
 80003a6:	e015      	b.n	80003d4 <MEXTI_vSetInterruptMask+0x68>
		MEXTI->EXTI_IMR&= ~(1<<copy_eEXTI_Line);
 80003a8:	4b0d      	ldr	r3, [pc, #52]	; (80003e0 <MEXTI_vSetInterruptMask+0x74>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	79fa      	ldrb	r2, [r7, #7]
 80003ae:	2101      	movs	r1, #1
 80003b0:	fa01 f202 	lsl.w	r2, r1, r2
 80003b4:	43d2      	mvns	r2, r2
 80003b6:	4611      	mov	r1, r2
 80003b8:	4a09      	ldr	r2, [pc, #36]	; (80003e0 <MEXTI_vSetInterruptMask+0x74>)
 80003ba:	400b      	ands	r3, r1
 80003bc:	6013      	str	r3, [r2, #0]
		MEXTI->EXTI_IMR|=  (1<<copy_eEXTI_Line);
 80003be:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <MEXTI_vSetInterruptMask+0x74>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	79fa      	ldrb	r2, [r7, #7]
 80003c4:	2101      	movs	r1, #1
 80003c6:	fa01 f202 	lsl.w	r2, r1, r2
 80003ca:	4611      	mov	r1, r2
 80003cc:	4a04      	ldr	r2, [pc, #16]	; (80003e0 <MEXTI_vSetInterruptMask+0x74>)
 80003ce:	430b      	orrs	r3, r1
 80003d0:	6013      	str	r3, [r2, #0]
		break;
 80003d2:	bf00      	nop
}
 80003d4:	bf00      	nop
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	40013c00 	.word	0x40013c00

080003e4 <MEXTI_vSetFallingTrigger>:
	//disable Falling
	MEXTI->EXTI_FTSR&= ~(1<<copy_eEXTI_Line);
	MEXTI->EXTI_FTSR|=  (0<<copy_eEXTI_Line);
}
void MEXTI_vSetFallingTrigger(EXTI_Line_t copy_eEXTI_Line)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]
	//Enable Falling
	MEXTI->EXTI_FTSR&= ~(1<<copy_eEXTI_Line);
 80003ee:	4b15      	ldr	r3, [pc, #84]	; (8000444 <MEXTI_vSetFallingTrigger+0x60>)
 80003f0:	68db      	ldr	r3, [r3, #12]
 80003f2:	79fa      	ldrb	r2, [r7, #7]
 80003f4:	2101      	movs	r1, #1
 80003f6:	fa01 f202 	lsl.w	r2, r1, r2
 80003fa:	43d2      	mvns	r2, r2
 80003fc:	4611      	mov	r1, r2
 80003fe:	4a11      	ldr	r2, [pc, #68]	; (8000444 <MEXTI_vSetFallingTrigger+0x60>)
 8000400:	400b      	ands	r3, r1
 8000402:	60d3      	str	r3, [r2, #12]
	MEXTI->EXTI_FTSR|=  (1<<copy_eEXTI_Line);
 8000404:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <MEXTI_vSetFallingTrigger+0x60>)
 8000406:	68db      	ldr	r3, [r3, #12]
 8000408:	79fa      	ldrb	r2, [r7, #7]
 800040a:	2101      	movs	r1, #1
 800040c:	fa01 f202 	lsl.w	r2, r1, r2
 8000410:	4611      	mov	r1, r2
 8000412:	4a0c      	ldr	r2, [pc, #48]	; (8000444 <MEXTI_vSetFallingTrigger+0x60>)
 8000414:	430b      	orrs	r3, r1
 8000416:	60d3      	str	r3, [r2, #12]
	//disable Rising
	MEXTI->EXTI_RTSR&= ~(1<<copy_eEXTI_Line);
 8000418:	4b0a      	ldr	r3, [pc, #40]	; (8000444 <MEXTI_vSetFallingTrigger+0x60>)
 800041a:	689b      	ldr	r3, [r3, #8]
 800041c:	79fa      	ldrb	r2, [r7, #7]
 800041e:	2101      	movs	r1, #1
 8000420:	fa01 f202 	lsl.w	r2, r1, r2
 8000424:	43d2      	mvns	r2, r2
 8000426:	4611      	mov	r1, r2
 8000428:	4a06      	ldr	r2, [pc, #24]	; (8000444 <MEXTI_vSetFallingTrigger+0x60>)
 800042a:	400b      	ands	r3, r1
 800042c:	6093      	str	r3, [r2, #8]
	MEXTI->EXTI_RTSR|=  (0<<copy_eEXTI_Line);
 800042e:	4b05      	ldr	r3, [pc, #20]	; (8000444 <MEXTI_vSetFallingTrigger+0x60>)
 8000430:	4a04      	ldr	r2, [pc, #16]	; (8000444 <MEXTI_vSetFallingTrigger+0x60>)
 8000432:	689b      	ldr	r3, [r3, #8]
 8000434:	6093      	str	r3, [r2, #8]

}
 8000436:	bf00      	nop
 8000438:	370c      	adds	r7, #12
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	40013c00 	.word	0x40013c00

08000448 <MEXTI_vClearInterruptTrigger>:
	MEXTI->EXTI_SWIER&= ~(1<<copy_eEXTI_Line);
	MEXTI->EXTI_SWIER|=  (1<<copy_eEXTI_Line);

}
void MEXTI_vClearInterruptTrigger(EXTI_Line_t copy_eEXTI_Line)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	71fb      	strb	r3, [r7, #7]
	MEXTI->EXTI_PR|=  (1<<copy_eEXTI_Line);
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <MEXTI_vClearInterruptTrigger+0x2c>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	79fa      	ldrb	r2, [r7, #7]
 8000458:	2101      	movs	r1, #1
 800045a:	fa01 f202 	lsl.w	r2, r1, r2
 800045e:	4611      	mov	r1, r2
 8000460:	4a04      	ldr	r2, [pc, #16]	; (8000474 <MEXTI_vClearInterruptTrigger+0x2c>)
 8000462:	430b      	orrs	r3, r1
 8000464:	6153      	str	r3, [r2, #20]
}
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	40013c00 	.word	0x40013c00

08000478 <MEXTI_vSetEXTI_LineOnPort>:
void MEXTI_vSetEXTI_LineOnPort(EXTI_Line_t copy_eEXTI_Line,EXTI_EXTIPortCFG_t copy_eEXTI_EXTIPortCFG)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	460a      	mov	r2, r1
 8000482:	71fb      	strb	r3, [r7, #7]
 8000484:	4613      	mov	r3, r2
 8000486:	71bb      	strb	r3, [r7, #6]
	MSYSCFG->SYSCFG_EXTICR[copy_eEXTI_Line/4] &= ~( 0b1111<<((copy_eEXTI_Line%4)*4));
 8000488:	4a17      	ldr	r2, [pc, #92]	; (80004e8 <MEXTI_vSetEXTI_LineOnPort+0x70>)
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	089b      	lsrs	r3, r3, #2
 800048e:	b2d8      	uxtb	r0, r3
 8000490:	4603      	mov	r3, r0
 8000492:	3302      	adds	r3, #2
 8000494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000498:	79fa      	ldrb	r2, [r7, #7]
 800049a:	f002 0203 	and.w	r2, r2, #3
 800049e:	0092      	lsls	r2, r2, #2
 80004a0:	210f      	movs	r1, #15
 80004a2:	fa01 f202 	lsl.w	r2, r1, r2
 80004a6:	43d2      	mvns	r2, r2
 80004a8:	490f      	ldr	r1, [pc, #60]	; (80004e8 <MEXTI_vSetEXTI_LineOnPort+0x70>)
 80004aa:	401a      	ands	r2, r3
 80004ac:	1c83      	adds	r3, r0, #2
 80004ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	MSYSCFG->SYSCFG_EXTICR[copy_eEXTI_Line/4] |= copy_eEXTI_EXTIPortCFG<<((copy_eEXTI_Line%4)*4);
 80004b2:	4a0d      	ldr	r2, [pc, #52]	; (80004e8 <MEXTI_vSetEXTI_LineOnPort+0x70>)
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	089b      	lsrs	r3, r3, #2
 80004b8:	b2d8      	uxtb	r0, r3
 80004ba:	4603      	mov	r3, r0
 80004bc:	3302      	adds	r3, #2
 80004be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004c2:	79b9      	ldrb	r1, [r7, #6]
 80004c4:	79fa      	ldrb	r2, [r7, #7]
 80004c6:	f002 0203 	and.w	r2, r2, #3
 80004ca:	0092      	lsls	r2, r2, #2
 80004cc:	fa01 f202 	lsl.w	r2, r1, r2
 80004d0:	4905      	ldr	r1, [pc, #20]	; (80004e8 <MEXTI_vSetEXTI_LineOnPort+0x70>)
 80004d2:	431a      	orrs	r2, r3
 80004d4:	1c83      	adds	r3, r0, #2
 80004d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	40013800 	.word	0x40013800

080004ec <MEXTI_vSetCallBack>:
void MEXTI_vSetCallBack(EXTI_Line_t copy_eEXTI_Line,EXTI_Callback_t copy_EXTI_Callback)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	6039      	str	r1, [r7, #0]
 80004f6:	71fb      	strb	r3, [r7, #7]
	Global_EXTICallBack[copy_eEXTI_Line]=copy_EXTI_Callback;
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	4905      	ldr	r1, [pc, #20]	; (8000510 <MEXTI_vSetCallBack+0x24>)
 80004fc:	683a      	ldr	r2, [r7, #0]
 80004fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	200000c0 	.word	0x200000c0

08000514 <MGPIO_Init>:
#include "GPIO_Interface.h"
#include "RCC_Interface.h"
#include "Utils.h"

void MGPIO_Init(GPIO_CFG_t* copy_GPIO_pCFG)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	RCC_AHB1EnableCLK(GPIOAEN);
 800051c:	2000      	movs	r0, #0
 800051e:	f000 fe3d 	bl	800119c <RCC_AHB1EnableCLK>
	RCC_AHB1EnableCLK(GPIOBEN);
 8000522:	2001      	movs	r0, #1
 8000524:	f000 fe3a 	bl	800119c <RCC_AHB1EnableCLK>

	MGPIO_vSetPinType(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_Type);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	7818      	ldrb	r0, [r3, #0]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	7859      	ldrb	r1, [r3, #1]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	789b      	ldrb	r3, [r3, #2]
 8000534:	461a      	mov	r2, r3
 8000536:	f000 f83b 	bl	80005b0 <MGPIO_vSetPinType>
	MGPIO_vSetOutputPinType(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_OType);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	7818      	ldrb	r0, [r3, #0]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	7859      	ldrb	r1, [r3, #1]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	791b      	ldrb	r3, [r3, #4]
 8000546:	461a      	mov	r2, r3
 8000548:	f000 f8f0 	bl	800072c <MGPIO_vSetOutputPinType>
	MGPIO_vSetOutputPinSpeed(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_OSpeed);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	7818      	ldrb	r0, [r3, #0]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	7859      	ldrb	r1, [r3, #1]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	795b      	ldrb	r3, [r3, #5]
 8000558:	461a      	mov	r2, r3
 800055a:	f000 f99b 	bl	8000894 <MGPIO_vSetOutputPinSpeed>
	MGPIO_vSetInputPinPullUpDown(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_IPullUpDown);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	7818      	ldrb	r0, [r3, #0]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	7859      	ldrb	r1, [r3, #1]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	799b      	ldrb	r3, [r3, #6]
 800056a:	461a      	mov	r2, r3
 800056c:	f000 fa50 	bl	8000a10 <MGPIO_vSetInputPinPullUpDown>
	MGPIO_vSetOutputPinValueBSR(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_OValue);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	7818      	ldrb	r0, [r3, #0]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	7859      	ldrb	r1, [r3, #1]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	78db      	ldrb	r3, [r3, #3]
 800057c:	461a      	mov	r2, r3
 800057e:	f000 fb05 	bl	8000b8c <MGPIO_vSetOutputPinValueBSR>
	MGPIO_vSetPinLockSTS(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_LCKSTS);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	7818      	ldrb	r0, [r3, #0]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	7859      	ldrb	r1, [r3, #1]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	79db      	ldrb	r3, [r3, #7]
 800058e:	461a      	mov	r2, r3
 8000590:	f000 fbe4 	bl	8000d5c <MGPIO_vSetPinLockSTS>
	MGPIO_vSetPinAlternativeFunction(copy_GPIO_pCFG->PIN_Port,copy_GPIO_pCFG->PIN_Number,copy_GPIO_pCFG->PIN_AF);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	7818      	ldrb	r0, [r3, #0]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	7859      	ldrb	r1, [r3, #1]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	7a1b      	ldrb	r3, [r3, #8]
 80005a0:	461a      	mov	r2, r3
 80005a2:	f000 fc8d 	bl	8000ec0 <MGPIO_vSetPinAlternativeFunction>


}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <MGPIO_vSetPinType>:

void MGPIO_vSetPinType(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_PinType_t copy_eGPIO_PinType)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
 80005ba:	460b      	mov	r3, r1
 80005bc:	71bb      	strb	r3, [r7, #6]
 80005be:	4613      	mov	r3, r2
 80005c0:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	2b05      	cmp	r3, #5
 80005c6:	f200 809f 	bhi.w	8000708 <MGPIO_vSetPinType+0x158>
 80005ca:	a201      	add	r2, pc, #4	; (adr r2, 80005d0 <MGPIO_vSetPinType+0x20>)
 80005cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d0:	080005e9 	.word	0x080005e9
 80005d4:	08000619 	.word	0x08000619
 80005d8:	08000649 	.word	0x08000649
 80005dc:	08000679 	.word	0x08000679
 80005e0:	080006a9 	.word	0x080006a9
 80005e4:	080006d9 	.word	0x080006d9
	{
	case PORTA:
		GPIOA->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 80005e8:	4b4a      	ldr	r3, [pc, #296]	; (8000714 <MGPIO_vSetPinType+0x164>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	79ba      	ldrb	r2, [r7, #6]
 80005ee:	0052      	lsls	r2, r2, #1
 80005f0:	2103      	movs	r1, #3
 80005f2:	fa01 f202 	lsl.w	r2, r1, r2
 80005f6:	43d2      	mvns	r2, r2
 80005f8:	4611      	mov	r1, r2
 80005fa:	4a46      	ldr	r2, [pc, #280]	; (8000714 <MGPIO_vSetPinType+0x164>)
 80005fc:	400b      	ands	r3, r1
 80005fe:	6013      	str	r3, [r2, #0]
		GPIOA->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 8000600:	4b44      	ldr	r3, [pc, #272]	; (8000714 <MGPIO_vSetPinType+0x164>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	7979      	ldrb	r1, [r7, #5]
 8000606:	79ba      	ldrb	r2, [r7, #6]
 8000608:	0052      	lsls	r2, r2, #1
 800060a:	fa01 f202 	lsl.w	r2, r1, r2
 800060e:	4611      	mov	r1, r2
 8000610:	4a40      	ldr	r2, [pc, #256]	; (8000714 <MGPIO_vSetPinType+0x164>)
 8000612:	430b      	orrs	r3, r1
 8000614:	6013      	str	r3, [r2, #0]
		break;
 8000616:	e077      	b.n	8000708 <MGPIO_vSetPinType+0x158>
	case PORTB:
		GPIOB->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 8000618:	4b3f      	ldr	r3, [pc, #252]	; (8000718 <MGPIO_vSetPinType+0x168>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	79ba      	ldrb	r2, [r7, #6]
 800061e:	0052      	lsls	r2, r2, #1
 8000620:	2103      	movs	r1, #3
 8000622:	fa01 f202 	lsl.w	r2, r1, r2
 8000626:	43d2      	mvns	r2, r2
 8000628:	4611      	mov	r1, r2
 800062a:	4a3b      	ldr	r2, [pc, #236]	; (8000718 <MGPIO_vSetPinType+0x168>)
 800062c:	400b      	ands	r3, r1
 800062e:	6013      	str	r3, [r2, #0]
		GPIOB->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 8000630:	4b39      	ldr	r3, [pc, #228]	; (8000718 <MGPIO_vSetPinType+0x168>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	7979      	ldrb	r1, [r7, #5]
 8000636:	79ba      	ldrb	r2, [r7, #6]
 8000638:	0052      	lsls	r2, r2, #1
 800063a:	fa01 f202 	lsl.w	r2, r1, r2
 800063e:	4611      	mov	r1, r2
 8000640:	4a35      	ldr	r2, [pc, #212]	; (8000718 <MGPIO_vSetPinType+0x168>)
 8000642:	430b      	orrs	r3, r1
 8000644:	6013      	str	r3, [r2, #0]
		break;
 8000646:	e05f      	b.n	8000708 <MGPIO_vSetPinType+0x158>
	case PORTC:
		GPIOC->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 8000648:	4b34      	ldr	r3, [pc, #208]	; (800071c <MGPIO_vSetPinType+0x16c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	79ba      	ldrb	r2, [r7, #6]
 800064e:	0052      	lsls	r2, r2, #1
 8000650:	2103      	movs	r1, #3
 8000652:	fa01 f202 	lsl.w	r2, r1, r2
 8000656:	43d2      	mvns	r2, r2
 8000658:	4611      	mov	r1, r2
 800065a:	4a30      	ldr	r2, [pc, #192]	; (800071c <MGPIO_vSetPinType+0x16c>)
 800065c:	400b      	ands	r3, r1
 800065e:	6013      	str	r3, [r2, #0]
		GPIOC->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 8000660:	4b2e      	ldr	r3, [pc, #184]	; (800071c <MGPIO_vSetPinType+0x16c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	7979      	ldrb	r1, [r7, #5]
 8000666:	79ba      	ldrb	r2, [r7, #6]
 8000668:	0052      	lsls	r2, r2, #1
 800066a:	fa01 f202 	lsl.w	r2, r1, r2
 800066e:	4611      	mov	r1, r2
 8000670:	4a2a      	ldr	r2, [pc, #168]	; (800071c <MGPIO_vSetPinType+0x16c>)
 8000672:	430b      	orrs	r3, r1
 8000674:	6013      	str	r3, [r2, #0]
		break;
 8000676:	e047      	b.n	8000708 <MGPIO_vSetPinType+0x158>
	case PORTD:
		GPIOD->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 8000678:	4b29      	ldr	r3, [pc, #164]	; (8000720 <MGPIO_vSetPinType+0x170>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	79ba      	ldrb	r2, [r7, #6]
 800067e:	0052      	lsls	r2, r2, #1
 8000680:	2103      	movs	r1, #3
 8000682:	fa01 f202 	lsl.w	r2, r1, r2
 8000686:	43d2      	mvns	r2, r2
 8000688:	4611      	mov	r1, r2
 800068a:	4a25      	ldr	r2, [pc, #148]	; (8000720 <MGPIO_vSetPinType+0x170>)
 800068c:	400b      	ands	r3, r1
 800068e:	6013      	str	r3, [r2, #0]
		GPIOD->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 8000690:	4b23      	ldr	r3, [pc, #140]	; (8000720 <MGPIO_vSetPinType+0x170>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	7979      	ldrb	r1, [r7, #5]
 8000696:	79ba      	ldrb	r2, [r7, #6]
 8000698:	0052      	lsls	r2, r2, #1
 800069a:	fa01 f202 	lsl.w	r2, r1, r2
 800069e:	4611      	mov	r1, r2
 80006a0:	4a1f      	ldr	r2, [pc, #124]	; (8000720 <MGPIO_vSetPinType+0x170>)
 80006a2:	430b      	orrs	r3, r1
 80006a4:	6013      	str	r3, [r2, #0]
		break;
 80006a6:	e02f      	b.n	8000708 <MGPIO_vSetPinType+0x158>
	case PORTE:
		GPIOE->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 80006a8:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <MGPIO_vSetPinType+0x174>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	79ba      	ldrb	r2, [r7, #6]
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	2103      	movs	r1, #3
 80006b2:	fa01 f202 	lsl.w	r2, r1, r2
 80006b6:	43d2      	mvns	r2, r2
 80006b8:	4611      	mov	r1, r2
 80006ba:	4a1a      	ldr	r2, [pc, #104]	; (8000724 <MGPIO_vSetPinType+0x174>)
 80006bc:	400b      	ands	r3, r1
 80006be:	6013      	str	r3, [r2, #0]
		GPIOE->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 80006c0:	4b18      	ldr	r3, [pc, #96]	; (8000724 <MGPIO_vSetPinType+0x174>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	7979      	ldrb	r1, [r7, #5]
 80006c6:	79ba      	ldrb	r2, [r7, #6]
 80006c8:	0052      	lsls	r2, r2, #1
 80006ca:	fa01 f202 	lsl.w	r2, r1, r2
 80006ce:	4611      	mov	r1, r2
 80006d0:	4a14      	ldr	r2, [pc, #80]	; (8000724 <MGPIO_vSetPinType+0x174>)
 80006d2:	430b      	orrs	r3, r1
 80006d4:	6013      	str	r3, [r2, #0]
		break;
 80006d6:	e017      	b.n	8000708 <MGPIO_vSetPinType+0x158>
	case PORTH:
		GPIOH->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 80006d8:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MGPIO_vSetPinType+0x178>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	79ba      	ldrb	r2, [r7, #6]
 80006de:	0052      	lsls	r2, r2, #1
 80006e0:	2103      	movs	r1, #3
 80006e2:	fa01 f202 	lsl.w	r2, r1, r2
 80006e6:	43d2      	mvns	r2, r2
 80006e8:	4611      	mov	r1, r2
 80006ea:	4a0f      	ldr	r2, [pc, #60]	; (8000728 <MGPIO_vSetPinType+0x178>)
 80006ec:	400b      	ands	r3, r1
 80006ee:	6013      	str	r3, [r2, #0]
		GPIOH->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 80006f0:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <MGPIO_vSetPinType+0x178>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	7979      	ldrb	r1, [r7, #5]
 80006f6:	79ba      	ldrb	r2, [r7, #6]
 80006f8:	0052      	lsls	r2, r2, #1
 80006fa:	fa01 f202 	lsl.w	r2, r1, r2
 80006fe:	4611      	mov	r1, r2
 8000700:	4a09      	ldr	r2, [pc, #36]	; (8000728 <MGPIO_vSetPinType+0x178>)
 8000702:	430b      	orrs	r3, r1
 8000704:	6013      	str	r3, [r2, #0]
		break;
 8000706:	bf00      	nop
	}
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	40020000 	.word	0x40020000
 8000718:	40020400 	.word	0x40020400
 800071c:	40020800 	.word	0x40020800
 8000720:	40020c00 	.word	0x40020c00
 8000724:	40021000 	.word	0x40021000
 8000728:	40021c00 	.word	0x40021c00

0800072c <MGPIO_vSetOutputPinType>:
void MGPIO_vSetOutputPinType(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_OType_t copy_GPIO_OType)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
 8000736:	460b      	mov	r3, r1
 8000738:	71bb      	strb	r3, [r7, #6]
 800073a:	4613      	mov	r3, r2
 800073c:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	2b05      	cmp	r3, #5
 8000742:	f200 8095 	bhi.w	8000870 <MGPIO_vSetOutputPinType+0x144>
 8000746:	a201      	add	r2, pc, #4	; (adr r2, 800074c <MGPIO_vSetOutputPinType+0x20>)
 8000748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800074c:	08000765 	.word	0x08000765
 8000750:	08000793 	.word	0x08000793
 8000754:	080007c1 	.word	0x080007c1
 8000758:	080007ed 	.word	0x080007ed
 800075c:	08000819 	.word	0x08000819
 8000760:	08000845 	.word	0x08000845
	{
	case PORTA:
		GPIOA->GPIO_OTYPER &= ~(0b1<<copy_eGPIO_Pin*2);
 8000764:	4b45      	ldr	r3, [pc, #276]	; (800087c <MGPIO_vSetOutputPinType+0x150>)
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	79ba      	ldrb	r2, [r7, #6]
 800076a:	0052      	lsls	r2, r2, #1
 800076c:	2101      	movs	r1, #1
 800076e:	fa01 f202 	lsl.w	r2, r1, r2
 8000772:	43d2      	mvns	r2, r2
 8000774:	4611      	mov	r1, r2
 8000776:	4a41      	ldr	r2, [pc, #260]	; (800087c <MGPIO_vSetOutputPinType+0x150>)
 8000778:	400b      	ands	r3, r1
 800077a:	6053      	str	r3, [r2, #4]
		GPIOA->GPIO_OTYPER |= (copy_GPIO_OType<<copy_eGPIO_Pin);
 800077c:	4b3f      	ldr	r3, [pc, #252]	; (800087c <MGPIO_vSetOutputPinType+0x150>)
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	7979      	ldrb	r1, [r7, #5]
 8000782:	79ba      	ldrb	r2, [r7, #6]
 8000784:	fa01 f202 	lsl.w	r2, r1, r2
 8000788:	4611      	mov	r1, r2
 800078a:	4a3c      	ldr	r2, [pc, #240]	; (800087c <MGPIO_vSetOutputPinType+0x150>)
 800078c:	430b      	orrs	r3, r1
 800078e:	6053      	str	r3, [r2, #4]
		break;
 8000790:	e06e      	b.n	8000870 <MGPIO_vSetOutputPinType+0x144>
	case PORTB:
		GPIOB->GPIO_OTYPER &= ~(0b1<<copy_eGPIO_Pin*2);
 8000792:	4b3b      	ldr	r3, [pc, #236]	; (8000880 <MGPIO_vSetOutputPinType+0x154>)
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	79ba      	ldrb	r2, [r7, #6]
 8000798:	0052      	lsls	r2, r2, #1
 800079a:	2101      	movs	r1, #1
 800079c:	fa01 f202 	lsl.w	r2, r1, r2
 80007a0:	43d2      	mvns	r2, r2
 80007a2:	4611      	mov	r1, r2
 80007a4:	4a36      	ldr	r2, [pc, #216]	; (8000880 <MGPIO_vSetOutputPinType+0x154>)
 80007a6:	400b      	ands	r3, r1
 80007a8:	6053      	str	r3, [r2, #4]
		GPIOB->GPIO_OTYPER |= (copy_GPIO_OType<<copy_eGPIO_Pin);
 80007aa:	4b35      	ldr	r3, [pc, #212]	; (8000880 <MGPIO_vSetOutputPinType+0x154>)
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	7979      	ldrb	r1, [r7, #5]
 80007b0:	79ba      	ldrb	r2, [r7, #6]
 80007b2:	fa01 f202 	lsl.w	r2, r1, r2
 80007b6:	4611      	mov	r1, r2
 80007b8:	4a31      	ldr	r2, [pc, #196]	; (8000880 <MGPIO_vSetOutputPinType+0x154>)
 80007ba:	430b      	orrs	r3, r1
 80007bc:	6053      	str	r3, [r2, #4]
		break;
 80007be:	e057      	b.n	8000870 <MGPIO_vSetOutputPinType+0x144>
	case PORTC:
		GPIOC->GPIO_OTYPER &= ~(0b1<<copy_eGPIO_Pin);
 80007c0:	4b30      	ldr	r3, [pc, #192]	; (8000884 <MGPIO_vSetOutputPinType+0x158>)
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	79ba      	ldrb	r2, [r7, #6]
 80007c6:	2101      	movs	r1, #1
 80007c8:	fa01 f202 	lsl.w	r2, r1, r2
 80007cc:	43d2      	mvns	r2, r2
 80007ce:	4611      	mov	r1, r2
 80007d0:	4a2c      	ldr	r2, [pc, #176]	; (8000884 <MGPIO_vSetOutputPinType+0x158>)
 80007d2:	400b      	ands	r3, r1
 80007d4:	6053      	str	r3, [r2, #4]
		GPIOC->GPIO_OTYPER |= (copy_GPIO_OType<<copy_eGPIO_Pin);
 80007d6:	4b2b      	ldr	r3, [pc, #172]	; (8000884 <MGPIO_vSetOutputPinType+0x158>)
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	7979      	ldrb	r1, [r7, #5]
 80007dc:	79ba      	ldrb	r2, [r7, #6]
 80007de:	fa01 f202 	lsl.w	r2, r1, r2
 80007e2:	4611      	mov	r1, r2
 80007e4:	4a27      	ldr	r2, [pc, #156]	; (8000884 <MGPIO_vSetOutputPinType+0x158>)
 80007e6:	430b      	orrs	r3, r1
 80007e8:	6053      	str	r3, [r2, #4]
		break;
 80007ea:	e041      	b.n	8000870 <MGPIO_vSetOutputPinType+0x144>
	case PORTD:
		GPIOD->GPIO_OTYPER &= ~(0b1<<copy_eGPIO_Pin);
 80007ec:	4b26      	ldr	r3, [pc, #152]	; (8000888 <MGPIO_vSetOutputPinType+0x15c>)
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	79ba      	ldrb	r2, [r7, #6]
 80007f2:	2101      	movs	r1, #1
 80007f4:	fa01 f202 	lsl.w	r2, r1, r2
 80007f8:	43d2      	mvns	r2, r2
 80007fa:	4611      	mov	r1, r2
 80007fc:	4a22      	ldr	r2, [pc, #136]	; (8000888 <MGPIO_vSetOutputPinType+0x15c>)
 80007fe:	400b      	ands	r3, r1
 8000800:	6053      	str	r3, [r2, #4]
		GPIOD->GPIO_OTYPER |= (copy_GPIO_OType<<copy_eGPIO_Pin);
 8000802:	4b21      	ldr	r3, [pc, #132]	; (8000888 <MGPIO_vSetOutputPinType+0x15c>)
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	7979      	ldrb	r1, [r7, #5]
 8000808:	79ba      	ldrb	r2, [r7, #6]
 800080a:	fa01 f202 	lsl.w	r2, r1, r2
 800080e:	4611      	mov	r1, r2
 8000810:	4a1d      	ldr	r2, [pc, #116]	; (8000888 <MGPIO_vSetOutputPinType+0x15c>)
 8000812:	430b      	orrs	r3, r1
 8000814:	6053      	str	r3, [r2, #4]
		break;
 8000816:	e02b      	b.n	8000870 <MGPIO_vSetOutputPinType+0x144>
	case PORTE:
		GPIOE->GPIO_OTYPER &= ~(0b1<<copy_eGPIO_Pin);
 8000818:	4b1c      	ldr	r3, [pc, #112]	; (800088c <MGPIO_vSetOutputPinType+0x160>)
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	79ba      	ldrb	r2, [r7, #6]
 800081e:	2101      	movs	r1, #1
 8000820:	fa01 f202 	lsl.w	r2, r1, r2
 8000824:	43d2      	mvns	r2, r2
 8000826:	4611      	mov	r1, r2
 8000828:	4a18      	ldr	r2, [pc, #96]	; (800088c <MGPIO_vSetOutputPinType+0x160>)
 800082a:	400b      	ands	r3, r1
 800082c:	6053      	str	r3, [r2, #4]
		GPIOE->GPIO_OTYPER |= (copy_GPIO_OType<<copy_eGPIO_Pin);
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <MGPIO_vSetOutputPinType+0x160>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	7979      	ldrb	r1, [r7, #5]
 8000834:	79ba      	ldrb	r2, [r7, #6]
 8000836:	fa01 f202 	lsl.w	r2, r1, r2
 800083a:	4611      	mov	r1, r2
 800083c:	4a13      	ldr	r2, [pc, #76]	; (800088c <MGPIO_vSetOutputPinType+0x160>)
 800083e:	430b      	orrs	r3, r1
 8000840:	6053      	str	r3, [r2, #4]
		break;
 8000842:	e015      	b.n	8000870 <MGPIO_vSetOutputPinType+0x144>
	case PORTH:
		GPIOH->GPIO_OTYPER &= ~(0b1<<copy_eGPIO_Pin);
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <MGPIO_vSetOutputPinType+0x164>)
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	79ba      	ldrb	r2, [r7, #6]
 800084a:	2101      	movs	r1, #1
 800084c:	fa01 f202 	lsl.w	r2, r1, r2
 8000850:	43d2      	mvns	r2, r2
 8000852:	4611      	mov	r1, r2
 8000854:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <MGPIO_vSetOutputPinType+0x164>)
 8000856:	400b      	ands	r3, r1
 8000858:	6053      	str	r3, [r2, #4]
		GPIOH->GPIO_OTYPER |= (copy_GPIO_OType<<copy_eGPIO_Pin);
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <MGPIO_vSetOutputPinType+0x164>)
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	7979      	ldrb	r1, [r7, #5]
 8000860:	79ba      	ldrb	r2, [r7, #6]
 8000862:	fa01 f202 	lsl.w	r2, r1, r2
 8000866:	4611      	mov	r1, r2
 8000868:	4a09      	ldr	r2, [pc, #36]	; (8000890 <MGPIO_vSetOutputPinType+0x164>)
 800086a:	430b      	orrs	r3, r1
 800086c:	6053      	str	r3, [r2, #4]
		break;
 800086e:	bf00      	nop
	}
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	40020000 	.word	0x40020000
 8000880:	40020400 	.word	0x40020400
 8000884:	40020800 	.word	0x40020800
 8000888:	40020c00 	.word	0x40020c00
 800088c:	40021000 	.word	0x40021000
 8000890:	40021c00 	.word	0x40021c00

08000894 <MGPIO_vSetOutputPinSpeed>:
void MGPIO_vSetOutputPinSpeed(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_OSpeed_t copy_GPIO_OSpeed)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
 800089e:	460b      	mov	r3, r1
 80008a0:	71bb      	strb	r3, [r7, #6]
 80008a2:	4613      	mov	r3, r2
 80008a4:	717b      	strb	r3, [r7, #5]

	switch (copy_eGPIO_Port)
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b05      	cmp	r3, #5
 80008aa:	f200 809f 	bhi.w	80009ec <MGPIO_vSetOutputPinSpeed+0x158>
 80008ae:	a201      	add	r2, pc, #4	; (adr r2, 80008b4 <MGPIO_vSetOutputPinSpeed+0x20>)
 80008b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b4:	080008cd 	.word	0x080008cd
 80008b8:	080008fd 	.word	0x080008fd
 80008bc:	0800092d 	.word	0x0800092d
 80008c0:	0800095d 	.word	0x0800095d
 80008c4:	0800098d 	.word	0x0800098d
 80008c8:	080009bd 	.word	0x080009bd
	{
	case PORTA:
		GPIOA->GPIO_OSPEEDR &= ~(0b11<<copy_eGPIO_Pin*2);
 80008cc:	4b4a      	ldr	r3, [pc, #296]	; (80009f8 <MGPIO_vSetOutputPinSpeed+0x164>)
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	79ba      	ldrb	r2, [r7, #6]
 80008d2:	0052      	lsls	r2, r2, #1
 80008d4:	2103      	movs	r1, #3
 80008d6:	fa01 f202 	lsl.w	r2, r1, r2
 80008da:	43d2      	mvns	r2, r2
 80008dc:	4611      	mov	r1, r2
 80008de:	4a46      	ldr	r2, [pc, #280]	; (80009f8 <MGPIO_vSetOutputPinSpeed+0x164>)
 80008e0:	400b      	ands	r3, r1
 80008e2:	6093      	str	r3, [r2, #8]
		GPIOA->GPIO_OSPEEDR |= (copy_GPIO_OSpeed<<copy_eGPIO_Pin*2);
 80008e4:	4b44      	ldr	r3, [pc, #272]	; (80009f8 <MGPIO_vSetOutputPinSpeed+0x164>)
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	7979      	ldrb	r1, [r7, #5]
 80008ea:	79ba      	ldrb	r2, [r7, #6]
 80008ec:	0052      	lsls	r2, r2, #1
 80008ee:	fa01 f202 	lsl.w	r2, r1, r2
 80008f2:	4611      	mov	r1, r2
 80008f4:	4a40      	ldr	r2, [pc, #256]	; (80009f8 <MGPIO_vSetOutputPinSpeed+0x164>)
 80008f6:	430b      	orrs	r3, r1
 80008f8:	6093      	str	r3, [r2, #8]
		break;
 80008fa:	e077      	b.n	80009ec <MGPIO_vSetOutputPinSpeed+0x158>
	case PORTB:
		GPIOB->GPIO_OSPEEDR &= ~(0b11<<copy_eGPIO_Pin*2);
 80008fc:	4b3f      	ldr	r3, [pc, #252]	; (80009fc <MGPIO_vSetOutputPinSpeed+0x168>)
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	79ba      	ldrb	r2, [r7, #6]
 8000902:	0052      	lsls	r2, r2, #1
 8000904:	2103      	movs	r1, #3
 8000906:	fa01 f202 	lsl.w	r2, r1, r2
 800090a:	43d2      	mvns	r2, r2
 800090c:	4611      	mov	r1, r2
 800090e:	4a3b      	ldr	r2, [pc, #236]	; (80009fc <MGPIO_vSetOutputPinSpeed+0x168>)
 8000910:	400b      	ands	r3, r1
 8000912:	6093      	str	r3, [r2, #8]
		GPIOB->GPIO_OSPEEDR |= (copy_GPIO_OSpeed<<copy_eGPIO_Pin*2);
 8000914:	4b39      	ldr	r3, [pc, #228]	; (80009fc <MGPIO_vSetOutputPinSpeed+0x168>)
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	7979      	ldrb	r1, [r7, #5]
 800091a:	79ba      	ldrb	r2, [r7, #6]
 800091c:	0052      	lsls	r2, r2, #1
 800091e:	fa01 f202 	lsl.w	r2, r1, r2
 8000922:	4611      	mov	r1, r2
 8000924:	4a35      	ldr	r2, [pc, #212]	; (80009fc <MGPIO_vSetOutputPinSpeed+0x168>)
 8000926:	430b      	orrs	r3, r1
 8000928:	6093      	str	r3, [r2, #8]
		break;
 800092a:	e05f      	b.n	80009ec <MGPIO_vSetOutputPinSpeed+0x158>
	case PORTC:
		GPIOC->GPIO_OSPEEDR &= ~(0b11<<copy_eGPIO_Pin*2);
 800092c:	4b34      	ldr	r3, [pc, #208]	; (8000a00 <MGPIO_vSetOutputPinSpeed+0x16c>)
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	79ba      	ldrb	r2, [r7, #6]
 8000932:	0052      	lsls	r2, r2, #1
 8000934:	2103      	movs	r1, #3
 8000936:	fa01 f202 	lsl.w	r2, r1, r2
 800093a:	43d2      	mvns	r2, r2
 800093c:	4611      	mov	r1, r2
 800093e:	4a30      	ldr	r2, [pc, #192]	; (8000a00 <MGPIO_vSetOutputPinSpeed+0x16c>)
 8000940:	400b      	ands	r3, r1
 8000942:	6093      	str	r3, [r2, #8]
		GPIOC->GPIO_OSPEEDR |= (copy_GPIO_OSpeed<<copy_eGPIO_Pin*2);
 8000944:	4b2e      	ldr	r3, [pc, #184]	; (8000a00 <MGPIO_vSetOutputPinSpeed+0x16c>)
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	7979      	ldrb	r1, [r7, #5]
 800094a:	79ba      	ldrb	r2, [r7, #6]
 800094c:	0052      	lsls	r2, r2, #1
 800094e:	fa01 f202 	lsl.w	r2, r1, r2
 8000952:	4611      	mov	r1, r2
 8000954:	4a2a      	ldr	r2, [pc, #168]	; (8000a00 <MGPIO_vSetOutputPinSpeed+0x16c>)
 8000956:	430b      	orrs	r3, r1
 8000958:	6093      	str	r3, [r2, #8]
		break;
 800095a:	e047      	b.n	80009ec <MGPIO_vSetOutputPinSpeed+0x158>
	case PORTD:
		GPIOD->GPIO_OSPEEDR &= ~(0b11<<copy_eGPIO_Pin*2);
 800095c:	4b29      	ldr	r3, [pc, #164]	; (8000a04 <MGPIO_vSetOutputPinSpeed+0x170>)
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	79ba      	ldrb	r2, [r7, #6]
 8000962:	0052      	lsls	r2, r2, #1
 8000964:	2103      	movs	r1, #3
 8000966:	fa01 f202 	lsl.w	r2, r1, r2
 800096a:	43d2      	mvns	r2, r2
 800096c:	4611      	mov	r1, r2
 800096e:	4a25      	ldr	r2, [pc, #148]	; (8000a04 <MGPIO_vSetOutputPinSpeed+0x170>)
 8000970:	400b      	ands	r3, r1
 8000972:	6093      	str	r3, [r2, #8]
		GPIOD->GPIO_OSPEEDR |= (copy_GPIO_OSpeed<<copy_eGPIO_Pin*2);
 8000974:	4b23      	ldr	r3, [pc, #140]	; (8000a04 <MGPIO_vSetOutputPinSpeed+0x170>)
 8000976:	689b      	ldr	r3, [r3, #8]
 8000978:	7979      	ldrb	r1, [r7, #5]
 800097a:	79ba      	ldrb	r2, [r7, #6]
 800097c:	0052      	lsls	r2, r2, #1
 800097e:	fa01 f202 	lsl.w	r2, r1, r2
 8000982:	4611      	mov	r1, r2
 8000984:	4a1f      	ldr	r2, [pc, #124]	; (8000a04 <MGPIO_vSetOutputPinSpeed+0x170>)
 8000986:	430b      	orrs	r3, r1
 8000988:	6093      	str	r3, [r2, #8]
		break;
 800098a:	e02f      	b.n	80009ec <MGPIO_vSetOutputPinSpeed+0x158>
	case PORTE:
		GPIOE->GPIO_OSPEEDR &= ~(0b11<<copy_eGPIO_Pin*2);
 800098c:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <MGPIO_vSetOutputPinSpeed+0x174>)
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	79ba      	ldrb	r2, [r7, #6]
 8000992:	0052      	lsls	r2, r2, #1
 8000994:	2103      	movs	r1, #3
 8000996:	fa01 f202 	lsl.w	r2, r1, r2
 800099a:	43d2      	mvns	r2, r2
 800099c:	4611      	mov	r1, r2
 800099e:	4a1a      	ldr	r2, [pc, #104]	; (8000a08 <MGPIO_vSetOutputPinSpeed+0x174>)
 80009a0:	400b      	ands	r3, r1
 80009a2:	6093      	str	r3, [r2, #8]
		GPIOE->GPIO_OSPEEDR |= (copy_GPIO_OSpeed<<copy_eGPIO_Pin*2);
 80009a4:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <MGPIO_vSetOutputPinSpeed+0x174>)
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	7979      	ldrb	r1, [r7, #5]
 80009aa:	79ba      	ldrb	r2, [r7, #6]
 80009ac:	0052      	lsls	r2, r2, #1
 80009ae:	fa01 f202 	lsl.w	r2, r1, r2
 80009b2:	4611      	mov	r1, r2
 80009b4:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <MGPIO_vSetOutputPinSpeed+0x174>)
 80009b6:	430b      	orrs	r3, r1
 80009b8:	6093      	str	r3, [r2, #8]
		break;
 80009ba:	e017      	b.n	80009ec <MGPIO_vSetOutputPinSpeed+0x158>
	case PORTH:
		GPIOH->GPIO_OSPEEDR &= ~(0b11<<copy_eGPIO_Pin*2);
 80009bc:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <MGPIO_vSetOutputPinSpeed+0x178>)
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	79ba      	ldrb	r2, [r7, #6]
 80009c2:	0052      	lsls	r2, r2, #1
 80009c4:	2103      	movs	r1, #3
 80009c6:	fa01 f202 	lsl.w	r2, r1, r2
 80009ca:	43d2      	mvns	r2, r2
 80009cc:	4611      	mov	r1, r2
 80009ce:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <MGPIO_vSetOutputPinSpeed+0x178>)
 80009d0:	400b      	ands	r3, r1
 80009d2:	6093      	str	r3, [r2, #8]
		GPIOH->GPIO_OSPEEDR |= (copy_GPIO_OSpeed<<copy_eGPIO_Pin*2);
 80009d4:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <MGPIO_vSetOutputPinSpeed+0x178>)
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	7979      	ldrb	r1, [r7, #5]
 80009da:	79ba      	ldrb	r2, [r7, #6]
 80009dc:	0052      	lsls	r2, r2, #1
 80009de:	fa01 f202 	lsl.w	r2, r1, r2
 80009e2:	4611      	mov	r1, r2
 80009e4:	4a09      	ldr	r2, [pc, #36]	; (8000a0c <MGPIO_vSetOutputPinSpeed+0x178>)
 80009e6:	430b      	orrs	r3, r1
 80009e8:	6093      	str	r3, [r2, #8]
		break;
 80009ea:	bf00      	nop
	}

}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	40020000 	.word	0x40020000
 80009fc:	40020400 	.word	0x40020400
 8000a00:	40020800 	.word	0x40020800
 8000a04:	40020c00 	.word	0x40020c00
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40021c00 	.word	0x40021c00

08000a10 <MGPIO_vSetInputPinPullUpDown>:
void MGPIO_vSetInputPinPullUpDown(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_PUPD_t copy_GPIO_PUPD)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	71bb      	strb	r3, [r7, #6]
 8000a1e:	4613      	mov	r3, r2
 8000a20:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	2b05      	cmp	r3, #5
 8000a26:	f200 809f 	bhi.w	8000b68 <MGPIO_vSetInputPinPullUpDown+0x158>
 8000a2a:	a201      	add	r2, pc, #4	; (adr r2, 8000a30 <MGPIO_vSetInputPinPullUpDown+0x20>)
 8000a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a30:	08000a49 	.word	0x08000a49
 8000a34:	08000a79 	.word	0x08000a79
 8000a38:	08000aa9 	.word	0x08000aa9
 8000a3c:	08000ad9 	.word	0x08000ad9
 8000a40:	08000b09 	.word	0x08000b09
 8000a44:	08000b39 	.word	0x08000b39
	{
	case PORTA:
		GPIOA->GPIO_PUPDR &= ~(0b11<<copy_eGPIO_Pin*2);
 8000a48:	4b4a      	ldr	r3, [pc, #296]	; (8000b74 <MGPIO_vSetInputPinPullUpDown+0x164>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	79ba      	ldrb	r2, [r7, #6]
 8000a4e:	0052      	lsls	r2, r2, #1
 8000a50:	2103      	movs	r1, #3
 8000a52:	fa01 f202 	lsl.w	r2, r1, r2
 8000a56:	43d2      	mvns	r2, r2
 8000a58:	4611      	mov	r1, r2
 8000a5a:	4a46      	ldr	r2, [pc, #280]	; (8000b74 <MGPIO_vSetInputPinPullUpDown+0x164>)
 8000a5c:	400b      	ands	r3, r1
 8000a5e:	60d3      	str	r3, [r2, #12]
		GPIOA->GPIO_PUPDR |= (copy_GPIO_PUPD<<copy_eGPIO_Pin*2);
 8000a60:	4b44      	ldr	r3, [pc, #272]	; (8000b74 <MGPIO_vSetInputPinPullUpDown+0x164>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	7979      	ldrb	r1, [r7, #5]
 8000a66:	79ba      	ldrb	r2, [r7, #6]
 8000a68:	0052      	lsls	r2, r2, #1
 8000a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4a40      	ldr	r2, [pc, #256]	; (8000b74 <MGPIO_vSetInputPinPullUpDown+0x164>)
 8000a72:	430b      	orrs	r3, r1
 8000a74:	60d3      	str	r3, [r2, #12]
		break;
 8000a76:	e077      	b.n	8000b68 <MGPIO_vSetInputPinPullUpDown+0x158>
	case PORTB:
		GPIOB->GPIO_PUPDR &= ~(0b11<<copy_eGPIO_Pin*2);
 8000a78:	4b3f      	ldr	r3, [pc, #252]	; (8000b78 <MGPIO_vSetInputPinPullUpDown+0x168>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	79ba      	ldrb	r2, [r7, #6]
 8000a7e:	0052      	lsls	r2, r2, #1
 8000a80:	2103      	movs	r1, #3
 8000a82:	fa01 f202 	lsl.w	r2, r1, r2
 8000a86:	43d2      	mvns	r2, r2
 8000a88:	4611      	mov	r1, r2
 8000a8a:	4a3b      	ldr	r2, [pc, #236]	; (8000b78 <MGPIO_vSetInputPinPullUpDown+0x168>)
 8000a8c:	400b      	ands	r3, r1
 8000a8e:	60d3      	str	r3, [r2, #12]
		GPIOB->GPIO_PUPDR |= (copy_GPIO_PUPD<<copy_eGPIO_Pin*2);
 8000a90:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <MGPIO_vSetInputPinPullUpDown+0x168>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	7979      	ldrb	r1, [r7, #5]
 8000a96:	79ba      	ldrb	r2, [r7, #6]
 8000a98:	0052      	lsls	r2, r2, #1
 8000a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	4a35      	ldr	r2, [pc, #212]	; (8000b78 <MGPIO_vSetInputPinPullUpDown+0x168>)
 8000aa2:	430b      	orrs	r3, r1
 8000aa4:	60d3      	str	r3, [r2, #12]
		break;
 8000aa6:	e05f      	b.n	8000b68 <MGPIO_vSetInputPinPullUpDown+0x158>
	case PORTC:
		GPIOC->GPIO_PUPDR &= ~(0b11<<copy_eGPIO_Pin*2);
 8000aa8:	4b34      	ldr	r3, [pc, #208]	; (8000b7c <MGPIO_vSetInputPinPullUpDown+0x16c>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	79ba      	ldrb	r2, [r7, #6]
 8000aae:	0052      	lsls	r2, r2, #1
 8000ab0:	2103      	movs	r1, #3
 8000ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab6:	43d2      	mvns	r2, r2
 8000ab8:	4611      	mov	r1, r2
 8000aba:	4a30      	ldr	r2, [pc, #192]	; (8000b7c <MGPIO_vSetInputPinPullUpDown+0x16c>)
 8000abc:	400b      	ands	r3, r1
 8000abe:	60d3      	str	r3, [r2, #12]
		GPIOC->GPIO_PUPDR |= (copy_GPIO_PUPD<<copy_eGPIO_Pin*2);
 8000ac0:	4b2e      	ldr	r3, [pc, #184]	; (8000b7c <MGPIO_vSetInputPinPullUpDown+0x16c>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	7979      	ldrb	r1, [r7, #5]
 8000ac6:	79ba      	ldrb	r2, [r7, #6]
 8000ac8:	0052      	lsls	r2, r2, #1
 8000aca:	fa01 f202 	lsl.w	r2, r1, r2
 8000ace:	4611      	mov	r1, r2
 8000ad0:	4a2a      	ldr	r2, [pc, #168]	; (8000b7c <MGPIO_vSetInputPinPullUpDown+0x16c>)
 8000ad2:	430b      	orrs	r3, r1
 8000ad4:	60d3      	str	r3, [r2, #12]
		break;
 8000ad6:	e047      	b.n	8000b68 <MGPIO_vSetInputPinPullUpDown+0x158>
	case PORTD:
		GPIOD->GPIO_PUPDR &= ~(0b11<<copy_eGPIO_Pin*2);
 8000ad8:	4b29      	ldr	r3, [pc, #164]	; (8000b80 <MGPIO_vSetInputPinPullUpDown+0x170>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	79ba      	ldrb	r2, [r7, #6]
 8000ade:	0052      	lsls	r2, r2, #1
 8000ae0:	2103      	movs	r1, #3
 8000ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae6:	43d2      	mvns	r2, r2
 8000ae8:	4611      	mov	r1, r2
 8000aea:	4a25      	ldr	r2, [pc, #148]	; (8000b80 <MGPIO_vSetInputPinPullUpDown+0x170>)
 8000aec:	400b      	ands	r3, r1
 8000aee:	60d3      	str	r3, [r2, #12]
		GPIOD->GPIO_PUPDR |= (copy_GPIO_PUPD<<copy_eGPIO_Pin*2);
 8000af0:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <MGPIO_vSetInputPinPullUpDown+0x170>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	7979      	ldrb	r1, [r7, #5]
 8000af6:	79ba      	ldrb	r2, [r7, #6]
 8000af8:	0052      	lsls	r2, r2, #1
 8000afa:	fa01 f202 	lsl.w	r2, r1, r2
 8000afe:	4611      	mov	r1, r2
 8000b00:	4a1f      	ldr	r2, [pc, #124]	; (8000b80 <MGPIO_vSetInputPinPullUpDown+0x170>)
 8000b02:	430b      	orrs	r3, r1
 8000b04:	60d3      	str	r3, [r2, #12]
		break;
 8000b06:	e02f      	b.n	8000b68 <MGPIO_vSetInputPinPullUpDown+0x158>
	case PORTE:
		GPIOE->GPIO_PUPDR &= ~(0b11<<copy_eGPIO_Pin*2);
 8000b08:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <MGPIO_vSetInputPinPullUpDown+0x174>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	79ba      	ldrb	r2, [r7, #6]
 8000b0e:	0052      	lsls	r2, r2, #1
 8000b10:	2103      	movs	r1, #3
 8000b12:	fa01 f202 	lsl.w	r2, r1, r2
 8000b16:	43d2      	mvns	r2, r2
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4a1a      	ldr	r2, [pc, #104]	; (8000b84 <MGPIO_vSetInputPinPullUpDown+0x174>)
 8000b1c:	400b      	ands	r3, r1
 8000b1e:	60d3      	str	r3, [r2, #12]
		GPIOE->GPIO_PUPDR |= (copy_GPIO_PUPD<<copy_eGPIO_Pin*2);
 8000b20:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <MGPIO_vSetInputPinPullUpDown+0x174>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	7979      	ldrb	r1, [r7, #5]
 8000b26:	79ba      	ldrb	r2, [r7, #6]
 8000b28:	0052      	lsls	r2, r2, #1
 8000b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b2e:	4611      	mov	r1, r2
 8000b30:	4a14      	ldr	r2, [pc, #80]	; (8000b84 <MGPIO_vSetInputPinPullUpDown+0x174>)
 8000b32:	430b      	orrs	r3, r1
 8000b34:	60d3      	str	r3, [r2, #12]
		break;
 8000b36:	e017      	b.n	8000b68 <MGPIO_vSetInputPinPullUpDown+0x158>
	case PORTH:
		GPIOH->GPIO_PUPDR &= ~(0b11<<copy_eGPIO_Pin*2);
 8000b38:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <MGPIO_vSetInputPinPullUpDown+0x178>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	79ba      	ldrb	r2, [r7, #6]
 8000b3e:	0052      	lsls	r2, r2, #1
 8000b40:	2103      	movs	r1, #3
 8000b42:	fa01 f202 	lsl.w	r2, r1, r2
 8000b46:	43d2      	mvns	r2, r2
 8000b48:	4611      	mov	r1, r2
 8000b4a:	4a0f      	ldr	r2, [pc, #60]	; (8000b88 <MGPIO_vSetInputPinPullUpDown+0x178>)
 8000b4c:	400b      	ands	r3, r1
 8000b4e:	60d3      	str	r3, [r2, #12]
		GPIOH->GPIO_PUPDR |= (copy_GPIO_PUPD<<copy_eGPIO_Pin*2);
 8000b50:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <MGPIO_vSetInputPinPullUpDown+0x178>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	7979      	ldrb	r1, [r7, #5]
 8000b56:	79ba      	ldrb	r2, [r7, #6]
 8000b58:	0052      	lsls	r2, r2, #1
 8000b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b5e:	4611      	mov	r1, r2
 8000b60:	4a09      	ldr	r2, [pc, #36]	; (8000b88 <MGPIO_vSetInputPinPullUpDown+0x178>)
 8000b62:	430b      	orrs	r3, r1
 8000b64:	60d3      	str	r3, [r2, #12]
		break;
 8000b66:	bf00      	nop
	}

}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	40020000 	.word	0x40020000
 8000b78:	40020400 	.word	0x40020400
 8000b7c:	40020800 	.word	0x40020800
 8000b80:	40020c00 	.word	0x40020c00
 8000b84:	40021000 	.word	0x40021000
 8000b88:	40021c00 	.word	0x40021c00

08000b8c <MGPIO_vSetOutputPinValueBSR>:
		}

	}

void MGPIO_vSetOutputPinValueBSR(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_BS_t copy_GPIO_BS)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
 8000b96:	460b      	mov	r3, r1
 8000b98:	71bb      	strb	r3, [r7, #6]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	2b05      	cmp	r3, #5
 8000ba2:	f200 80ca 	bhi.w	8000d3a <MGPIO_vSetOutputPinValueBSR+0x1ae>
 8000ba6:	a201      	add	r2, pc, #4	; (adr r2, 8000bac <MGPIO_vSetOutputPinValueBSR+0x20>)
 8000ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bac:	08000bc5 	.word	0x08000bc5
 8000bb0:	08000c01 	.word	0x08000c01
 8000bb4:	08000c3d 	.word	0x08000c3d
 8000bb8:	08000c77 	.word	0x08000c77
 8000bbc:	08000cb1 	.word	0x08000cb1
 8000bc0:	08000ceb 	.word	0x08000ceb
	{
	case PORTA:
		if (copy_GPIO_BS == SET)
 8000bc4:	797b      	ldrb	r3, [r7, #5]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d10a      	bne.n	8000be0 <MGPIO_vSetOutputPinValueBSR+0x54>
		{
			GPIOA->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8000bca:	4b5f      	ldr	r3, [pc, #380]	; (8000d48 <MGPIO_vSetOutputPinValueBSR+0x1bc>)
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	79ba      	ldrb	r2, [r7, #6]
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd6:	4611      	mov	r1, r2
 8000bd8:	4a5b      	ldr	r2, [pc, #364]	; (8000d48 <MGPIO_vSetOutputPinValueBSR+0x1bc>)
 8000bda:	430b      	orrs	r3, r1
 8000bdc:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOA->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}
		break;
 8000bde:	e0a1      	b.n	8000d24 <MGPIO_vSetOutputPinValueBSR+0x198>
		else if(copy_GPIO_BS == RESET)
 8000be0:	797b      	ldrb	r3, [r7, #5]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 809e 	bne.w	8000d24 <MGPIO_vSetOutputPinValueBSR+0x198>
			GPIOA->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000be8:	4b57      	ldr	r3, [pc, #348]	; (8000d48 <MGPIO_vSetOutputPinValueBSR+0x1bc>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	79ba      	ldrb	r2, [r7, #6]
 8000bee:	3210      	adds	r2, #16
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	4a53      	ldr	r2, [pc, #332]	; (8000d48 <MGPIO_vSetOutputPinValueBSR+0x1bc>)
 8000bfa:	430b      	orrs	r3, r1
 8000bfc:	6193      	str	r3, [r2, #24]
		break;
 8000bfe:	e091      	b.n	8000d24 <MGPIO_vSetOutputPinValueBSR+0x198>
	case PORTB:
		if (copy_GPIO_BS == SET)
 8000c00:	797b      	ldrb	r3, [r7, #5]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d10a      	bne.n	8000c1c <MGPIO_vSetOutputPinValueBSR+0x90>
		{
			GPIOB->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8000c06:	4b51      	ldr	r3, [pc, #324]	; (8000d4c <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	79ba      	ldrb	r2, [r7, #6]
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c12:	4611      	mov	r1, r2
 8000c14:	4a4d      	ldr	r2, [pc, #308]	; (8000d4c <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000c16:	430b      	orrs	r3, r1
 8000c18:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOB->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 8000c1a:	e085      	b.n	8000d28 <MGPIO_vSetOutputPinValueBSR+0x19c>
		else if(copy_GPIO_BS == RESET)
 8000c1c:	797b      	ldrb	r3, [r7, #5]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f040 8082 	bne.w	8000d28 <MGPIO_vSetOutputPinValueBSR+0x19c>
			GPIOB->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000c24:	4b49      	ldr	r3, [pc, #292]	; (8000d4c <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	79ba      	ldrb	r2, [r7, #6]
 8000c2a:	3210      	adds	r2, #16
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c32:	4611      	mov	r1, r2
 8000c34:	4a45      	ldr	r2, [pc, #276]	; (8000d4c <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000c36:	430b      	orrs	r3, r1
 8000c38:	6193      	str	r3, [r2, #24]
		}		break;
 8000c3a:	e075      	b.n	8000d28 <MGPIO_vSetOutputPinValueBSR+0x19c>
	case PORTC:
		if (copy_GPIO_BS == SET)
 8000c3c:	797b      	ldrb	r3, [r7, #5]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d10a      	bne.n	8000c58 <MGPIO_vSetOutputPinValueBSR+0xcc>
		{
			GPIOB->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8000c42:	4b42      	ldr	r3, [pc, #264]	; (8000d4c <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000c44:	699b      	ldr	r3, [r3, #24]
 8000c46:	79ba      	ldrb	r2, [r7, #6]
 8000c48:	2101      	movs	r1, #1
 8000c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4a3e      	ldr	r2, [pc, #248]	; (8000d4c <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000c52:	430b      	orrs	r3, r1
 8000c54:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOB->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 8000c56:	e069      	b.n	8000d2c <MGPIO_vSetOutputPinValueBSR+0x1a0>
		else if(copy_GPIO_BS == RESET)
 8000c58:	797b      	ldrb	r3, [r7, #5]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d166      	bne.n	8000d2c <MGPIO_vSetOutputPinValueBSR+0x1a0>
			GPIOB->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000c5e:	4b3b      	ldr	r3, [pc, #236]	; (8000d4c <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000c60:	699b      	ldr	r3, [r3, #24]
 8000c62:	79ba      	ldrb	r2, [r7, #6]
 8000c64:	3210      	adds	r2, #16
 8000c66:	2101      	movs	r1, #1
 8000c68:	fa01 f202 	lsl.w	r2, r1, r2
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	4a37      	ldr	r2, [pc, #220]	; (8000d4c <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000c70:	430b      	orrs	r3, r1
 8000c72:	6193      	str	r3, [r2, #24]
		}		break;
 8000c74:	e05a      	b.n	8000d2c <MGPIO_vSetOutputPinValueBSR+0x1a0>
	case PORTD:
		if (copy_GPIO_BS == SET)
 8000c76:	797b      	ldrb	r3, [r7, #5]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d10a      	bne.n	8000c92 <MGPIO_vSetOutputPinValueBSR+0x106>
		{
			GPIOD->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8000c7c:	4b34      	ldr	r3, [pc, #208]	; (8000d50 <MGPIO_vSetOutputPinValueBSR+0x1c4>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	79ba      	ldrb	r2, [r7, #6]
 8000c82:	2101      	movs	r1, #1
 8000c84:	fa01 f202 	lsl.w	r2, r1, r2
 8000c88:	4611      	mov	r1, r2
 8000c8a:	4a31      	ldr	r2, [pc, #196]	; (8000d50 <MGPIO_vSetOutputPinValueBSR+0x1c4>)
 8000c8c:	430b      	orrs	r3, r1
 8000c8e:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOD->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 8000c90:	e04e      	b.n	8000d30 <MGPIO_vSetOutputPinValueBSR+0x1a4>
		else if(copy_GPIO_BS == RESET)
 8000c92:	797b      	ldrb	r3, [r7, #5]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14b      	bne.n	8000d30 <MGPIO_vSetOutputPinValueBSR+0x1a4>
			GPIOD->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000c98:	4b2d      	ldr	r3, [pc, #180]	; (8000d50 <MGPIO_vSetOutputPinValueBSR+0x1c4>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	79ba      	ldrb	r2, [r7, #6]
 8000c9e:	3210      	adds	r2, #16
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4a29      	ldr	r2, [pc, #164]	; (8000d50 <MGPIO_vSetOutputPinValueBSR+0x1c4>)
 8000caa:	430b      	orrs	r3, r1
 8000cac:	6193      	str	r3, [r2, #24]
		}		break;
 8000cae:	e03f      	b.n	8000d30 <MGPIO_vSetOutputPinValueBSR+0x1a4>
	case PORTE:
		if (copy_GPIO_BS == SET)
 8000cb0:	797b      	ldrb	r3, [r7, #5]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d10a      	bne.n	8000ccc <MGPIO_vSetOutputPinValueBSR+0x140>
		{
			GPIOE->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8000cb6:	4b27      	ldr	r3, [pc, #156]	; (8000d54 <MGPIO_vSetOutputPinValueBSR+0x1c8>)
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	79ba      	ldrb	r2, [r7, #6]
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	4a23      	ldr	r2, [pc, #140]	; (8000d54 <MGPIO_vSetOutputPinValueBSR+0x1c8>)
 8000cc6:	430b      	orrs	r3, r1
 8000cc8:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOE->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 8000cca:	e033      	b.n	8000d34 <MGPIO_vSetOutputPinValueBSR+0x1a8>
		else if(copy_GPIO_BS == RESET)
 8000ccc:	797b      	ldrb	r3, [r7, #5]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d130      	bne.n	8000d34 <MGPIO_vSetOutputPinValueBSR+0x1a8>
			GPIOE->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000cd2:	4b20      	ldr	r3, [pc, #128]	; (8000d54 <MGPIO_vSetOutputPinValueBSR+0x1c8>)
 8000cd4:	699b      	ldr	r3, [r3, #24]
 8000cd6:	79ba      	ldrb	r2, [r7, #6]
 8000cd8:	3210      	adds	r2, #16
 8000cda:	2101      	movs	r1, #1
 8000cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce0:	4611      	mov	r1, r2
 8000ce2:	4a1c      	ldr	r2, [pc, #112]	; (8000d54 <MGPIO_vSetOutputPinValueBSR+0x1c8>)
 8000ce4:	430b      	orrs	r3, r1
 8000ce6:	6193      	str	r3, [r2, #24]
		}		break;
 8000ce8:	e024      	b.n	8000d34 <MGPIO_vSetOutputPinValueBSR+0x1a8>
	case PORTH:
		if (copy_GPIO_BS == SET)
 8000cea:	797b      	ldrb	r3, [r7, #5]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d10a      	bne.n	8000d06 <MGPIO_vSetOutputPinValueBSR+0x17a>
		{
			GPIOH->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8000cf0:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <MGPIO_vSetOutputPinValueBSR+0x1cc>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	79ba      	ldrb	r2, [r7, #6]
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	4a16      	ldr	r2, [pc, #88]	; (8000d58 <MGPIO_vSetOutputPinValueBSR+0x1cc>)
 8000d00:	430b      	orrs	r3, r1
 8000d02:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOH->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 8000d04:	e018      	b.n	8000d38 <MGPIO_vSetOutputPinValueBSR+0x1ac>
		else if(copy_GPIO_BS == RESET)
 8000d06:	797b      	ldrb	r3, [r7, #5]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d115      	bne.n	8000d38 <MGPIO_vSetOutputPinValueBSR+0x1ac>
			GPIOH->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <MGPIO_vSetOutputPinValueBSR+0x1cc>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	79ba      	ldrb	r2, [r7, #6]
 8000d12:	3210      	adds	r2, #16
 8000d14:	2101      	movs	r1, #1
 8000d16:	fa01 f202 	lsl.w	r2, r1, r2
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <MGPIO_vSetOutputPinValueBSR+0x1cc>)
 8000d1e:	430b      	orrs	r3, r1
 8000d20:	6193      	str	r3, [r2, #24]
		}		break;
 8000d22:	e009      	b.n	8000d38 <MGPIO_vSetOutputPinValueBSR+0x1ac>
		break;
 8000d24:	bf00      	nop
 8000d26:	e008      	b.n	8000d3a <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 8000d28:	bf00      	nop
 8000d2a:	e006      	b.n	8000d3a <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 8000d2c:	bf00      	nop
 8000d2e:	e004      	b.n	8000d3a <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 8000d30:	bf00      	nop
 8000d32:	e002      	b.n	8000d3a <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 8000d34:	bf00      	nop
 8000d36:	e000      	b.n	8000d3a <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 8000d38:	bf00      	nop
	}

}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40020000 	.word	0x40020000
 8000d4c:	40020400 	.word	0x40020400
 8000d50:	40020c00 	.word	0x40020c00
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40021c00 	.word	0x40021c00

08000d5c <MGPIO_vSetPinLockSTS>:
void MGPIO_vSetPinLockSTS(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_LCK_t copy_GPIO_LCK)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
 8000d66:	460b      	mov	r3, r1
 8000d68:	71bb      	strb	r3, [r7, #6]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	2b05      	cmp	r3, #5
 8000d72:	f200 8093 	bhi.w	8000e9c <MGPIO_vSetPinLockSTS+0x140>
 8000d76:	a201      	add	r2, pc, #4	; (adr r2, 8000d7c <MGPIO_vSetPinLockSTS+0x20>)
 8000d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d7c:	08000d95 	.word	0x08000d95
 8000d80:	08000dc1 	.word	0x08000dc1
 8000d84:	08000ded 	.word	0x08000ded
 8000d88:	08000e19 	.word	0x08000e19
 8000d8c:	08000e45 	.word	0x08000e45
 8000d90:	08000e71 	.word	0x08000e71
	{
	case PORTA:
		GPIOA->GPIO_LCKR &= ~(0b1<<copy_eGPIO_Pin);
 8000d94:	4b44      	ldr	r3, [pc, #272]	; (8000ea8 <MGPIO_vSetPinLockSTS+0x14c>)
 8000d96:	69db      	ldr	r3, [r3, #28]
 8000d98:	79ba      	ldrb	r2, [r7, #6]
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000da0:	43d2      	mvns	r2, r2
 8000da2:	4611      	mov	r1, r2
 8000da4:	4a40      	ldr	r2, [pc, #256]	; (8000ea8 <MGPIO_vSetPinLockSTS+0x14c>)
 8000da6:	400b      	ands	r3, r1
 8000da8:	61d3      	str	r3, [r2, #28]
		GPIOA->GPIO_LCKR |= (copy_GPIO_LCK<<copy_eGPIO_Pin);
 8000daa:	4b3f      	ldr	r3, [pc, #252]	; (8000ea8 <MGPIO_vSetPinLockSTS+0x14c>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	7979      	ldrb	r1, [r7, #5]
 8000db0:	79ba      	ldrb	r2, [r7, #6]
 8000db2:	fa01 f202 	lsl.w	r2, r1, r2
 8000db6:	4611      	mov	r1, r2
 8000db8:	4a3b      	ldr	r2, [pc, #236]	; (8000ea8 <MGPIO_vSetPinLockSTS+0x14c>)
 8000dba:	430b      	orrs	r3, r1
 8000dbc:	61d3      	str	r3, [r2, #28]
		break;
 8000dbe:	e06d      	b.n	8000e9c <MGPIO_vSetPinLockSTS+0x140>
	case PORTB:
		GPIOB->GPIO_LCKR &= ~(0b1<<copy_eGPIO_Pin);
 8000dc0:	4b3a      	ldr	r3, [pc, #232]	; (8000eac <MGPIO_vSetPinLockSTS+0x150>)
 8000dc2:	69db      	ldr	r3, [r3, #28]
 8000dc4:	79ba      	ldrb	r2, [r7, #6]
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dcc:	43d2      	mvns	r2, r2
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4a36      	ldr	r2, [pc, #216]	; (8000eac <MGPIO_vSetPinLockSTS+0x150>)
 8000dd2:	400b      	ands	r3, r1
 8000dd4:	61d3      	str	r3, [r2, #28]
		GPIOB->GPIO_LCKR |= (copy_GPIO_LCK<<copy_eGPIO_Pin);
 8000dd6:	4b35      	ldr	r3, [pc, #212]	; (8000eac <MGPIO_vSetPinLockSTS+0x150>)
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	7979      	ldrb	r1, [r7, #5]
 8000ddc:	79ba      	ldrb	r2, [r7, #6]
 8000dde:	fa01 f202 	lsl.w	r2, r1, r2
 8000de2:	4611      	mov	r1, r2
 8000de4:	4a31      	ldr	r2, [pc, #196]	; (8000eac <MGPIO_vSetPinLockSTS+0x150>)
 8000de6:	430b      	orrs	r3, r1
 8000de8:	61d3      	str	r3, [r2, #28]
		break;
 8000dea:	e057      	b.n	8000e9c <MGPIO_vSetPinLockSTS+0x140>
	case PORTC:
		GPIOC->GPIO_LCKR &= ~(0b1<<copy_eGPIO_Pin);
 8000dec:	4b30      	ldr	r3, [pc, #192]	; (8000eb0 <MGPIO_vSetPinLockSTS+0x154>)
 8000dee:	69db      	ldr	r3, [r3, #28]
 8000df0:	79ba      	ldrb	r2, [r7, #6]
 8000df2:	2101      	movs	r1, #1
 8000df4:	fa01 f202 	lsl.w	r2, r1, r2
 8000df8:	43d2      	mvns	r2, r2
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4a2c      	ldr	r2, [pc, #176]	; (8000eb0 <MGPIO_vSetPinLockSTS+0x154>)
 8000dfe:	400b      	ands	r3, r1
 8000e00:	61d3      	str	r3, [r2, #28]
		GPIOC->GPIO_LCKR |= (copy_GPIO_LCK<<copy_eGPIO_Pin);
 8000e02:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <MGPIO_vSetPinLockSTS+0x154>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	7979      	ldrb	r1, [r7, #5]
 8000e08:	79ba      	ldrb	r2, [r7, #6]
 8000e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4a27      	ldr	r2, [pc, #156]	; (8000eb0 <MGPIO_vSetPinLockSTS+0x154>)
 8000e12:	430b      	orrs	r3, r1
 8000e14:	61d3      	str	r3, [r2, #28]
		break;
 8000e16:	e041      	b.n	8000e9c <MGPIO_vSetPinLockSTS+0x140>
	case PORTD:
		GPIOD->GPIO_LCKR &= ~(0b1<<copy_eGPIO_Pin);
 8000e18:	4b26      	ldr	r3, [pc, #152]	; (8000eb4 <MGPIO_vSetPinLockSTS+0x158>)
 8000e1a:	69db      	ldr	r3, [r3, #28]
 8000e1c:	79ba      	ldrb	r2, [r7, #6]
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fa01 f202 	lsl.w	r2, r1, r2
 8000e24:	43d2      	mvns	r2, r2
 8000e26:	4611      	mov	r1, r2
 8000e28:	4a22      	ldr	r2, [pc, #136]	; (8000eb4 <MGPIO_vSetPinLockSTS+0x158>)
 8000e2a:	400b      	ands	r3, r1
 8000e2c:	61d3      	str	r3, [r2, #28]
		GPIOD->GPIO_LCKR |= (copy_GPIO_LCK<<copy_eGPIO_Pin);
 8000e2e:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <MGPIO_vSetPinLockSTS+0x158>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	7979      	ldrb	r1, [r7, #5]
 8000e34:	79ba      	ldrb	r2, [r7, #6]
 8000e36:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4a1d      	ldr	r2, [pc, #116]	; (8000eb4 <MGPIO_vSetPinLockSTS+0x158>)
 8000e3e:	430b      	orrs	r3, r1
 8000e40:	61d3      	str	r3, [r2, #28]
		break;
 8000e42:	e02b      	b.n	8000e9c <MGPIO_vSetPinLockSTS+0x140>
	case PORTE:
		GPIOE->GPIO_LCKR &= ~(0b1<<copy_eGPIO_Pin);
 8000e44:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <MGPIO_vSetPinLockSTS+0x15c>)
 8000e46:	69db      	ldr	r3, [r3, #28]
 8000e48:	79ba      	ldrb	r2, [r7, #6]
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e50:	43d2      	mvns	r2, r2
 8000e52:	4611      	mov	r1, r2
 8000e54:	4a18      	ldr	r2, [pc, #96]	; (8000eb8 <MGPIO_vSetPinLockSTS+0x15c>)
 8000e56:	400b      	ands	r3, r1
 8000e58:	61d3      	str	r3, [r2, #28]
		GPIOE->GPIO_LCKR |= (copy_GPIO_LCK<<copy_eGPIO_Pin);
 8000e5a:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <MGPIO_vSetPinLockSTS+0x15c>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	7979      	ldrb	r1, [r7, #5]
 8000e60:	79ba      	ldrb	r2, [r7, #6]
 8000e62:	fa01 f202 	lsl.w	r2, r1, r2
 8000e66:	4611      	mov	r1, r2
 8000e68:	4a13      	ldr	r2, [pc, #76]	; (8000eb8 <MGPIO_vSetPinLockSTS+0x15c>)
 8000e6a:	430b      	orrs	r3, r1
 8000e6c:	61d3      	str	r3, [r2, #28]
		break;
 8000e6e:	e015      	b.n	8000e9c <MGPIO_vSetPinLockSTS+0x140>
	case PORTH:
		GPIOH->GPIO_LCKR &= ~(0b1<<copy_eGPIO_Pin);
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <MGPIO_vSetPinLockSTS+0x160>)
 8000e72:	69db      	ldr	r3, [r3, #28]
 8000e74:	79ba      	ldrb	r2, [r7, #6]
 8000e76:	2101      	movs	r1, #1
 8000e78:	fa01 f202 	lsl.w	r2, r1, r2
 8000e7c:	43d2      	mvns	r2, r2
 8000e7e:	4611      	mov	r1, r2
 8000e80:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <MGPIO_vSetPinLockSTS+0x160>)
 8000e82:	400b      	ands	r3, r1
 8000e84:	61d3      	str	r3, [r2, #28]
		GPIOH->GPIO_LCKR |= (copy_GPIO_LCK<<copy_eGPIO_Pin);
 8000e86:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <MGPIO_vSetPinLockSTS+0x160>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	7979      	ldrb	r1, [r7, #5]
 8000e8c:	79ba      	ldrb	r2, [r7, #6]
 8000e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e92:	4611      	mov	r1, r2
 8000e94:	4a09      	ldr	r2, [pc, #36]	; (8000ebc <MGPIO_vSetPinLockSTS+0x160>)
 8000e96:	430b      	orrs	r3, r1
 8000e98:	61d3      	str	r3, [r2, #28]
		break;
 8000e9a:	bf00      	nop
	}

}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	40020000 	.word	0x40020000
 8000eac:	40020400 	.word	0x40020400
 8000eb0:	40020800 	.word	0x40020800
 8000eb4:	40020c00 	.word	0x40020c00
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	40021c00 	.word	0x40021c00

08000ec0 <MGPIO_vSetPinAlternativeFunction>:
void MGPIO_vSetPinAlternativeFunction(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_AF_t copy_GPIO_AF)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	71bb      	strb	r3, [r7, #6]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	2b05      	cmp	r3, #5
 8000ed6:	f200 8129 	bhi.w	800112c <MGPIO_vSetPinAlternativeFunction+0x26c>
 8000eda:	a201      	add	r2, pc, #4	; (adr r2, 8000ee0 <MGPIO_vSetPinAlternativeFunction+0x20>)
 8000edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee0:	08000ef9 	.word	0x08000ef9
 8000ee4:	08000f57 	.word	0x08000f57
 8000ee8:	08000fb5 	.word	0x08000fb5
 8000eec:	08001013 	.word	0x08001013
 8000ef0:	08001071 	.word	0x08001071
 8000ef4:	080010cf 	.word	0x080010cf
	{
	case PORTA:
		if (copy_eGPIO_Pin<8)
 8000ef8:	79bb      	ldrb	r3, [r7, #6]
 8000efa:	2b07      	cmp	r3, #7
 8000efc:	d815      	bhi.n	8000f2a <MGPIO_vSetPinAlternativeFunction+0x6a>
		{
			GPIOA->GPIO_AFRL &= ~(0b1111<<copy_eGPIO_Pin);
 8000efe:	4b8e      	ldr	r3, [pc, #568]	; (8001138 <MGPIO_vSetPinAlternativeFunction+0x278>)
 8000f00:	6a1b      	ldr	r3, [r3, #32]
 8000f02:	79ba      	ldrb	r2, [r7, #6]
 8000f04:	210f      	movs	r1, #15
 8000f06:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0a:	43d2      	mvns	r2, r2
 8000f0c:	4611      	mov	r1, r2
 8000f0e:	4a8a      	ldr	r2, [pc, #552]	; (8001138 <MGPIO_vSetPinAlternativeFunction+0x278>)
 8000f10:	400b      	ands	r3, r1
 8000f12:	6213      	str	r3, [r2, #32]
			GPIOA->GPIO_AFRL |= (copy_GPIO_AF<<copy_eGPIO_Pin);
 8000f14:	4b88      	ldr	r3, [pc, #544]	; (8001138 <MGPIO_vSetPinAlternativeFunction+0x278>)
 8000f16:	6a1b      	ldr	r3, [r3, #32]
 8000f18:	7979      	ldrb	r1, [r7, #5]
 8000f1a:	79ba      	ldrb	r2, [r7, #6]
 8000f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f20:	4611      	mov	r1, r2
 8000f22:	4a85      	ldr	r2, [pc, #532]	; (8001138 <MGPIO_vSetPinAlternativeFunction+0x278>)
 8000f24:	430b      	orrs	r3, r1
 8000f26:	6213      	str	r3, [r2, #32]
		else
		{
			GPIOA->GPIO_AFRH &= ~(0b1111<<copy_eGPIO_Pin);
			GPIOA->GPIO_AFRH |= (copy_GPIO_AF<<copy_eGPIO_Pin);
		}
		break;
 8000f28:	e100      	b.n	800112c <MGPIO_vSetPinAlternativeFunction+0x26c>
			GPIOA->GPIO_AFRH &= ~(0b1111<<copy_eGPIO_Pin);
 8000f2a:	4b83      	ldr	r3, [pc, #524]	; (8001138 <MGPIO_vSetPinAlternativeFunction+0x278>)
 8000f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2e:	79ba      	ldrb	r2, [r7, #6]
 8000f30:	210f      	movs	r1, #15
 8000f32:	fa01 f202 	lsl.w	r2, r1, r2
 8000f36:	43d2      	mvns	r2, r2
 8000f38:	4611      	mov	r1, r2
 8000f3a:	4a7f      	ldr	r2, [pc, #508]	; (8001138 <MGPIO_vSetPinAlternativeFunction+0x278>)
 8000f3c:	400b      	ands	r3, r1
 8000f3e:	6253      	str	r3, [r2, #36]	; 0x24
			GPIOA->GPIO_AFRH |= (copy_GPIO_AF<<copy_eGPIO_Pin);
 8000f40:	4b7d      	ldr	r3, [pc, #500]	; (8001138 <MGPIO_vSetPinAlternativeFunction+0x278>)
 8000f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f44:	7979      	ldrb	r1, [r7, #5]
 8000f46:	79ba      	ldrb	r2, [r7, #6]
 8000f48:	fa01 f202 	lsl.w	r2, r1, r2
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	4a7a      	ldr	r2, [pc, #488]	; (8001138 <MGPIO_vSetPinAlternativeFunction+0x278>)
 8000f50:	430b      	orrs	r3, r1
 8000f52:	6253      	str	r3, [r2, #36]	; 0x24
		break;
 8000f54:	e0ea      	b.n	800112c <MGPIO_vSetPinAlternativeFunction+0x26c>
	case PORTB:
		if (copy_eGPIO_Pin<8)
 8000f56:	79bb      	ldrb	r3, [r7, #6]
 8000f58:	2b07      	cmp	r3, #7
 8000f5a:	d815      	bhi.n	8000f88 <MGPIO_vSetPinAlternativeFunction+0xc8>
		{
			GPIOB->GPIO_AFRL &= ~(0b1111<<copy_eGPIO_Pin);
 8000f5c:	4b77      	ldr	r3, [pc, #476]	; (800113c <MGPIO_vSetPinAlternativeFunction+0x27c>)
 8000f5e:	6a1b      	ldr	r3, [r3, #32]
 8000f60:	79ba      	ldrb	r2, [r7, #6]
 8000f62:	210f      	movs	r1, #15
 8000f64:	fa01 f202 	lsl.w	r2, r1, r2
 8000f68:	43d2      	mvns	r2, r2
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4a73      	ldr	r2, [pc, #460]	; (800113c <MGPIO_vSetPinAlternativeFunction+0x27c>)
 8000f6e:	400b      	ands	r3, r1
 8000f70:	6213      	str	r3, [r2, #32]
			GPIOB->GPIO_AFRL |= (copy_GPIO_AF<<copy_eGPIO_Pin);
 8000f72:	4b72      	ldr	r3, [pc, #456]	; (800113c <MGPIO_vSetPinAlternativeFunction+0x27c>)
 8000f74:	6a1b      	ldr	r3, [r3, #32]
 8000f76:	7979      	ldrb	r1, [r7, #5]
 8000f78:	79ba      	ldrb	r2, [r7, #6]
 8000f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4a6e      	ldr	r2, [pc, #440]	; (800113c <MGPIO_vSetPinAlternativeFunction+0x27c>)
 8000f82:	430b      	orrs	r3, r1
 8000f84:	6213      	str	r3, [r2, #32]
		else
		{
			GPIOB->GPIO_AFRH &= ~(0b1111<<copy_eGPIO_Pin);
			GPIOB->GPIO_AFRH |= (copy_GPIO_AF<<copy_eGPIO_Pin);
		}
		break;
 8000f86:	e0d1      	b.n	800112c <MGPIO_vSetPinAlternativeFunction+0x26c>
			GPIOB->GPIO_AFRH &= ~(0b1111<<copy_eGPIO_Pin);
 8000f88:	4b6c      	ldr	r3, [pc, #432]	; (800113c <MGPIO_vSetPinAlternativeFunction+0x27c>)
 8000f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8c:	79ba      	ldrb	r2, [r7, #6]
 8000f8e:	210f      	movs	r1, #15
 8000f90:	fa01 f202 	lsl.w	r2, r1, r2
 8000f94:	43d2      	mvns	r2, r2
 8000f96:	4611      	mov	r1, r2
 8000f98:	4a68      	ldr	r2, [pc, #416]	; (800113c <MGPIO_vSetPinAlternativeFunction+0x27c>)
 8000f9a:	400b      	ands	r3, r1
 8000f9c:	6253      	str	r3, [r2, #36]	; 0x24
			GPIOB->GPIO_AFRH |= (copy_GPIO_AF<<copy_eGPIO_Pin);
 8000f9e:	4b67      	ldr	r3, [pc, #412]	; (800113c <MGPIO_vSetPinAlternativeFunction+0x27c>)
 8000fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa2:	7979      	ldrb	r1, [r7, #5]
 8000fa4:	79ba      	ldrb	r2, [r7, #6]
 8000fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8000faa:	4611      	mov	r1, r2
 8000fac:	4a63      	ldr	r2, [pc, #396]	; (800113c <MGPIO_vSetPinAlternativeFunction+0x27c>)
 8000fae:	430b      	orrs	r3, r1
 8000fb0:	6253      	str	r3, [r2, #36]	; 0x24
		break;
 8000fb2:	e0bb      	b.n	800112c <MGPIO_vSetPinAlternativeFunction+0x26c>
	case PORTC:
		if (copy_eGPIO_Pin<8)
 8000fb4:	79bb      	ldrb	r3, [r7, #6]
 8000fb6:	2b07      	cmp	r3, #7
 8000fb8:	d815      	bhi.n	8000fe6 <MGPIO_vSetPinAlternativeFunction+0x126>
		{
			GPIOC->GPIO_AFRL &= ~(0b1111<<copy_eGPIO_Pin);
 8000fba:	4b61      	ldr	r3, [pc, #388]	; (8001140 <MGPIO_vSetPinAlternativeFunction+0x280>)
 8000fbc:	6a1b      	ldr	r3, [r3, #32]
 8000fbe:	79ba      	ldrb	r2, [r7, #6]
 8000fc0:	210f      	movs	r1, #15
 8000fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc6:	43d2      	mvns	r2, r2
 8000fc8:	4611      	mov	r1, r2
 8000fca:	4a5d      	ldr	r2, [pc, #372]	; (8001140 <MGPIO_vSetPinAlternativeFunction+0x280>)
 8000fcc:	400b      	ands	r3, r1
 8000fce:	6213      	str	r3, [r2, #32]
			GPIOC->GPIO_AFRL |= (copy_GPIO_AF<<copy_eGPIO_Pin);
 8000fd0:	4b5b      	ldr	r3, [pc, #364]	; (8001140 <MGPIO_vSetPinAlternativeFunction+0x280>)
 8000fd2:	6a1b      	ldr	r3, [r3, #32]
 8000fd4:	7979      	ldrb	r1, [r7, #5]
 8000fd6:	79ba      	ldrb	r2, [r7, #6]
 8000fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fdc:	4611      	mov	r1, r2
 8000fde:	4a58      	ldr	r2, [pc, #352]	; (8001140 <MGPIO_vSetPinAlternativeFunction+0x280>)
 8000fe0:	430b      	orrs	r3, r1
 8000fe2:	6213      	str	r3, [r2, #32]
		else
		{
			GPIOC->GPIO_AFRH &= ~(0b1111<<copy_eGPIO_Pin);
			GPIOC->GPIO_AFRH |= (copy_GPIO_AF<<copy_eGPIO_Pin);
		}
		break;
 8000fe4:	e0a2      	b.n	800112c <MGPIO_vSetPinAlternativeFunction+0x26c>
			GPIOC->GPIO_AFRH &= ~(0b1111<<copy_eGPIO_Pin);
 8000fe6:	4b56      	ldr	r3, [pc, #344]	; (8001140 <MGPIO_vSetPinAlternativeFunction+0x280>)
 8000fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fea:	79ba      	ldrb	r2, [r7, #6]
 8000fec:	210f      	movs	r1, #15
 8000fee:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff2:	43d2      	mvns	r2, r2
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4a52      	ldr	r2, [pc, #328]	; (8001140 <MGPIO_vSetPinAlternativeFunction+0x280>)
 8000ff8:	400b      	ands	r3, r1
 8000ffa:	6253      	str	r3, [r2, #36]	; 0x24
			GPIOC->GPIO_AFRH |= (copy_GPIO_AF<<copy_eGPIO_Pin);
 8000ffc:	4b50      	ldr	r3, [pc, #320]	; (8001140 <MGPIO_vSetPinAlternativeFunction+0x280>)
 8000ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001000:	7979      	ldrb	r1, [r7, #5]
 8001002:	79ba      	ldrb	r2, [r7, #6]
 8001004:	fa01 f202 	lsl.w	r2, r1, r2
 8001008:	4611      	mov	r1, r2
 800100a:	4a4d      	ldr	r2, [pc, #308]	; (8001140 <MGPIO_vSetPinAlternativeFunction+0x280>)
 800100c:	430b      	orrs	r3, r1
 800100e:	6253      	str	r3, [r2, #36]	; 0x24
		break;
 8001010:	e08c      	b.n	800112c <MGPIO_vSetPinAlternativeFunction+0x26c>
	case PORTD:
		if (copy_eGPIO_Pin<8)
 8001012:	79bb      	ldrb	r3, [r7, #6]
 8001014:	2b07      	cmp	r3, #7
 8001016:	d815      	bhi.n	8001044 <MGPIO_vSetPinAlternativeFunction+0x184>
		{
			GPIOD->GPIO_AFRL &= ~(0b1111<<copy_eGPIO_Pin);
 8001018:	4b4a      	ldr	r3, [pc, #296]	; (8001144 <MGPIO_vSetPinAlternativeFunction+0x284>)
 800101a:	6a1b      	ldr	r3, [r3, #32]
 800101c:	79ba      	ldrb	r2, [r7, #6]
 800101e:	210f      	movs	r1, #15
 8001020:	fa01 f202 	lsl.w	r2, r1, r2
 8001024:	43d2      	mvns	r2, r2
 8001026:	4611      	mov	r1, r2
 8001028:	4a46      	ldr	r2, [pc, #280]	; (8001144 <MGPIO_vSetPinAlternativeFunction+0x284>)
 800102a:	400b      	ands	r3, r1
 800102c:	6213      	str	r3, [r2, #32]
			GPIOD->GPIO_AFRL |= (copy_GPIO_AF<<copy_eGPIO_Pin);
 800102e:	4b45      	ldr	r3, [pc, #276]	; (8001144 <MGPIO_vSetPinAlternativeFunction+0x284>)
 8001030:	6a1b      	ldr	r3, [r3, #32]
 8001032:	7979      	ldrb	r1, [r7, #5]
 8001034:	79ba      	ldrb	r2, [r7, #6]
 8001036:	fa01 f202 	lsl.w	r2, r1, r2
 800103a:	4611      	mov	r1, r2
 800103c:	4a41      	ldr	r2, [pc, #260]	; (8001144 <MGPIO_vSetPinAlternativeFunction+0x284>)
 800103e:	430b      	orrs	r3, r1
 8001040:	6213      	str	r3, [r2, #32]
		else
		{
			GPIOD->GPIO_AFRH &= ~(0b1111<<copy_eGPIO_Pin);
			GPIOD->GPIO_AFRH |= (copy_GPIO_AF<<copy_eGPIO_Pin);
		}
		break;
 8001042:	e073      	b.n	800112c <MGPIO_vSetPinAlternativeFunction+0x26c>
			GPIOD->GPIO_AFRH &= ~(0b1111<<copy_eGPIO_Pin);
 8001044:	4b3f      	ldr	r3, [pc, #252]	; (8001144 <MGPIO_vSetPinAlternativeFunction+0x284>)
 8001046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001048:	79ba      	ldrb	r2, [r7, #6]
 800104a:	210f      	movs	r1, #15
 800104c:	fa01 f202 	lsl.w	r2, r1, r2
 8001050:	43d2      	mvns	r2, r2
 8001052:	4611      	mov	r1, r2
 8001054:	4a3b      	ldr	r2, [pc, #236]	; (8001144 <MGPIO_vSetPinAlternativeFunction+0x284>)
 8001056:	400b      	ands	r3, r1
 8001058:	6253      	str	r3, [r2, #36]	; 0x24
			GPIOD->GPIO_AFRH |= (copy_GPIO_AF<<copy_eGPIO_Pin);
 800105a:	4b3a      	ldr	r3, [pc, #232]	; (8001144 <MGPIO_vSetPinAlternativeFunction+0x284>)
 800105c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105e:	7979      	ldrb	r1, [r7, #5]
 8001060:	79ba      	ldrb	r2, [r7, #6]
 8001062:	fa01 f202 	lsl.w	r2, r1, r2
 8001066:	4611      	mov	r1, r2
 8001068:	4a36      	ldr	r2, [pc, #216]	; (8001144 <MGPIO_vSetPinAlternativeFunction+0x284>)
 800106a:	430b      	orrs	r3, r1
 800106c:	6253      	str	r3, [r2, #36]	; 0x24
		break;
 800106e:	e05d      	b.n	800112c <MGPIO_vSetPinAlternativeFunction+0x26c>
	case PORTE:
		if (copy_eGPIO_Pin<8)
 8001070:	79bb      	ldrb	r3, [r7, #6]
 8001072:	2b07      	cmp	r3, #7
 8001074:	d815      	bhi.n	80010a2 <MGPIO_vSetPinAlternativeFunction+0x1e2>
		{
			GPIOE->GPIO_AFRL &= ~(0b1111<<copy_eGPIO_Pin);
 8001076:	4b34      	ldr	r3, [pc, #208]	; (8001148 <MGPIO_vSetPinAlternativeFunction+0x288>)
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	79ba      	ldrb	r2, [r7, #6]
 800107c:	210f      	movs	r1, #15
 800107e:	fa01 f202 	lsl.w	r2, r1, r2
 8001082:	43d2      	mvns	r2, r2
 8001084:	4611      	mov	r1, r2
 8001086:	4a30      	ldr	r2, [pc, #192]	; (8001148 <MGPIO_vSetPinAlternativeFunction+0x288>)
 8001088:	400b      	ands	r3, r1
 800108a:	6213      	str	r3, [r2, #32]
			GPIOE->GPIO_AFRL |= (copy_GPIO_AF<<copy_eGPIO_Pin);
 800108c:	4b2e      	ldr	r3, [pc, #184]	; (8001148 <MGPIO_vSetPinAlternativeFunction+0x288>)
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	7979      	ldrb	r1, [r7, #5]
 8001092:	79ba      	ldrb	r2, [r7, #6]
 8001094:	fa01 f202 	lsl.w	r2, r1, r2
 8001098:	4611      	mov	r1, r2
 800109a:	4a2b      	ldr	r2, [pc, #172]	; (8001148 <MGPIO_vSetPinAlternativeFunction+0x288>)
 800109c:	430b      	orrs	r3, r1
 800109e:	6213      	str	r3, [r2, #32]
		else
		{
			GPIOE->GPIO_AFRH &= ~(0b1111<<copy_eGPIO_Pin);
			GPIOE->GPIO_AFRH |= (copy_GPIO_AF<<copy_eGPIO_Pin);
		}
		break;
 80010a0:	e044      	b.n	800112c <MGPIO_vSetPinAlternativeFunction+0x26c>
			GPIOE->GPIO_AFRH &= ~(0b1111<<copy_eGPIO_Pin);
 80010a2:	4b29      	ldr	r3, [pc, #164]	; (8001148 <MGPIO_vSetPinAlternativeFunction+0x288>)
 80010a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a6:	79ba      	ldrb	r2, [r7, #6]
 80010a8:	210f      	movs	r1, #15
 80010aa:	fa01 f202 	lsl.w	r2, r1, r2
 80010ae:	43d2      	mvns	r2, r2
 80010b0:	4611      	mov	r1, r2
 80010b2:	4a25      	ldr	r2, [pc, #148]	; (8001148 <MGPIO_vSetPinAlternativeFunction+0x288>)
 80010b4:	400b      	ands	r3, r1
 80010b6:	6253      	str	r3, [r2, #36]	; 0x24
			GPIOE->GPIO_AFRH |= (copy_GPIO_AF<<copy_eGPIO_Pin);
 80010b8:	4b23      	ldr	r3, [pc, #140]	; (8001148 <MGPIO_vSetPinAlternativeFunction+0x288>)
 80010ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010bc:	7979      	ldrb	r1, [r7, #5]
 80010be:	79ba      	ldrb	r2, [r7, #6]
 80010c0:	fa01 f202 	lsl.w	r2, r1, r2
 80010c4:	4611      	mov	r1, r2
 80010c6:	4a20      	ldr	r2, [pc, #128]	; (8001148 <MGPIO_vSetPinAlternativeFunction+0x288>)
 80010c8:	430b      	orrs	r3, r1
 80010ca:	6253      	str	r3, [r2, #36]	; 0x24
		break;
 80010cc:	e02e      	b.n	800112c <MGPIO_vSetPinAlternativeFunction+0x26c>
	case PORTH:
		if (copy_eGPIO_Pin<8)
 80010ce:	79bb      	ldrb	r3, [r7, #6]
 80010d0:	2b07      	cmp	r3, #7
 80010d2:	d815      	bhi.n	8001100 <MGPIO_vSetPinAlternativeFunction+0x240>
		{
			GPIOH->GPIO_AFRL &= ~(0b1111<<copy_eGPIO_Pin);
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <MGPIO_vSetPinAlternativeFunction+0x28c>)
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	79ba      	ldrb	r2, [r7, #6]
 80010da:	210f      	movs	r1, #15
 80010dc:	fa01 f202 	lsl.w	r2, r1, r2
 80010e0:	43d2      	mvns	r2, r2
 80010e2:	4611      	mov	r1, r2
 80010e4:	4a19      	ldr	r2, [pc, #100]	; (800114c <MGPIO_vSetPinAlternativeFunction+0x28c>)
 80010e6:	400b      	ands	r3, r1
 80010e8:	6213      	str	r3, [r2, #32]
			GPIOH->GPIO_AFRL |= (copy_GPIO_AF<<copy_eGPIO_Pin);
 80010ea:	4b18      	ldr	r3, [pc, #96]	; (800114c <MGPIO_vSetPinAlternativeFunction+0x28c>)
 80010ec:	6a1b      	ldr	r3, [r3, #32]
 80010ee:	7979      	ldrb	r1, [r7, #5]
 80010f0:	79ba      	ldrb	r2, [r7, #6]
 80010f2:	fa01 f202 	lsl.w	r2, r1, r2
 80010f6:	4611      	mov	r1, r2
 80010f8:	4a14      	ldr	r2, [pc, #80]	; (800114c <MGPIO_vSetPinAlternativeFunction+0x28c>)
 80010fa:	430b      	orrs	r3, r1
 80010fc:	6213      	str	r3, [r2, #32]
		else
		{
			GPIOH->GPIO_AFRH &= ~(0b1111<<copy_eGPIO_Pin);
			GPIOH->GPIO_AFRH |= (copy_GPIO_AF<<copy_eGPIO_Pin);
		}
		break;
 80010fe:	e014      	b.n	800112a <MGPIO_vSetPinAlternativeFunction+0x26a>
			GPIOH->GPIO_AFRH &= ~(0b1111<<copy_eGPIO_Pin);
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <MGPIO_vSetPinAlternativeFunction+0x28c>)
 8001102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001104:	79ba      	ldrb	r2, [r7, #6]
 8001106:	210f      	movs	r1, #15
 8001108:	fa01 f202 	lsl.w	r2, r1, r2
 800110c:	43d2      	mvns	r2, r2
 800110e:	4611      	mov	r1, r2
 8001110:	4a0e      	ldr	r2, [pc, #56]	; (800114c <MGPIO_vSetPinAlternativeFunction+0x28c>)
 8001112:	400b      	ands	r3, r1
 8001114:	6253      	str	r3, [r2, #36]	; 0x24
			GPIOH->GPIO_AFRH |= (copy_GPIO_AF<<copy_eGPIO_Pin);
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <MGPIO_vSetPinAlternativeFunction+0x28c>)
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	7979      	ldrb	r1, [r7, #5]
 800111c:	79ba      	ldrb	r2, [r7, #6]
 800111e:	fa01 f202 	lsl.w	r2, r1, r2
 8001122:	4611      	mov	r1, r2
 8001124:	4a09      	ldr	r2, [pc, #36]	; (800114c <MGPIO_vSetPinAlternativeFunction+0x28c>)
 8001126:	430b      	orrs	r3, r1
 8001128:	6253      	str	r3, [r2, #36]	; 0x24
		break;
 800112a:	bf00      	nop





}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	40020000 	.word	0x40020000
 800113c:	40020400 	.word	0x40020400
 8001140:	40020800 	.word	0x40020800
 8001144:	40020c00 	.word	0x40020c00
 8001148:	40021000 	.word	0x40021000
 800114c:	40021c00 	.word	0x40021c00

08001150 <NVIC_vSetInterruptEnable>:
#include "NVIC_Interface.h"

uint32_t globalStatic_u32GroupCFG;

void NVIC_vSetInterruptEnable(Interrupt_t copy_eInterrupt)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
	NVIC->NVIC_ISER[copy_eInterrupt / 32]=1<<(copy_eInterrupt % 32);
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	425a      	negs	r2, r3
 8001160:	f003 031f 	and.w	r3, r3, #31
 8001164:	f002 021f 	and.w	r2, r2, #31
 8001168:	bf58      	it	pl
 800116a:	4253      	negpl	r3, r2
 800116c:	b25b      	sxtb	r3, r3
 800116e:	461a      	mov	r2, r3
 8001170:	2301      	movs	r3, #1
 8001172:	fa03 f102 	lsl.w	r1, r3, r2
 8001176:	4a08      	ldr	r2, [pc, #32]	; (8001198 <NVIC_vSetInterruptEnable+0x48>)
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	da00      	bge.n	8001182 <NVIC_vSetInterruptEnable+0x32>
 8001180:	331f      	adds	r3, #31
 8001182:	115b      	asrs	r3, r3, #5
 8001184:	b25b      	sxtb	r3, r3
 8001186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000e100 	.word	0xe000e100

0800119c <RCC_AHB1EnableCLK>:
	RCC->RCC_CR&= ~(1<<CSSON);
	RCC->RCC_CR|=(copy_eClock_detector<<CSSON);
}

void RCC_AHB1EnableCLK(PeripheralAHB1_t peripheral)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
	SET_BIT(RCC->RCC_AHB1ENR,peripheral);
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <RCC_AHB1EnableCLK+0x2c>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	79fa      	ldrb	r2, [r7, #7]
 80011ac:	2101      	movs	r1, #1
 80011ae:	fa01 f202 	lsl.w	r2, r1, r2
 80011b2:	4611      	mov	r1, r2
 80011b4:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <RCC_AHB1EnableCLK+0x2c>)
 80011b6:	430b      	orrs	r3, r1
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800

080011cc <RCC_APB2EnableCLK>:
	CLEAR_BIT(RCC->RCC_APB1ENR,peripheral);

}

void RCC_APB2EnableCLK(PeripheralAPB2_t peripheral)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
	SET_BIT(RCC->RCC_APB2ENR,peripheral);
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <RCC_APB2EnableCLK+0x2c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	79fa      	ldrb	r2, [r7, #7]
 80011dc:	2101      	movs	r1, #1
 80011de:	fa01 f202 	lsl.w	r2, r1, r2
 80011e2:	4611      	mov	r1, r2
 80011e4:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <RCC_APB2EnableCLK+0x2c>)
 80011e6:	430b      	orrs	r3, r1
 80011e8:	6453      	str	r3, [r2, #68]	; 0x44

}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800

080011fc <SysTick_Handler>:
#include "SysTick_Interface.h"
STK_Callback_t Global_SysTickCallback;
Interval_t Global_Interval;

void SysTick_Handler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
	if (Global_Interval == Interval_Single)
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <SysTick_Handler+0x2c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d105      	bne.n	8001214 <SysTick_Handler+0x18>
	{
		//disable counter
		CLEAR_BIT(MSTK->STK_CTRL,ENABLE);
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <SysTick_Handler+0x30>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a07      	ldr	r2, [pc, #28]	; (800122c <SysTick_Handler+0x30>)
 800120e:	f023 0301 	bic.w	r3, r3, #1
 8001212:	6013      	str	r3, [r2, #0]
	}
	if (Global_SysTickCallback != 0)
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <SysTick_Handler+0x34>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d002      	beq.n	8001222 <SysTick_Handler+0x26>
	{
		Global_SysTickCallback();
 800121c:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SysTick_Handler+0x34>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4798      	blx	r3
	}
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000104 	.word	0x20000104
 800122c:	e000e010 	.word	0xe000e010
 8001230:	20000100 	.word	0x20000100

08001234 <MSTK_vInit>:

void MSTK_vInit()
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
	/*1. CLK SRC*/
	CLEAR_BIT(MSTK->STK_CTRL,CLKSOURCE); // AHB/8 = 2 MHz
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <MSTK_vInit+0x28>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <MSTK_vInit+0x28>)
 800123e:	f023 0304 	bic.w	r3, r3, #4
 8001242:	6013      	str	r3, [r2, #0]

	/*2. interrupt enable  */
	SET_BIT(MSTK->STK_CTRL,TICKINT); // Enable INT
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <MSTK_vInit+0x28>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <MSTK_vInit+0x28>)
 800124a:	f043 0302 	orr.w	r3, r3, #2
 800124e:	6013      	str	r3, [r2, #0]


}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000e010 	.word	0xe000e010

08001260 <MSTK_vStopTimer>:
	MSTK->STK_LOAD=copy_u32Ticks;
	//Enable timer
	SET_BIT(MSTK->STK_CTRL,ENABLE);
}
void MSTK_vStopTimer()
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
	// reset timer value to clear count flag
	MSTK->STK_VAL = 0 ;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MSTK_vStopTimer+0x20>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]

	//disable counter
	CLEAR_BIT(MSTK->STK_CTRL,ENABLE);
 800126a:	4b05      	ldr	r3, [pc, #20]	; (8001280 <MSTK_vStopTimer+0x20>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a04      	ldr	r2, [pc, #16]	; (8001280 <MSTK_vStopTimer+0x20>)
 8001270:	f023 0301 	bic.w	r3, r3, #1
 8001274:	6013      	str	r3, [r2, #0]
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000e010 	.word	0xe000e010

08001284 <MSTK_vSetIntervalSingle>:
	// stop timer
	SET_BIT(MSTK->STK_CTRL,ENABLE);

}
void MSTK_vSetIntervalSingle(uint32_t copy_u32Ticks,STK_Callback_t copy_pSTK_Callback)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
	// callback
	Global_Interval=Interval_Single;
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <MSTK_vSetIntervalSingle+0x3c>)
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
	Global_SysTickCallback=copy_pSTK_Callback;
 8001294:	4a0b      	ldr	r2, [pc, #44]	; (80012c4 <MSTK_vSetIntervalSingle+0x40>)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	6013      	str	r3, [r2, #0]

	// reset timer value to clear count flag
	MSTK->STK_VAL = 0 ;
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <MSTK_vSetIntervalSingle+0x44>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]

	// load timer
	MSTK->STK_LOAD=copy_u32Ticks;
 80012a0:	4a09      	ldr	r2, [pc, #36]	; (80012c8 <MSTK_vSetIntervalSingle+0x44>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6053      	str	r3, [r2, #4]
	//Enable timer
	SET_BIT(MSTK->STK_CTRL,ENABLE);
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <MSTK_vSetIntervalSingle+0x44>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a07      	ldr	r2, [pc, #28]	; (80012c8 <MSTK_vSetIntervalSingle+0x44>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6013      	str	r3, [r2, #0]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000104 	.word	0x20000104
 80012c4:	20000100 	.word	0x20000100
 80012c8:	e000e010 	.word	0xe000e010

080012cc <MSTK_vGetElapsedTime>:
	SET_BIT(MSTK->STK_CTRL,ENABLE);

}

uint32_t MSTK_vGetElapsedTime()
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
	return ( MSTK->STK_LOAD - MSTK->STK_VAL) ;
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <MSTK_vGetElapsedTime+0x18>)
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <MSTK_vGetElapsedTime+0x18>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	1ad3      	subs	r3, r2, r3
}
 80012da:	4618      	mov	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000e010 	.word	0xe000e010

080012e8 <main>:


	}
}
int main(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0

	RCC_APB2EnableCLK(SYSCFGEN); // enable EXTI
 80012ec:	200e      	movs	r0, #14
 80012ee:	f7ff ff6d 	bl	80011cc <RCC_APB2EnableCLK>
	RCC_AHB1EnableCLK(GPIOAEN);
 80012f2:	2000      	movs	r0, #0
 80012f4:	f7ff ff52 	bl	800119c <RCC_AHB1EnableCLK>
	RCC_AHB1EnableCLK(GPIOBEN);
 80012f8:	2001      	movs	r0, #1
 80012fa:	f7ff ff4f 	bl	800119c <RCC_AHB1EnableCLK>
	NVIC_vSetInterruptEnable(NVIC_IEXTI0);
 80012fe:	2006      	movs	r0, #6
 8001300:	f7ff ff26 	bl	8001150 <NVIC_vSetInterruptEnable>
	MSTK_vInit();
 8001304:	f7ff ff96 	bl	8001234 <MSTK_vInit>
	MGPIO_Init( &ir_pin);
 8001308:	4807      	ldr	r0, [pc, #28]	; (8001328 <main+0x40>)
 800130a:	f7ff f903 	bl	8000514 <MGPIO_Init>
	MGPIO_Init( &RGB_pin[0]);
 800130e:	4807      	ldr	r0, [pc, #28]	; (800132c <main+0x44>)
 8001310:	f7ff f900 	bl	8000514 <MGPIO_Init>
	MGPIO_Init( &RGB_pin[1]);
 8001314:	4806      	ldr	r0, [pc, #24]	; (8001330 <main+0x48>)
 8001316:	f7ff f8fd 	bl	8000514 <MGPIO_Init>
	MGPIO_Init( &RGB_pin[2]);
 800131a:	4806      	ldr	r0, [pc, #24]	; (8001334 <main+0x4c>)
 800131c:	f7ff f8fa 	bl	8000514 <MGPIO_Init>
	IR_Init();
 8001320:	f7fe ffe6 	bl	80002f0 <IR_Init>




	/* Loop forever */
	for(;;)
 8001324:	e7fe      	b.n	8001324 <main+0x3c>
 8001326:	bf00      	nop
 8001328:	20000108 	.word	0x20000108
 800132c:	20000000 	.word	0x20000000
 8001330:	20000009 	.word	0x20000009
 8001334:	20000012 	.word	0x20000012

08001338 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001338:	480d      	ldr	r0, [pc, #52]	; (8001370 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800133a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800133c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001340:	480c      	ldr	r0, [pc, #48]	; (8001374 <LoopForever+0x6>)
  ldr r1, =_edata
 8001342:	490d      	ldr	r1, [pc, #52]	; (8001378 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001344:	4a0d      	ldr	r2, [pc, #52]	; (800137c <LoopForever+0xe>)
  movs r3, #0
 8001346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001348:	e002      	b.n	8001350 <LoopCopyDataInit>

0800134a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800134c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134e:	3304      	adds	r3, #4

08001350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001354:	d3f9      	bcc.n	800134a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001356:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001358:	4c0a      	ldr	r4, [pc, #40]	; (8001384 <LoopForever+0x16>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800135c:	e001      	b.n	8001362 <LoopFillZerobss>

0800135e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800135e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001360:	3204      	adds	r2, #4

08001362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001364:	d3fb      	bcc.n	800135e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001366:	f000 f811 	bl	800138c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800136a:	f7ff ffbd 	bl	80012e8 <main>

0800136e <LoopForever>:

LoopForever:
  b LoopForever
 800136e:	e7fe      	b.n	800136e <LoopForever>
  ldr   r0, =_estack
 8001370:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001378:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800137c:	080013f4 	.word	0x080013f4
  ldr r2, =_sbss
 8001380:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001384:	20000114 	.word	0x20000114

08001388 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001388:	e7fe      	b.n	8001388 <ADC_IRQHandler>
	...

0800138c <__libc_init_array>:
 800138c:	b570      	push	{r4, r5, r6, lr}
 800138e:	4d0d      	ldr	r5, [pc, #52]	; (80013c4 <__libc_init_array+0x38>)
 8001390:	4c0d      	ldr	r4, [pc, #52]	; (80013c8 <__libc_init_array+0x3c>)
 8001392:	1b64      	subs	r4, r4, r5
 8001394:	10a4      	asrs	r4, r4, #2
 8001396:	2600      	movs	r6, #0
 8001398:	42a6      	cmp	r6, r4
 800139a:	d109      	bne.n	80013b0 <__libc_init_array+0x24>
 800139c:	4d0b      	ldr	r5, [pc, #44]	; (80013cc <__libc_init_array+0x40>)
 800139e:	4c0c      	ldr	r4, [pc, #48]	; (80013d0 <__libc_init_array+0x44>)
 80013a0:	f000 f818 	bl	80013d4 <_init>
 80013a4:	1b64      	subs	r4, r4, r5
 80013a6:	10a4      	asrs	r4, r4, #2
 80013a8:	2600      	movs	r6, #0
 80013aa:	42a6      	cmp	r6, r4
 80013ac:	d105      	bne.n	80013ba <__libc_init_array+0x2e>
 80013ae:	bd70      	pop	{r4, r5, r6, pc}
 80013b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80013b4:	4798      	blx	r3
 80013b6:	3601      	adds	r6, #1
 80013b8:	e7ee      	b.n	8001398 <__libc_init_array+0xc>
 80013ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80013be:	4798      	blx	r3
 80013c0:	3601      	adds	r6, #1
 80013c2:	e7f2      	b.n	80013aa <__libc_init_array+0x1e>
 80013c4:	080013ec 	.word	0x080013ec
 80013c8:	080013ec 	.word	0x080013ec
 80013cc:	080013ec 	.word	0x080013ec
 80013d0:	080013f0 	.word	0x080013f0

080013d4 <_init>:
 80013d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013d6:	bf00      	nop
 80013d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013da:	bc08      	pop	{r3}
 80013dc:	469e      	mov	lr, r3
 80013de:	4770      	bx	lr

080013e0 <_fini>:
 80013e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013e2:	bf00      	nop
 80013e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013e6:	bc08      	pop	{r3}
 80013e8:	469e      	mov	lr, r3
 80013ea:	4770      	bx	lr
