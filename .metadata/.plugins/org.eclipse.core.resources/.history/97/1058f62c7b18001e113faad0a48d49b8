/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */


#include <stdint.h>
#include "stdio.h"
#include "RCC_Interface.h"
#include "GPIO_Interface.h"
#include "FreeRTOS.h"
#include "task.h"
#include "semphr.h"
GPIO_CFG_t pin_arr[3]=
{
		{.PIN_Port=PORTA,.PIN_Number=PIN0,.PIN_Type=OUTPUT,.PIN_OSpeed=LOW_SPEED,.PIN_OType=PUSH_PULL},
		{.PIN_Port=PORTA,.PIN_Number=PIN1,.PIN_Type=OUTPUT,.PIN_OSpeed=LOW_SPEED,.PIN_OType=PUSH_PULL},
		{.PIN_Port=PORTA,.PIN_Number=PIN2,.PIN_Type=OUTPUT,.PIN_OSpeed=LOW_SPEED,.PIN_OType=PUSH_PULL}
};

xSemaphoreHandle rgbSem = xSemaphoreCreateBinary();
BaseType_t rgbsemStatus;
void Task_RED0(void* pvParams)
{
	while(1)
	{
		rgbsemStatus=xSemaphoreTake(rgbSem,600);
		if(rgbsemStatus==pdPASS)
		{
			MGPIO_vToggleOutputPinValue(pin_arr[0].PIN_Port,pin_arr[0].PIN_Number);
			vTaskDelay(500);
			xSemaphoreGive(rgbSem);
		}
	}
}
void Task_BLUE1(void* pvParams)
{
	while(1)
	{
		rgbsemStatus=xSemaphoreTake(rgbSem,600);
		if(rgbsemStatus==pdPASS)
		{
			MGPIO_vToggleOutputPinValue(pin_arr[1].PIN_Port,pin_arr[1].PIN_Number);
			vTaskDelay(500);
			xSemaphoreGive(rgbSem);
		}
	}
}
void Task_LED2(void* pvParams)
{
	while(1)
	{
		MGPIO_vToggleOutputPinValue(pin_arr[2].PIN_Port,pin_arr[2].PIN_Number);
		vTaskDelay(500);

	}
}
int main(void)
{

	MGPIO_Init( &pin_arr[0]);
	MGPIO_Init( &pin_arr[1]);
	MGPIO_Init( &pin_arr[2]);
	//	 vTaskDelay(2000);
	//	 MGPIO_vSetOutputPinValue(pin_arr[1].PIN_Port,pin_arr[1].PIN_Number,OUTPUT_HIGH);

	xTaskCreate(Task_RED0,NULL,65,NULL,1,NULL);
	xTaskCreate(Task_BLUE1,NULL,65,NULL,2,NULL);
	xTaskCreate(Task_LED2,NULL,65,NULL,3,NULL);


	vTaskStartScheduler();


	/* Loop forever */
	for(;;);
}
