/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>


#include "HexParser_Interface.h"
#include "FMI_Interface.h"
#include "RCC_Interface.h"
#include "GPIO_Interface.h"
#include "SysTick_Interface.h"
#include "UART_Interface.h"

typedef void (*pFUNC_t)(void);
pFUNC_t APP;
#define SCB_VTOR   *((volatile uint32_t*)(0xE000ED00+0x08))
uint8_t TimeoutFlag = 0 ;
uint8_t Global_UARTFlagStatus = 0 ;
char RX_Buffer[50] ;
uint8_t Global_UARTCounter = 0 ;
uint8_t Global_EraseFlag = 0 ;

void SysTick_Func()
{
	TimeoutFlag = 1 ;
	SCB_VTOR = 0x08004000 ; // first vector in BTLD Code
	APP = (pFUNC_t) 0x08004004; // considered APP as a function
	APP();
}
int main(void)
{
	FMI_vInit();
	MSTK_vInit();
	MSTK_vSetIntervalSingle(30000000,SysTick_Func);
	GPIO_CFG_t UART_TX_pin = {.PIN_Port = PORTA,.PIN_Number=PIN9,.PIN_Type=ALTERNATE,.PIN_AF=AF7};
	GPIO_CFG_t UART_RX_pin = {.PIN_Port = PORTA,.PIN_Number=PIN10,.PIN_Type=ALTERNATE,.PIN_AF=AF7};
	MGPIO_Init( &UART_TX_pin);
	MGPIO_Init( &UART_RX_pin);
	UART_vInit();

	//	FMI_vFlashEraseSector(Sector3);
	//	uint16_t arr[3]={0x11FF,0xFF11,0xFFFF};
	//	FMI_vFlashWrite(0x08008000, arr, 3);
	//HexParser_vParseData(":10800000F9F989008093880002C0C0E0D0E00E9435");
	//	FMI_vFlashEraseSector(Sector3);

	/* Loop forever */
	while(TimeoutFlag == 0)
	{
		Global_UARTFlagStatus = UART_ReceivePeriodicCheck(&RX_Buffer[Global_UARTCounter]);
		if (Global_UARTFlagStatus == 1)
		{
			if (Global_EraseFlag==0)
			{
				Global_EraseFlag=1;
				HexParser_vEraseAppArea();
			}
			// stop 15 second to jump APP
			MSTK_vStopTimer();

			if (RX_Buffer[Global_UARTCounter] == '\n')
			{
				HexParser_vParseData(RX_Buffer) ;
				UART_vSendString("ok");
				Global_UARTCounter=0;

			}
			else
			{
				Global_UARTCounter++;
			}
			//end of file
			if (RX_Buffer[8] == '1')
			{
				MSTK_vSetIntervalSingle(1000000,SysTick_Func);

			}

		}
	}
}
