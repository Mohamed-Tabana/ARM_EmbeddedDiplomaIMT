/*
 * FMI_PRG.c
 *
 *  Created on: May 12, 2023
 *      Author: ALTAWKEL
 */


#include "FMI_Interface.h"


void FMI_vFlashEraseSector(FMI_Sector_t copy_eFMI_Sector)
{
	/* 0. unlock control register in FLASH_KEYR */
	FMI->FLASH_KEYR = FMI_KEY1;
	FMI->FLASH_KEYR = FMI_KEY2;
	/* 1. check busy bit */
	while(READ_BIT(FMI->FLASH_SR,SR_BSY));
	/* 2. Set the SER bit and select the sector out of the 5 sectors */
	SET_BIT(FMI->FLASH_CR,SER);

	FMI->FLASH_CR &= ~ (0b1111 << CR_SNB0);
	FMI->FLASH_CR |= copy_eFMI_Sector << CR_SNB0;
	/* 3. Set the STRT bit in the FLASH_CR register*/
	SET_BIT(FMI->FLASH_CR,STRT);

	/* 4. Wait for the BSY bit to be cleared */
	while(READ_BIT(FMI->FLASH_SR,SR_BSY));

}
void FMI_vFlashEraseMass()
{
	/* 0. unlock control register in FLASH_KEYR */
	FMI->FLASH_KEYR = FMI_KEY1;
	FMI->FLASH_KEYR = FMI_KEY2;
	/* 1. check busy bit */
	while(READ_BIT(FMI->FLASH_SR,SR_BSY));
	/* 2. Set the MER bit */
	SET_BIT(FMI->FLASH_CR,CR_MER);
	/* 3. Set the STRT bit in the FLASH_CR register*/
	SET_BIT(FMI->FLASH_CR,CR_STRT);
	/* 4. Wait for the BSY bit to be cleared */
	while(READ_BIT(FMI->FLASH_SR,SR_BSY));
}
void FMI_vFlashWrite(uint32_t copy_u32Address, uint16_t* copy_pu16Data, uint32_t copy_u32Size)
{
	/* 0. unlock control register in FLASH_KEYR */
	FMI->FLASH_KEYR = FMI_KEY1;
	FMI->FLASH_KEYR = FMI_KEY2;
	/* 1. check busy bit */
	while(READ_BIT(FMI->FLASH_SR,SR_BSY));
	/* 2. Set the PG bit */
	SET_BIT(FMI->FLASH_CR,CR_PG);
}
