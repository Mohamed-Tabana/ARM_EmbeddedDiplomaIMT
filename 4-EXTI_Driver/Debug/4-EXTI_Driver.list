
4-EXTI_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006cc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000860  08000868  00010868  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000860  08000860  00010868  2**0
                  CONTENTS
  4 .ARM          00000000  08000860  08000860  00010868  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000860  08000868  00010868  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000860  08000860  00010860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000864  08000864  00010864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010868  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  08000868  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000868  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010868  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001ce6  00000000  00000000  00010898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000556  00000000  00000000  0001257e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  00012ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000188  00000000  00000000  00012cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000dae  00000000  00000000  00012e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002962  00000000  00000000  00013bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000936e  00000000  00000000  00016550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001f8be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000068c  00000000  00000000  0001f910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000848 	.word	0x08000848

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000848 	.word	0x08000848

080001d4 <EXTI0_IRQHandler>:

#include "EXTI_Interface.h"
EXTI_Callback_t Global_EXTICallBack[16];

void EXTI0_IRQHandler(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	//if (Global_EXTICallBack[0] != NULL)
	Global_EXTICallBack[0]();
 80001d8:	4b02      	ldr	r3, [pc, #8]	; (80001e4 <EXTI0_IRQHandler+0x10>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4798      	blx	r3
}
 80001de:	bf00      	nop
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	2000001c 	.word	0x2000001c

080001e8 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
//	if (Global_EXTICallBack[1] != NULL)
	Global_EXTICallBack[1]();
 80001ec:	4b02      	ldr	r3, [pc, #8]	; (80001f8 <EXTI1_IRQHandler+0x10>)
 80001ee:	685b      	ldr	r3, [r3, #4]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	2000001c 	.word	0x2000001c

080001fc <MEXTI_vSetInterruptMask>:

//TODO do this for all 16 Line


void MEXTI_vSetInterruptMask(EXTI_Line_t copy_eEXTI_Line,EXTI_Masking_t copy_eEXTI_Masking)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	460a      	mov	r2, r1
 8000206:	71fb      	strb	r3, [r7, #7]
 8000208:	4613      	mov	r3, r2
 800020a:	71bb      	strb	r3, [r7, #6]
	switch(copy_eEXTI_Masking)
 800020c:	79bb      	ldrb	r3, [r7, #6]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d002      	beq.n	8000218 <MEXTI_vSetInterruptMask+0x1c>
 8000212:	2b01      	cmp	r3, #1
 8000214:	d010      	beq.n	8000238 <MEXTI_vSetInterruptMask+0x3c>
		MEXTI->EXTI_IMR&= ~(1<<copy_eEXTI_Line);
		MEXTI->EXTI_IMR|=  (1<<copy_eEXTI_Line);
		break;

	}
}
 8000216:	e025      	b.n	8000264 <MEXTI_vSetInterruptMask+0x68>
		MEXTI->EXTI_IMR&= ~(1<<copy_eEXTI_Line);
 8000218:	4b15      	ldr	r3, [pc, #84]	; (8000270 <MEXTI_vSetInterruptMask+0x74>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	79fa      	ldrb	r2, [r7, #7]
 800021e:	2101      	movs	r1, #1
 8000220:	fa01 f202 	lsl.w	r2, r1, r2
 8000224:	43d2      	mvns	r2, r2
 8000226:	4611      	mov	r1, r2
 8000228:	4a11      	ldr	r2, [pc, #68]	; (8000270 <MEXTI_vSetInterruptMask+0x74>)
 800022a:	400b      	ands	r3, r1
 800022c:	6013      	str	r3, [r2, #0]
		MEXTI->EXTI_IMR|=  (0<<copy_eEXTI_Line);
 800022e:	4b10      	ldr	r3, [pc, #64]	; (8000270 <MEXTI_vSetInterruptMask+0x74>)
 8000230:	4a0f      	ldr	r2, [pc, #60]	; (8000270 <MEXTI_vSetInterruptMask+0x74>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	6013      	str	r3, [r2, #0]
		break;
 8000236:	e015      	b.n	8000264 <MEXTI_vSetInterruptMask+0x68>
		MEXTI->EXTI_IMR&= ~(1<<copy_eEXTI_Line);
 8000238:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <MEXTI_vSetInterruptMask+0x74>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	79fa      	ldrb	r2, [r7, #7]
 800023e:	2101      	movs	r1, #1
 8000240:	fa01 f202 	lsl.w	r2, r1, r2
 8000244:	43d2      	mvns	r2, r2
 8000246:	4611      	mov	r1, r2
 8000248:	4a09      	ldr	r2, [pc, #36]	; (8000270 <MEXTI_vSetInterruptMask+0x74>)
 800024a:	400b      	ands	r3, r1
 800024c:	6013      	str	r3, [r2, #0]
		MEXTI->EXTI_IMR|=  (1<<copy_eEXTI_Line);
 800024e:	4b08      	ldr	r3, [pc, #32]	; (8000270 <MEXTI_vSetInterruptMask+0x74>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	79fa      	ldrb	r2, [r7, #7]
 8000254:	2101      	movs	r1, #1
 8000256:	fa01 f202 	lsl.w	r2, r1, r2
 800025a:	4611      	mov	r1, r2
 800025c:	4a04      	ldr	r2, [pc, #16]	; (8000270 <MEXTI_vSetInterruptMask+0x74>)
 800025e:	430b      	orrs	r3, r1
 8000260:	6013      	str	r3, [r2, #0]
		break;
 8000262:	bf00      	nop
}
 8000264:	bf00      	nop
 8000266:	370c      	adds	r7, #12
 8000268:	46bd      	mov	sp, r7
 800026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026e:	4770      	bx	lr
 8000270:	40013c00 	.word	0x40013c00

08000274 <MEXTI_vSetRisingTrigger>:


void MEXTI_vSetRisingTrigger(EXTI_Line_t copy_eEXTI_Line)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
	//Enable Rising
	MEXTI->EXTI_RTSR&= ~(1<<copy_eEXTI_Line);
 800027e:	4b15      	ldr	r3, [pc, #84]	; (80002d4 <MEXTI_vSetRisingTrigger+0x60>)
 8000280:	689b      	ldr	r3, [r3, #8]
 8000282:	79fa      	ldrb	r2, [r7, #7]
 8000284:	2101      	movs	r1, #1
 8000286:	fa01 f202 	lsl.w	r2, r1, r2
 800028a:	43d2      	mvns	r2, r2
 800028c:	4611      	mov	r1, r2
 800028e:	4a11      	ldr	r2, [pc, #68]	; (80002d4 <MEXTI_vSetRisingTrigger+0x60>)
 8000290:	400b      	ands	r3, r1
 8000292:	6093      	str	r3, [r2, #8]
	MEXTI->EXTI_RTSR|=  (1<<copy_eEXTI_Line);
 8000294:	4b0f      	ldr	r3, [pc, #60]	; (80002d4 <MEXTI_vSetRisingTrigger+0x60>)
 8000296:	689b      	ldr	r3, [r3, #8]
 8000298:	79fa      	ldrb	r2, [r7, #7]
 800029a:	2101      	movs	r1, #1
 800029c:	fa01 f202 	lsl.w	r2, r1, r2
 80002a0:	4611      	mov	r1, r2
 80002a2:	4a0c      	ldr	r2, [pc, #48]	; (80002d4 <MEXTI_vSetRisingTrigger+0x60>)
 80002a4:	430b      	orrs	r3, r1
 80002a6:	6093      	str	r3, [r2, #8]
	//disable Falling
	MEXTI->EXTI_FTSR&= ~(1<<copy_eEXTI_Line);
 80002a8:	4b0a      	ldr	r3, [pc, #40]	; (80002d4 <MEXTI_vSetRisingTrigger+0x60>)
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	79fa      	ldrb	r2, [r7, #7]
 80002ae:	2101      	movs	r1, #1
 80002b0:	fa01 f202 	lsl.w	r2, r1, r2
 80002b4:	43d2      	mvns	r2, r2
 80002b6:	4611      	mov	r1, r2
 80002b8:	4a06      	ldr	r2, [pc, #24]	; (80002d4 <MEXTI_vSetRisingTrigger+0x60>)
 80002ba:	400b      	ands	r3, r1
 80002bc:	60d3      	str	r3, [r2, #12]
	MEXTI->EXTI_FTSR|=  (0<<copy_eEXTI_Line);
 80002be:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <MEXTI_vSetRisingTrigger+0x60>)
 80002c0:	4a04      	ldr	r2, [pc, #16]	; (80002d4 <MEXTI_vSetRisingTrigger+0x60>)
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	60d3      	str	r3, [r2, #12]
}
 80002c6:	bf00      	nop
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	40013c00 	.word	0x40013c00

080002d8 <MEXTI_vSetSoftwareTrigger>:
	MEXTI->EXTI_RTSR&= ~(1<<copy_eEXTI_Line);
	MEXTI->EXTI_RTSR|=  (0<<copy_eEXTI_Line);

}
void MEXTI_vSetSoftwareTrigger(EXTI_Line_t copy_eEXTI_Line)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
	MEXTI->EXTI_SWIER&= ~(1<<copy_eEXTI_Line);
 80002e2:	4b0d      	ldr	r3, [pc, #52]	; (8000318 <MEXTI_vSetSoftwareTrigger+0x40>)
 80002e4:	691b      	ldr	r3, [r3, #16]
 80002e6:	79fa      	ldrb	r2, [r7, #7]
 80002e8:	2101      	movs	r1, #1
 80002ea:	fa01 f202 	lsl.w	r2, r1, r2
 80002ee:	43d2      	mvns	r2, r2
 80002f0:	4611      	mov	r1, r2
 80002f2:	4a09      	ldr	r2, [pc, #36]	; (8000318 <MEXTI_vSetSoftwareTrigger+0x40>)
 80002f4:	400b      	ands	r3, r1
 80002f6:	6113      	str	r3, [r2, #16]
	MEXTI->EXTI_SWIER|=  (1<<copy_eEXTI_Line);
 80002f8:	4b07      	ldr	r3, [pc, #28]	; (8000318 <MEXTI_vSetSoftwareTrigger+0x40>)
 80002fa:	691b      	ldr	r3, [r3, #16]
 80002fc:	79fa      	ldrb	r2, [r7, #7]
 80002fe:	2101      	movs	r1, #1
 8000300:	fa01 f202 	lsl.w	r2, r1, r2
 8000304:	4611      	mov	r1, r2
 8000306:	4a04      	ldr	r2, [pc, #16]	; (8000318 <MEXTI_vSetSoftwareTrigger+0x40>)
 8000308:	430b      	orrs	r3, r1
 800030a:	6113      	str	r3, [r2, #16]

}
 800030c:	bf00      	nop
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	40013c00 	.word	0x40013c00

0800031c <MEXTI_vSetCallBack>:
	MSYSCFG->SYSCFG_EXTICR[copy_eEXTI_Line/4] &= ~( 0b1111<<copy_eEXTI_Line%4);
	MSYSCFG->SYSCFG_EXTICR[copy_eEXTI_Line/4] |= copy_eEXTI_EXTIPortCFG<<copy_eEXTI_Line%4;

}
void MEXTI_vSetCallBack(EXTI_Line_t copy_eEXTI_Line,EXTI_Callback_t copy_EXTI_Callback)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	6039      	str	r1, [r7, #0]
 8000326:	71fb      	strb	r3, [r7, #7]
	Global_EXTICallBack[copy_eEXTI_Line]=copy_EXTI_Callback;
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	4905      	ldr	r1, [pc, #20]	; (8000340 <MEXTI_vSetCallBack+0x24>)
 800032c:	683a      	ldr	r2, [r7, #0]
 800032e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000332:	bf00      	nop
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	2000001c 	.word	0x2000001c

08000344 <MGPIO_vSetPinType>:

#include "GPIO_Interface.h"


void MGPIO_vSetPinType(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_PinType_t copy_eGPIO_PinType)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	71fb      	strb	r3, [r7, #7]
 800034e:	460b      	mov	r3, r1
 8000350:	71bb      	strb	r3, [r7, #6]
 8000352:	4613      	mov	r3, r2
 8000354:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	2b05      	cmp	r3, #5
 800035a:	f200 809f 	bhi.w	800049c <MGPIO_vSetPinType+0x158>
 800035e:	a201      	add	r2, pc, #4	; (adr r2, 8000364 <MGPIO_vSetPinType+0x20>)
 8000360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000364:	0800037d 	.word	0x0800037d
 8000368:	080003ad 	.word	0x080003ad
 800036c:	080003dd 	.word	0x080003dd
 8000370:	0800040d 	.word	0x0800040d
 8000374:	0800043d 	.word	0x0800043d
 8000378:	0800046d 	.word	0x0800046d
	{
	case PORTA:
		GPIOA->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 800037c:	4b4a      	ldr	r3, [pc, #296]	; (80004a8 <MGPIO_vSetPinType+0x164>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	79ba      	ldrb	r2, [r7, #6]
 8000382:	0052      	lsls	r2, r2, #1
 8000384:	2103      	movs	r1, #3
 8000386:	fa01 f202 	lsl.w	r2, r1, r2
 800038a:	43d2      	mvns	r2, r2
 800038c:	4611      	mov	r1, r2
 800038e:	4a46      	ldr	r2, [pc, #280]	; (80004a8 <MGPIO_vSetPinType+0x164>)
 8000390:	400b      	ands	r3, r1
 8000392:	6013      	str	r3, [r2, #0]
		GPIOA->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 8000394:	4b44      	ldr	r3, [pc, #272]	; (80004a8 <MGPIO_vSetPinType+0x164>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	7979      	ldrb	r1, [r7, #5]
 800039a:	79ba      	ldrb	r2, [r7, #6]
 800039c:	0052      	lsls	r2, r2, #1
 800039e:	fa01 f202 	lsl.w	r2, r1, r2
 80003a2:	4611      	mov	r1, r2
 80003a4:	4a40      	ldr	r2, [pc, #256]	; (80004a8 <MGPIO_vSetPinType+0x164>)
 80003a6:	430b      	orrs	r3, r1
 80003a8:	6013      	str	r3, [r2, #0]
		break;
 80003aa:	e077      	b.n	800049c <MGPIO_vSetPinType+0x158>
	case PORTB:
		GPIOB->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 80003ac:	4b3f      	ldr	r3, [pc, #252]	; (80004ac <MGPIO_vSetPinType+0x168>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	79ba      	ldrb	r2, [r7, #6]
 80003b2:	0052      	lsls	r2, r2, #1
 80003b4:	2103      	movs	r1, #3
 80003b6:	fa01 f202 	lsl.w	r2, r1, r2
 80003ba:	43d2      	mvns	r2, r2
 80003bc:	4611      	mov	r1, r2
 80003be:	4a3b      	ldr	r2, [pc, #236]	; (80004ac <MGPIO_vSetPinType+0x168>)
 80003c0:	400b      	ands	r3, r1
 80003c2:	6013      	str	r3, [r2, #0]
		GPIOB->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 80003c4:	4b39      	ldr	r3, [pc, #228]	; (80004ac <MGPIO_vSetPinType+0x168>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	7979      	ldrb	r1, [r7, #5]
 80003ca:	79ba      	ldrb	r2, [r7, #6]
 80003cc:	0052      	lsls	r2, r2, #1
 80003ce:	fa01 f202 	lsl.w	r2, r1, r2
 80003d2:	4611      	mov	r1, r2
 80003d4:	4a35      	ldr	r2, [pc, #212]	; (80004ac <MGPIO_vSetPinType+0x168>)
 80003d6:	430b      	orrs	r3, r1
 80003d8:	6013      	str	r3, [r2, #0]
		break;
 80003da:	e05f      	b.n	800049c <MGPIO_vSetPinType+0x158>
	case PORTC:
		GPIOC->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 80003dc:	4b34      	ldr	r3, [pc, #208]	; (80004b0 <MGPIO_vSetPinType+0x16c>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	79ba      	ldrb	r2, [r7, #6]
 80003e2:	0052      	lsls	r2, r2, #1
 80003e4:	2103      	movs	r1, #3
 80003e6:	fa01 f202 	lsl.w	r2, r1, r2
 80003ea:	43d2      	mvns	r2, r2
 80003ec:	4611      	mov	r1, r2
 80003ee:	4a30      	ldr	r2, [pc, #192]	; (80004b0 <MGPIO_vSetPinType+0x16c>)
 80003f0:	400b      	ands	r3, r1
 80003f2:	6013      	str	r3, [r2, #0]
		GPIOC->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 80003f4:	4b2e      	ldr	r3, [pc, #184]	; (80004b0 <MGPIO_vSetPinType+0x16c>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	7979      	ldrb	r1, [r7, #5]
 80003fa:	79ba      	ldrb	r2, [r7, #6]
 80003fc:	0052      	lsls	r2, r2, #1
 80003fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000402:	4611      	mov	r1, r2
 8000404:	4a2a      	ldr	r2, [pc, #168]	; (80004b0 <MGPIO_vSetPinType+0x16c>)
 8000406:	430b      	orrs	r3, r1
 8000408:	6013      	str	r3, [r2, #0]
		break;
 800040a:	e047      	b.n	800049c <MGPIO_vSetPinType+0x158>
	case PORTD:
		GPIOD->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 800040c:	4b29      	ldr	r3, [pc, #164]	; (80004b4 <MGPIO_vSetPinType+0x170>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	79ba      	ldrb	r2, [r7, #6]
 8000412:	0052      	lsls	r2, r2, #1
 8000414:	2103      	movs	r1, #3
 8000416:	fa01 f202 	lsl.w	r2, r1, r2
 800041a:	43d2      	mvns	r2, r2
 800041c:	4611      	mov	r1, r2
 800041e:	4a25      	ldr	r2, [pc, #148]	; (80004b4 <MGPIO_vSetPinType+0x170>)
 8000420:	400b      	ands	r3, r1
 8000422:	6013      	str	r3, [r2, #0]
		GPIOD->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 8000424:	4b23      	ldr	r3, [pc, #140]	; (80004b4 <MGPIO_vSetPinType+0x170>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	7979      	ldrb	r1, [r7, #5]
 800042a:	79ba      	ldrb	r2, [r7, #6]
 800042c:	0052      	lsls	r2, r2, #1
 800042e:	fa01 f202 	lsl.w	r2, r1, r2
 8000432:	4611      	mov	r1, r2
 8000434:	4a1f      	ldr	r2, [pc, #124]	; (80004b4 <MGPIO_vSetPinType+0x170>)
 8000436:	430b      	orrs	r3, r1
 8000438:	6013      	str	r3, [r2, #0]
		break;
 800043a:	e02f      	b.n	800049c <MGPIO_vSetPinType+0x158>
	case PORTE:
		GPIOE->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 800043c:	4b1e      	ldr	r3, [pc, #120]	; (80004b8 <MGPIO_vSetPinType+0x174>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	79ba      	ldrb	r2, [r7, #6]
 8000442:	0052      	lsls	r2, r2, #1
 8000444:	2103      	movs	r1, #3
 8000446:	fa01 f202 	lsl.w	r2, r1, r2
 800044a:	43d2      	mvns	r2, r2
 800044c:	4611      	mov	r1, r2
 800044e:	4a1a      	ldr	r2, [pc, #104]	; (80004b8 <MGPIO_vSetPinType+0x174>)
 8000450:	400b      	ands	r3, r1
 8000452:	6013      	str	r3, [r2, #0]
		GPIOE->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 8000454:	4b18      	ldr	r3, [pc, #96]	; (80004b8 <MGPIO_vSetPinType+0x174>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	7979      	ldrb	r1, [r7, #5]
 800045a:	79ba      	ldrb	r2, [r7, #6]
 800045c:	0052      	lsls	r2, r2, #1
 800045e:	fa01 f202 	lsl.w	r2, r1, r2
 8000462:	4611      	mov	r1, r2
 8000464:	4a14      	ldr	r2, [pc, #80]	; (80004b8 <MGPIO_vSetPinType+0x174>)
 8000466:	430b      	orrs	r3, r1
 8000468:	6013      	str	r3, [r2, #0]
		break;
 800046a:	e017      	b.n	800049c <MGPIO_vSetPinType+0x158>
	case PORTH:
		GPIOH->GPIO_MODER &= ~(0b11<<copy_eGPIO_Pin*2);
 800046c:	4b13      	ldr	r3, [pc, #76]	; (80004bc <MGPIO_vSetPinType+0x178>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	79ba      	ldrb	r2, [r7, #6]
 8000472:	0052      	lsls	r2, r2, #1
 8000474:	2103      	movs	r1, #3
 8000476:	fa01 f202 	lsl.w	r2, r1, r2
 800047a:	43d2      	mvns	r2, r2
 800047c:	4611      	mov	r1, r2
 800047e:	4a0f      	ldr	r2, [pc, #60]	; (80004bc <MGPIO_vSetPinType+0x178>)
 8000480:	400b      	ands	r3, r1
 8000482:	6013      	str	r3, [r2, #0]
		GPIOH->GPIO_MODER |= (copy_eGPIO_PinType<<copy_eGPIO_Pin*2);
 8000484:	4b0d      	ldr	r3, [pc, #52]	; (80004bc <MGPIO_vSetPinType+0x178>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	7979      	ldrb	r1, [r7, #5]
 800048a:	79ba      	ldrb	r2, [r7, #6]
 800048c:	0052      	lsls	r2, r2, #1
 800048e:	fa01 f202 	lsl.w	r2, r1, r2
 8000492:	4611      	mov	r1, r2
 8000494:	4a09      	ldr	r2, [pc, #36]	; (80004bc <MGPIO_vSetPinType+0x178>)
 8000496:	430b      	orrs	r3, r1
 8000498:	6013      	str	r3, [r2, #0]
		break;
 800049a:	bf00      	nop
	}
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr
 80004a8:	40020000 	.word	0x40020000
 80004ac:	40020400 	.word	0x40020400
 80004b0:	40020800 	.word	0x40020800
 80004b4:	40020c00 	.word	0x40020c00
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40021c00 	.word	0x40021c00

080004c0 <MGPIO_vSetOutputPinValueBSR>:
		break;
	}

}
void MGPIO_vSetOutputPinValueBSR(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_BS_t copy_GPIO_BS)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
 80004ca:	460b      	mov	r3, r1
 80004cc:	71bb      	strb	r3, [r7, #6]
 80004ce:	4613      	mov	r3, r2
 80004d0:	717b      	strb	r3, [r7, #5]
	switch (copy_eGPIO_Port)
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	2b05      	cmp	r3, #5
 80004d6:	f200 80ca 	bhi.w	800066e <MGPIO_vSetOutputPinValueBSR+0x1ae>
 80004da:	a201      	add	r2, pc, #4	; (adr r2, 80004e0 <MGPIO_vSetOutputPinValueBSR+0x20>)
 80004dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e0:	080004f9 	.word	0x080004f9
 80004e4:	08000535 	.word	0x08000535
 80004e8:	08000571 	.word	0x08000571
 80004ec:	080005ab 	.word	0x080005ab
 80004f0:	080005e5 	.word	0x080005e5
 80004f4:	0800061f 	.word	0x0800061f
	{
	case PORTA:
		if (copy_GPIO_BS == SET)
 80004f8:	797b      	ldrb	r3, [r7, #5]
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d10a      	bne.n	8000514 <MGPIO_vSetOutputPinValueBSR+0x54>
		{
			GPIOA->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 80004fe:	4b5f      	ldr	r3, [pc, #380]	; (800067c <MGPIO_vSetOutputPinValueBSR+0x1bc>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	79ba      	ldrb	r2, [r7, #6]
 8000504:	2101      	movs	r1, #1
 8000506:	fa01 f202 	lsl.w	r2, r1, r2
 800050a:	4611      	mov	r1, r2
 800050c:	4a5b      	ldr	r2, [pc, #364]	; (800067c <MGPIO_vSetOutputPinValueBSR+0x1bc>)
 800050e:	430b      	orrs	r3, r1
 8000510:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOA->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}
		break;
 8000512:	e0a1      	b.n	8000658 <MGPIO_vSetOutputPinValueBSR+0x198>
		else if(copy_GPIO_BS == RESET)
 8000514:	797b      	ldrb	r3, [r7, #5]
 8000516:	2b00      	cmp	r3, #0
 8000518:	f040 809e 	bne.w	8000658 <MGPIO_vSetOutputPinValueBSR+0x198>
			GPIOA->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 800051c:	4b57      	ldr	r3, [pc, #348]	; (800067c <MGPIO_vSetOutputPinValueBSR+0x1bc>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	79ba      	ldrb	r2, [r7, #6]
 8000522:	3210      	adds	r2, #16
 8000524:	2101      	movs	r1, #1
 8000526:	fa01 f202 	lsl.w	r2, r1, r2
 800052a:	4611      	mov	r1, r2
 800052c:	4a53      	ldr	r2, [pc, #332]	; (800067c <MGPIO_vSetOutputPinValueBSR+0x1bc>)
 800052e:	430b      	orrs	r3, r1
 8000530:	6193      	str	r3, [r2, #24]
		break;
 8000532:	e091      	b.n	8000658 <MGPIO_vSetOutputPinValueBSR+0x198>
	case PORTB:
		if (copy_GPIO_BS == SET)
 8000534:	797b      	ldrb	r3, [r7, #5]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d10a      	bne.n	8000550 <MGPIO_vSetOutputPinValueBSR+0x90>
		{
			GPIOB->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 800053a:	4b51      	ldr	r3, [pc, #324]	; (8000680 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	79ba      	ldrb	r2, [r7, #6]
 8000540:	2101      	movs	r1, #1
 8000542:	fa01 f202 	lsl.w	r2, r1, r2
 8000546:	4611      	mov	r1, r2
 8000548:	4a4d      	ldr	r2, [pc, #308]	; (8000680 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 800054a:	430b      	orrs	r3, r1
 800054c:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOB->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 800054e:	e085      	b.n	800065c <MGPIO_vSetOutputPinValueBSR+0x19c>
		else if(copy_GPIO_BS == RESET)
 8000550:	797b      	ldrb	r3, [r7, #5]
 8000552:	2b00      	cmp	r3, #0
 8000554:	f040 8082 	bne.w	800065c <MGPIO_vSetOutputPinValueBSR+0x19c>
			GPIOB->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000558:	4b49      	ldr	r3, [pc, #292]	; (8000680 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	79ba      	ldrb	r2, [r7, #6]
 800055e:	3210      	adds	r2, #16
 8000560:	2101      	movs	r1, #1
 8000562:	fa01 f202 	lsl.w	r2, r1, r2
 8000566:	4611      	mov	r1, r2
 8000568:	4a45      	ldr	r2, [pc, #276]	; (8000680 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 800056a:	430b      	orrs	r3, r1
 800056c:	6193      	str	r3, [r2, #24]
		}		break;
 800056e:	e075      	b.n	800065c <MGPIO_vSetOutputPinValueBSR+0x19c>
	case PORTC:
		if (copy_GPIO_BS == SET)
 8000570:	797b      	ldrb	r3, [r7, #5]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d10a      	bne.n	800058c <MGPIO_vSetOutputPinValueBSR+0xcc>
		{
			GPIOB->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8000576:	4b42      	ldr	r3, [pc, #264]	; (8000680 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	79ba      	ldrb	r2, [r7, #6]
 800057c:	2101      	movs	r1, #1
 800057e:	fa01 f202 	lsl.w	r2, r1, r2
 8000582:	4611      	mov	r1, r2
 8000584:	4a3e      	ldr	r2, [pc, #248]	; (8000680 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000586:	430b      	orrs	r3, r1
 8000588:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOB->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 800058a:	e069      	b.n	8000660 <MGPIO_vSetOutputPinValueBSR+0x1a0>
		else if(copy_GPIO_BS == RESET)
 800058c:	797b      	ldrb	r3, [r7, #5]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d166      	bne.n	8000660 <MGPIO_vSetOutputPinValueBSR+0x1a0>
			GPIOB->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000592:	4b3b      	ldr	r3, [pc, #236]	; (8000680 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	79ba      	ldrb	r2, [r7, #6]
 8000598:	3210      	adds	r2, #16
 800059a:	2101      	movs	r1, #1
 800059c:	fa01 f202 	lsl.w	r2, r1, r2
 80005a0:	4611      	mov	r1, r2
 80005a2:	4a37      	ldr	r2, [pc, #220]	; (8000680 <MGPIO_vSetOutputPinValueBSR+0x1c0>)
 80005a4:	430b      	orrs	r3, r1
 80005a6:	6193      	str	r3, [r2, #24]
		}		break;
 80005a8:	e05a      	b.n	8000660 <MGPIO_vSetOutputPinValueBSR+0x1a0>
	case PORTD:
		if (copy_GPIO_BS == SET)
 80005aa:	797b      	ldrb	r3, [r7, #5]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d10a      	bne.n	80005c6 <MGPIO_vSetOutputPinValueBSR+0x106>
		{
			GPIOD->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 80005b0:	4b34      	ldr	r3, [pc, #208]	; (8000684 <MGPIO_vSetOutputPinValueBSR+0x1c4>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	79ba      	ldrb	r2, [r7, #6]
 80005b6:	2101      	movs	r1, #1
 80005b8:	fa01 f202 	lsl.w	r2, r1, r2
 80005bc:	4611      	mov	r1, r2
 80005be:	4a31      	ldr	r2, [pc, #196]	; (8000684 <MGPIO_vSetOutputPinValueBSR+0x1c4>)
 80005c0:	430b      	orrs	r3, r1
 80005c2:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOD->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 80005c4:	e04e      	b.n	8000664 <MGPIO_vSetOutputPinValueBSR+0x1a4>
		else if(copy_GPIO_BS == RESET)
 80005c6:	797b      	ldrb	r3, [r7, #5]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d14b      	bne.n	8000664 <MGPIO_vSetOutputPinValueBSR+0x1a4>
			GPIOD->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 80005cc:	4b2d      	ldr	r3, [pc, #180]	; (8000684 <MGPIO_vSetOutputPinValueBSR+0x1c4>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	79ba      	ldrb	r2, [r7, #6]
 80005d2:	3210      	adds	r2, #16
 80005d4:	2101      	movs	r1, #1
 80005d6:	fa01 f202 	lsl.w	r2, r1, r2
 80005da:	4611      	mov	r1, r2
 80005dc:	4a29      	ldr	r2, [pc, #164]	; (8000684 <MGPIO_vSetOutputPinValueBSR+0x1c4>)
 80005de:	430b      	orrs	r3, r1
 80005e0:	6193      	str	r3, [r2, #24]
		}		break;
 80005e2:	e03f      	b.n	8000664 <MGPIO_vSetOutputPinValueBSR+0x1a4>
	case PORTE:
		if (copy_GPIO_BS == SET)
 80005e4:	797b      	ldrb	r3, [r7, #5]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d10a      	bne.n	8000600 <MGPIO_vSetOutputPinValueBSR+0x140>
		{
			GPIOE->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 80005ea:	4b27      	ldr	r3, [pc, #156]	; (8000688 <MGPIO_vSetOutputPinValueBSR+0x1c8>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	79ba      	ldrb	r2, [r7, #6]
 80005f0:	2101      	movs	r1, #1
 80005f2:	fa01 f202 	lsl.w	r2, r1, r2
 80005f6:	4611      	mov	r1, r2
 80005f8:	4a23      	ldr	r2, [pc, #140]	; (8000688 <MGPIO_vSetOutputPinValueBSR+0x1c8>)
 80005fa:	430b      	orrs	r3, r1
 80005fc:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOE->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 80005fe:	e033      	b.n	8000668 <MGPIO_vSetOutputPinValueBSR+0x1a8>
		else if(copy_GPIO_BS == RESET)
 8000600:	797b      	ldrb	r3, [r7, #5]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d130      	bne.n	8000668 <MGPIO_vSetOutputPinValueBSR+0x1a8>
			GPIOE->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000606:	4b20      	ldr	r3, [pc, #128]	; (8000688 <MGPIO_vSetOutputPinValueBSR+0x1c8>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	79ba      	ldrb	r2, [r7, #6]
 800060c:	3210      	adds	r2, #16
 800060e:	2101      	movs	r1, #1
 8000610:	fa01 f202 	lsl.w	r2, r1, r2
 8000614:	4611      	mov	r1, r2
 8000616:	4a1c      	ldr	r2, [pc, #112]	; (8000688 <MGPIO_vSetOutputPinValueBSR+0x1c8>)
 8000618:	430b      	orrs	r3, r1
 800061a:	6193      	str	r3, [r2, #24]
		}		break;
 800061c:	e024      	b.n	8000668 <MGPIO_vSetOutputPinValueBSR+0x1a8>
	case PORTH:
		if (copy_GPIO_BS == SET)
 800061e:	797b      	ldrb	r3, [r7, #5]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d10a      	bne.n	800063a <MGPIO_vSetOutputPinValueBSR+0x17a>
		{
			GPIOH->GPIO_BSRR |= (1<<copy_eGPIO_Pin);
 8000624:	4b19      	ldr	r3, [pc, #100]	; (800068c <MGPIO_vSetOutputPinValueBSR+0x1cc>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	79ba      	ldrb	r2, [r7, #6]
 800062a:	2101      	movs	r1, #1
 800062c:	fa01 f202 	lsl.w	r2, r1, r2
 8000630:	4611      	mov	r1, r2
 8000632:	4a16      	ldr	r2, [pc, #88]	; (800068c <MGPIO_vSetOutputPinValueBSR+0x1cc>)
 8000634:	430b      	orrs	r3, r1
 8000636:	6193      	str	r3, [r2, #24]
		}
		else if(copy_GPIO_BS == RESET)
		{
			GPIOH->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
		}		break;
 8000638:	e018      	b.n	800066c <MGPIO_vSetOutputPinValueBSR+0x1ac>
		else if(copy_GPIO_BS == RESET)
 800063a:	797b      	ldrb	r3, [r7, #5]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d115      	bne.n	800066c <MGPIO_vSetOutputPinValueBSR+0x1ac>
			GPIOH->GPIO_BSRR |= (1<<(copy_eGPIO_Pin+16));
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <MGPIO_vSetOutputPinValueBSR+0x1cc>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	79ba      	ldrb	r2, [r7, #6]
 8000646:	3210      	adds	r2, #16
 8000648:	2101      	movs	r1, #1
 800064a:	fa01 f202 	lsl.w	r2, r1, r2
 800064e:	4611      	mov	r1, r2
 8000650:	4a0e      	ldr	r2, [pc, #56]	; (800068c <MGPIO_vSetOutputPinValueBSR+0x1cc>)
 8000652:	430b      	orrs	r3, r1
 8000654:	6193      	str	r3, [r2, #24]
		}		break;
 8000656:	e009      	b.n	800066c <MGPIO_vSetOutputPinValueBSR+0x1ac>
		break;
 8000658:	bf00      	nop
 800065a:	e008      	b.n	800066e <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 800065c:	bf00      	nop
 800065e:	e006      	b.n	800066e <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 8000660:	bf00      	nop
 8000662:	e004      	b.n	800066e <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 8000664:	bf00      	nop
 8000666:	e002      	b.n	800066e <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 8000668:	bf00      	nop
 800066a:	e000      	b.n	800066e <MGPIO_vSetOutputPinValueBSR+0x1ae>
		}		break;
 800066c:	bf00      	nop
	}

}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	40020000 	.word	0x40020000
 8000680:	40020400 	.word	0x40020400
 8000684:	40020c00 	.word	0x40020c00
 8000688:	40021000 	.word	0x40021000
 800068c:	40021c00 	.word	0x40021c00

08000690 <NVIC_vSetInterruptEnable>:
#include "NVIC_Interface.h"

uint32_t globalStatic_u32GroupCFG;

void NVIC_vSetInterruptEnable(Interrupt_t copy_eInterrupt)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
	NVIC->NVIC_ISER[copy_eInterrupt / 32]=1<<(copy_eInterrupt % 32);
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	425a      	negs	r2, r3
 80006a0:	f003 031f 	and.w	r3, r3, #31
 80006a4:	f002 021f 	and.w	r2, r2, #31
 80006a8:	bf58      	it	pl
 80006aa:	4253      	negpl	r3, r2
 80006ac:	b25b      	sxtb	r3, r3
 80006ae:	461a      	mov	r2, r3
 80006b0:	2301      	movs	r3, #1
 80006b2:	fa03 f102 	lsl.w	r1, r3, r2
 80006b6:	4a08      	ldr	r2, [pc, #32]	; (80006d8 <NVIC_vSetInterruptEnable+0x48>)
 80006b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	da00      	bge.n	80006c2 <NVIC_vSetInterruptEnable+0x32>
 80006c0:	331f      	adds	r3, #31
 80006c2:	115b      	asrs	r3, r3, #5
 80006c4:	b25b      	sxtb	r3, r3
 80006c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	e000e100 	.word	0xe000e100

080006dc <RCC_AHB1EnableCLK>:
	RCC->RCC_CR&= ~(1<<CSSON);
	RCC->RCC_CR|=(copy_eClock_detector<<CSSON);
}

void RCC_AHB1EnableCLK(PeripheralAHB1_t peripheral)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	SET_BIT(RCC->RCC_AHB1ENR,peripheral);
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <RCC_AHB1EnableCLK+0x2c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	79fa      	ldrb	r2, [r7, #7]
 80006ec:	2101      	movs	r1, #1
 80006ee:	fa01 f202 	lsl.w	r2, r1, r2
 80006f2:	4611      	mov	r1, r2
 80006f4:	4a04      	ldr	r2, [pc, #16]	; (8000708 <RCC_AHB1EnableCLK+0x2c>)
 80006f6:	430b      	orrs	r3, r1
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800

0800070c <RCC_APB2EnableCLK>:
	CLEAR_BIT(RCC->RCC_APB1ENR,peripheral);

}

void RCC_APB2EnableCLK(PeripheralAPB2_t peripheral)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
	SET_BIT(RCC->RCC_APB2ENR,peripheral);
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <RCC_APB2EnableCLK+0x2c>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071a:	79fa      	ldrb	r2, [r7, #7]
 800071c:	2101      	movs	r1, #1
 800071e:	fa01 f202 	lsl.w	r2, r1, r2
 8000722:	4611      	mov	r1, r2
 8000724:	4a04      	ldr	r2, [pc, #16]	; (8000738 <RCC_APB2EnableCLK+0x2c>)
 8000726:	430b      	orrs	r3, r1
 8000728:	6453      	str	r3, [r2, #68]	; 0x44

}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800

0800073c <myfunc>:
#include "EXTI_Interface.h"
#include "NVIC_Interface.h"


void myfunc()
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0

	MGPIO_vSetOutputPinValueBSR(PORTA,PIN7,SET);
 8000740:	2201      	movs	r2, #1
 8000742:	2107      	movs	r1, #7
 8000744:	2000      	movs	r0, #0
 8000746:	f7ff febb 	bl	80004c0 <MGPIO_vSetOutputPinValueBSR>
	MGPIO_vSetOutputPinValueBSR(PORTB,PIN7,SET);
 800074a:	2201      	movs	r2, #1
 800074c:	2107      	movs	r1, #7
 800074e:	2001      	movs	r0, #1
 8000750:	f7ff feb6 	bl	80004c0 <MGPIO_vSetOutputPinValueBSR>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <main>:

int main(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	RCC_AHB1EnableCLK(GPIOAEN);
 800075c:	2000      	movs	r0, #0
 800075e:	f7ff ffbd 	bl	80006dc <RCC_AHB1EnableCLK>
	RCC_AHB1EnableCLK(GPIOBEN);
 8000762:	2001      	movs	r0, #1
 8000764:	f7ff ffba 	bl	80006dc <RCC_AHB1EnableCLK>
	RCC_APB2EnableCLK(SYSCFGEN);
 8000768:	200e      	movs	r0, #14
 800076a:	f7ff ffcf 	bl	800070c <RCC_APB2EnableCLK>


	MGPIO_vSetPinType(PORTA,PIN7,OUTPUT);
 800076e:	2201      	movs	r2, #1
 8000770:	2107      	movs	r1, #7
 8000772:	2000      	movs	r0, #0
 8000774:	f7ff fde6 	bl	8000344 <MGPIO_vSetPinType>
	MGPIO_vSetPinType(PORTB,PIN7,OUTPUT);
 8000778:	2201      	movs	r2, #1
 800077a:	2107      	movs	r1, #7
 800077c:	2001      	movs	r0, #1
 800077e:	f7ff fde1 	bl	8000344 <MGPIO_vSetPinType>


	MEXTI_vSetInterruptMask(EXTI_LINE_0,EXTI_NotMasked);
 8000782:	2101      	movs	r1, #1
 8000784:	2000      	movs	r0, #0
 8000786:	f7ff fd39 	bl	80001fc <MEXTI_vSetInterruptMask>
	MEXTI_vSetRisingTrigger(EXTI_LINE_0);
 800078a:	2000      	movs	r0, #0
 800078c:	f7ff fd72 	bl	8000274 <MEXTI_vSetRisingTrigger>
	MEXTI_vSetCallBack(EXTI_LINE_0,myfunc);
 8000790:	4905      	ldr	r1, [pc, #20]	; (80007a8 <main+0x50>)
 8000792:	2000      	movs	r0, #0
 8000794:	f7ff fdc2 	bl	800031c <MEXTI_vSetCallBack>
	MEXTI_vSetSoftwareTrigger(EXTI_LINE_0);
 8000798:	2000      	movs	r0, #0
 800079a:	f7ff fd9d 	bl	80002d8 <MEXTI_vSetSoftwareTrigger>


	NVIC_vSetInterruptEnable(NVIC_IEXTI0);
 800079e:	2006      	movs	r0, #6
 80007a0:	f7ff ff76 	bl	8000690 <NVIC_vSetInterruptEnable>


	while (1)
 80007a4:	e7fe      	b.n	80007a4 <main+0x4c>
 80007a6:	bf00      	nop
 80007a8:	0800073d 	.word	0x0800073d

080007ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007ac:	480d      	ldr	r0, [pc, #52]	; (80007e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b4:	480c      	ldr	r0, [pc, #48]	; (80007e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80007b6:	490d      	ldr	r1, [pc, #52]	; (80007ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80007b8:	4a0d      	ldr	r2, [pc, #52]	; (80007f0 <LoopForever+0xe>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007bc:	e002      	b.n	80007c4 <LoopCopyDataInit>

080007be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c2:	3304      	adds	r3, #4

080007c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c8:	d3f9      	bcc.n	80007be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ca:	4a0a      	ldr	r2, [pc, #40]	; (80007f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007cc:	4c0a      	ldr	r4, [pc, #40]	; (80007f8 <LoopForever+0x16>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d0:	e001      	b.n	80007d6 <LoopFillZerobss>

080007d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d4:	3204      	adds	r2, #4

080007d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d8:	d3fb      	bcc.n	80007d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007da:	f000 f811 	bl	8000800 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007de:	f7ff ffbb 	bl	8000758 <main>

080007e2 <LoopForever>:

LoopForever:
  b LoopForever
 80007e2:	e7fe      	b.n	80007e2 <LoopForever>
  ldr   r0, =_estack
 80007e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80007e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80007f0:	08000868 	.word	0x08000868
  ldr r2, =_sbss
 80007f4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80007f8:	2000005c 	.word	0x2000005c

080007fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007fc:	e7fe      	b.n	80007fc <ADC_IRQHandler>
	...

08000800 <__libc_init_array>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	4d0d      	ldr	r5, [pc, #52]	; (8000838 <__libc_init_array+0x38>)
 8000804:	4c0d      	ldr	r4, [pc, #52]	; (800083c <__libc_init_array+0x3c>)
 8000806:	1b64      	subs	r4, r4, r5
 8000808:	10a4      	asrs	r4, r4, #2
 800080a:	2600      	movs	r6, #0
 800080c:	42a6      	cmp	r6, r4
 800080e:	d109      	bne.n	8000824 <__libc_init_array+0x24>
 8000810:	4d0b      	ldr	r5, [pc, #44]	; (8000840 <__libc_init_array+0x40>)
 8000812:	4c0c      	ldr	r4, [pc, #48]	; (8000844 <__libc_init_array+0x44>)
 8000814:	f000 f818 	bl	8000848 <_init>
 8000818:	1b64      	subs	r4, r4, r5
 800081a:	10a4      	asrs	r4, r4, #2
 800081c:	2600      	movs	r6, #0
 800081e:	42a6      	cmp	r6, r4
 8000820:	d105      	bne.n	800082e <__libc_init_array+0x2e>
 8000822:	bd70      	pop	{r4, r5, r6, pc}
 8000824:	f855 3b04 	ldr.w	r3, [r5], #4
 8000828:	4798      	blx	r3
 800082a:	3601      	adds	r6, #1
 800082c:	e7ee      	b.n	800080c <__libc_init_array+0xc>
 800082e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000832:	4798      	blx	r3
 8000834:	3601      	adds	r6, #1
 8000836:	e7f2      	b.n	800081e <__libc_init_array+0x1e>
 8000838:	08000860 	.word	0x08000860
 800083c:	08000860 	.word	0x08000860
 8000840:	08000860 	.word	0x08000860
 8000844:	08000864 	.word	0x08000864

08000848 <_init>:
 8000848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800084a:	bf00      	nop
 800084c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800084e:	bc08      	pop	{r3}
 8000850:	469e      	mov	lr, r3
 8000852:	4770      	bx	lr

08000854 <_fini>:
 8000854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000856:	bf00      	nop
 8000858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800085a:	bc08      	pop	{r3}
 800085c:	469e      	mov	lr, r3
 800085e:	4770      	bx	lr
